{"version":3,"file":"mailchimp-form/view/index.js","mappings":"iEAWAA,EAHkB,2BAGD,CAChBC,QAAS,CACRC,UAAWC,UACV,MAAMC,EAAUC,IAChB,OAAO,IAAIC,QAAQH,MAAOI,EAASC,KAMlC,MAAM,SAAEC,EAAQ,MAAEC,GAAUN,EAC5B,IAAKK,GAAYA,EAASE,OAAS,EAClC,OAAOH,EAAO,CACbI,OAAQ,QACRC,QAAS,4BAGX,IAAKH,EACJ,OAAOF,EAAO,CACbI,OAAQ,QACRC,QAAS,sBAIX,MAAMC,EAAeC,EAAoBC,KAAMC,GAC9C,CAAC,eAAgB,SAASC,SAASD,EAAME,QACvCC,MAEGC,EAAeN,EAAoBC,KACvCC,GAAyB,iBAAfA,EAAME,OACfC,MAEH,OCzCWjB,gBAAyB,aACvCW,EAAY,aACZO,GAAe,EAAK,SACpBZ,GAAW,EAAK,MAChBC,GAAQ,IAQR,OANAY,QAAQC,IAAI,eAAgB,CAC3BT,eACAO,eACAZ,WACAC,UAEM,IAAIJ,QAAQ,CAACC,EAASC,KAC5B,MAAM,SAAEgB,GAAaC,OAAOC,IACtB,MAAEC,EAAK,iBAAEC,GAAqBH,OAAOC,GAAGG,IAE9C,IAAKR,EACJ,OAAO,IAAIS,MACV,kEAIF,MAAMC,EAAQjB,EAERe,EAAMG,SAASC,IACrB,IAAKN,EAAME,GACV,OAAO,IAAIC,MAAM,sBAAuBD,GAGzC,MAAMK,EAAON,EAAiB,CAC7BG,QACAI,cAAed,EACfe,UAAW3B,EACX4B,QAAS,iBACTC,WAAYT,IAIbL,EAASe,IAAIf,EAASgB,sBAAsB9B,IAE5Cc,EAAS,CACRU,KAAM,oCAAgBA,IACtBO,OAAQ,SAEPC,KAAMC,GACFA,EAASC,SACZtB,QAAQC,IAAI,uBAAwBoB,GAC7BpC,EAAQoC,KAEfrB,QAAQuB,MAAM,sBAAuBF,GAC9BnC,EAAOmC,KAGfG,MAAOC,IACPzB,QAAQuB,MAAM,qBAAsBE,GAC7BvC,EAAOuC,MAGlB,CDjBW7C,CAAU,CAChBY,eACAL,WACAY,eACAX,UAECgC,KAAMC,GACCpC,EAAQ,CACdK,OAAQ,UACRC,QAAS,wCACTmC,KAAML,KAGPG,MAAOC,GACAvC,EAAO,CACbI,OAAQ,QACRC,QAASkC,EAAElC,QACXmC,KAAMD","sources":["webpack://@prc/block-library/./src/mailchimp-form/view/index.js","webpack://@prc/block-library/./src/mailchimp-form/view/subscribe.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport { store, getContext } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-form';\nimport subscribe from './subscribe';\n\nstore(NAMESPACE, {\n\tactions: {\n\t\tsubscribe: async (fieldsForSubmission) => {\n\t\t\tconst context = getContext();\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\t// console.log(\n\t\t\t\t// \t'prc-block/mailchimp::view.actions.subscribe',\n\t\t\t\t// \tfieldsForSubmission,\n\t\t\t\t// \tcontext\n\t\t\t\t// );\n\t\t\t\tconst { interest, NONCE } = context;\n\t\t\t\tif (!interest && interest.length < 1) {\n\t\t\t\t\treturn reject({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tmessage: 'No interest id provided',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!NONCE) {\n\t\t\t\t\treturn reject({\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tmessage: 'No nonce provided',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Get the object out of fieldsForSubmission that has the name \"emailAddress\"\n\t\t\t\tconst emailAddress = fieldsForSubmission.find((field) =>\n\t\t\t\t\t['emailAddress', 'email'].includes(field.name)\n\t\t\t\t)?.value;\n\t\t\t\t// Get the object out of fieldsForSubmission that has the name \"captchaToken\"\n\t\t\t\tconst captchaToken = fieldsForSubmission.find(\n\t\t\t\t\t(field) => field.name === 'captchaToken'\n\t\t\t\t)?.value;\n\n\t\t\t\treturn subscribe({\n\t\t\t\t\temailAddress,\n\t\t\t\t\tinterest,\n\t\t\t\t\tcaptchaToken,\n\t\t\t\t\tNONCE,\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\treturn resolve({\n\t\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\t\tmessage: 'You have been subscribed to the list.',\n\t\t\t\t\t\t\tdata: response,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\treturn reject({\n\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\tmessage: e.message,\n\t\t\t\t\t\t\tdata: e,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t},\n});\n","const ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nexport default async function subscribe({\n\temailAddress,\n\tcaptchaToken = false,\n\tinterest = false,\n\tNONCE = false,\n}) {\n\tconsole.log('🐵 subscribe', {\n\t\temailAddress,\n\t\tcaptchaToken,\n\t\tinterest,\n\t\tNONCE,\n\t});\n\treturn new Promise((resolve, reject) => {\n\t\tconst { apiFetch } = window.wp;\n\t\tconst { isURL, buildQueryString } = window.wp.url;\n\n\t\tif (!captchaToken) {\n\t\t\treturn new Error(\n\t\t\t\t\"🙈 We couldn't verify you're not a robot 🤖. Please try again.\"\n\t\t\t);\n\t\t}\n\n\t\tconst email = emailAddress;\n\n\t\tconst url = document.URL;\n\t\tif (!isURL(url)) {\n\t\t\treturn new Error('🙈 Invalid page url', url);\n\t\t}\n\n\t\tconst path = buildQueryString({\n\t\t\temail,\n\t\t\tcaptcha_token: captchaToken,\n\t\t\tinterests: interest,\n\t\t\tapi_key: 'mailchimp-form',\n\t\t\torigin_url: url,\n\t\t});\n\n\t\t// Setup the nonce middleware.\n\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\n\t\tapiFetch({\n\t\t\tpath: `${ENDPOINT}/?${path}`,\n\t\t\tmethod: 'POST',\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.success) {\n\t\t\t\t\tconsole.log('🐵 MailChimp success', response);\n\t\t\t\t\treturn resolve(response);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('🙊 MailChimp reject', response);\n\t\t\t\t\treturn reject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.error('🙊 MailChimp error', e);\n\t\t\t\treturn reject(e);\n\t\t\t});\n\t});\n}\n"],"names":["store","actions","subscribe","async","context","getContext","Promise","resolve","reject","interest","NONCE","length","status","message","emailAddress","fieldsForSubmission","find","field","includes","name","value","captchaToken","console","log","apiFetch","window","wp","isURL","buildQueryString","url","Error","email","document","URL","path","captcha_token","interests","api_key","origin_url","use","createNonceMiddleware","method","then","response","success","error","catch","e","data"],"sourceRoot":""}