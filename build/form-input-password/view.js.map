{"version":3,"file":"form-input-password/view.js","mappings":"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","sources":["webpack://@prc/block-library/./src/form-input-password/view.js","webpack://@prc/block-library/./src/form-input-password/check-password-strength.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nimport checkPasswordStrength from './check-password-strength';\n\n/**\n * WordPress Interactivity Store for Password Input Block\n *\n * Manages password input state, validation, and confirmation functionality.\n * Handles password strength checking and synchronizes with parent form components.\n *\n * @namespace prc-block/form-input-password\n */\nconst { actions, state } = store('prc-block/form-input-password', {\n\tstate: {\n\t\t/**\n\t\t * Gets the unique identifier for the current password input block instance.\n\t\t *\n\t\t * @returns {string|false} The block ID from context, or false if not available\n\t\t */\n\t\tget id() {\n\t\t\treturn getContext()?.id || false;\n\t\t},\n\t\t/**\n\t\t * Gets the current password value for this input instance.\n\t\t *\n\t\t * @returns {string} The current password value or empty string if not set\n\t\t */\n\t\tget value() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.value || '';\n\t\t},\n\t\tget inputName() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.name;\n\t\t},\n\t\tget inputPlaceholder() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.placeholder;\n\t\t},\n\t\tget isInputHidden() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.hidden;\n\t\t},\n\t\tget isInputDisabled() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.disabled;\n\t\t},\n\t\tget isInputReadOnly() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.readOnly;\n\t\t},\n\t\tget isInputRequired() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.required;\n\t\t},\n\t\t/**\n\t\t * Determines if this password input has a confirmation field enabled.\n\t\t *\n\t\t * @returns {boolean} True if confirmation is required, false otherwise\n\t\t */\n\t\tget hasConfirmation() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.hasConfirmation || false;\n\t\t},\n\t\t/**\n\t\t * Gets the DOM ID of the associated password confirmation input field.\n\t\t *\n\t\t * @returns {string} The confirmation input field ID or empty string if not set\n\t\t */\n\t\tget confirmationInputId() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.confirmationInputId || '';\n\t\t},\n\t\t/**\n\t\t * Gets the current value of the password confirmation field.\n\t\t *\n\t\t * @returns {string} The confirmation password value or empty string if not set\n\t\t */\n\t\tget confirmationValue() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.confirmationValue || '';\n\t\t},\n\t\t/**\n\t\t * Checks if the password and confirmation password values match.\n\t\t *\n\t\t * @returns {boolean} True if passwords match, false otherwise\n\t\t */\n\t\tget passwordsMatch() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id]?.passwordsMatch || false;\n\t\t},\n\t\t/**\n\t\t * Determines if all password validation conditions are met.\n\t\t * This includes strength requirements and confirmation matching.\n\t\t *\n\t\t * @returns {boolean} True if all conditions in the conditions list are met\n\t\t */\n\t\tget allConditionsMet() {\n\t\t\tconst { id } = state;\n\t\t\treturn state[id].conditionsList.every((condition) => condition.met);\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Handles input change events for both password and confirmation fields.\n\t\t * Updates the appropriate state values based on the input's name attribute.\n\t\t *\n\t\t * @param {Event} event - The input change event containing the new value\n\t\t */\n\t\tonInputChange: withSyncEvent((event) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id, name } = ref;\n\t\t\tconst newValue = event.target?.value;\n\t\t\tconst blockId = state.id;\n\t\t\tconst inputId = id;\n\n\t\t\t// Store the input's value in the appropriate state object for the input:\n\t\t\tstate[blockId].value = newValue;\n\n\t\t\t// Determine which field was updated based on the input's name attribute\n\t\t\tif ('confirmPassword' === name) {\n\t\t\t\tstate[blockId].confirmationValue = newValue;\n\t\t\t} else {\n\t\t\t\tstate[blockId].value = newValue;\n\t\t\t}\n\t\t}),\n\t\tonLabelClick: withSyncEvent((event) => {\n\t\t\t// Find the adjacent input element and focus it.\n\t\t\tconst input = event.target.nextElementSibling;\n\t\t\tif (input && ['INPUT'].includes(input.tagName)) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t}),\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * Initializes the password confirmation functionality.\n\t\t *\n\t\t * Searches through form fields to locate the confirmation password input,\n\t\t * sets up the confirmation input ID, and initially disables the confirmation\n\t\t * field until the main password meets requirements.\n\t\t */\n\t\tonConfirmationInit: () => {\n\t\t\tconst { id, formFields } = state;\n\t\t\tconst blockId = id;\n\n\t\t\t// Search through form fields to find the confirmation password input\n\t\t\t// by looking for a field with name 'confirmPassword'\n\t\t\tconst confirmationInputId =\n\t\t\t\tformFields.find((field) => field.name === 'confirmPassword')\n\t\t\t\t\t?.id || false;\n\t\t\tconst confirmationInputIndex = formFields.findIndex(\n\t\t\t\t(field) => field.name === 'confirmPassword'\n\t\t\t);\n\n\t\t\tif (!confirmationInputId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store the confirmation input ID and initially disable the field\n\t\t\tstate[blockId].confirmationInputId = confirmationInputId;\n\t\t\tstate.formFields[confirmationInputIndex].isDisabled = true;\n\t\t},\n\t\t/**\n\t\t * Analyzes password strength and manages confirmation field state.\n\t\t *\n\t\t * Performs password strength validation, updates condition statuses,\n\t\t * enables/disables the confirmation input based on requirements,\n\t\t * and checks if passwords match when both values are present.\n\t\t */\n\t\tonPasswordAnalyzer: () => {\n\t\t\tconst { id } = getContext();\n\t\t\tconst {\n\t\t\t\tvalue,\n\t\t\t\tconfirmationValue,\n\t\t\t\tconfirmationInputId,\n\t\t\t\tformFields,\n\t\t\t} = state;\n\t\t\tconst blockId = state.id;\n\n\t\t\t// Exit early if no confirmation field is configured\n\t\t\tif (null === confirmationInputId || '' === confirmationInputId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Exit early if no password value to analyze\n\t\t\tif ('' === value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Run password strength analysis\n\t\t\tconst passwordStrengthCheck = checkPasswordStrength(value);\n\n\t\t\t// Determine if confirmation input should be enabled\n\t\t\t// (only if all strength requirements are met)\n\t\t\tconst disableConfirmInput = Object.values(\n\t\t\t\tpasswordStrengthCheck\n\t\t\t).every((result) => result === true);\n\n\t\t\t// Update confirmation input disabled state\n\t\t\tconst confirmationInputIndex = formFields.findIndex(\n\t\t\t\t(field) => field.name === 'confirmPassword'\n\t\t\t);\n\t\t\tstate.formFields[confirmationInputIndex].isDisabled =\n\t\t\t\t!disableConfirmInput;\n\n\t\t\t// Update password strength conditions in the conditions list\n\t\t\tconst newConditionsList = [];\n\t\t\tObject.keys(passwordStrengthCheck).forEach((key) => {\n\t\t\t\tconst index = state[blockId].conditionsList.findIndex(\n\t\t\t\t\t(condition) => condition.id === key\n\t\t\t\t);\n\t\t\t\tconst condition = state[blockId].conditionsList[index];\n\t\t\t\tcondition.met = passwordStrengthCheck[key];\n\t\t\t\tnewConditionsList[index] = condition;\n\t\t\t});\n\n\t\t\t// Check if passwords match and update the matching condition\n\t\t\tconst doesMatch = confirmationValue === value;\n\t\t\tstate[blockId].passwordsMatch = doesMatch;\n\n\t\t\tconst doesMatchIndex = state[blockId].conditionsList.findIndex(\n\t\t\t\t(condition) => condition.id === 'hasMatch'\n\t\t\t);\n\t\t\tconst passMatchCondition =\n\t\t\t\tstate[blockId].conditionsList[doesMatchIndex];\n\t\t\tpassMatchCondition.met = doesMatch;\n\t\t\tnewConditionsList[doesMatchIndex] = passMatchCondition;\n\n\t\t\t// Apply all condition updates\n\t\t\tstate[blockId].conditionsList = newConditionsList;\n\t\t},\n\t\t/**\n\t\t * Propagates password value changes to the parent form component.\n\t\t *\n\t\t * This generator function communicates with the target namespace (parent form)\n\t\t * to update the form's state when password validation conditions are met.\n\t\t *\n\t\t * For confirmation-enabled passwords: only propagates when all conditions are met\n\t\t * For simple passwords: propagates changes in real-time\n\t\t *\n\t\t * @generator\n\t\t * @yields {Object} Store reference for the target namespace\n\t\t */\n\t\t*onValueChange() {\n\t\t\tconst { targetNamespace, id } = getContext();\n\t\t\tconst { value, hasConfirmation, passwordsMatch, allConditionsMet } =\n\t\t\t\tstate;\n\n\t\t\tif (value) {\n\t\t\t\t// Get the target store (parent form) actions\n\t\t\t\tconst { actions: targetActions } = yield store(targetNamespace);\n\n\t\t\t\tif (targetActions.onInputChange) {\n\t\t\t\t\t// For confirmation-enabled passwords: only update parent when all conditions are met\n\t\t\t\t\tif (hasConfirmation && allConditionsMet) {\n\t\t\t\t\t\ttargetActions.onInputChange({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// For simple passwords: update parent in real-time\n\t\t\t\t\t} else if (!hasConfirmation) {\n\t\t\t\t\t\ttargetActions.onInputChange({\n\t\t\t\t\t\t\ttarget: {\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n});\n","export default function checkPasswordStrength(password) {\n\t// check if password has a lowercase letter\n\tconst hasLowerCase = /[a-z]/.test(password);\n\t// check if password has an uppercase letter\n\tconst hasUpperCase = /[A-Z]/.test(password);\n\t// check if password has a number\n\tconst hasNumber = /\\d/.test(password);\n\t// check if password has a symbol that is valid\n\tconst hasSpecialCharacter = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(\n\t\tpassword\n\t);\n\t// check if password is at least 12 characters long\n\tconst hasLength = password.length >= 12;\n\t// check that it only contains valid characters\n\tconst hasNoInvalidCharacters =\n\t\t/^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]*$/.test(password);\n\n\treturn {\n\t\thasLowerCase,\n\t\thasUpperCase,\n\t\thasNumber,\n\t\thasSpecialCharacter,\n\t\thasLength,\n\t\thasNoInvalidCharacters,\n\t};\n}\n"],"names":["actions","state","store","id","getContext","value","inputName","attributes","getElement","formFields","find","field","name","inputPlaceholder","placeholder","isInputHidden","hidden","isInputDisabled","disabled","isInputReadOnly","readOnly","isInputRequired","required","hasConfirmation","confirmationInputId","confirmationValue","passwordsMatch","allConditionsMet","conditionsList","every","condition","met","onInputChange","withSyncEvent","event","ref","newValue","target","blockId","onLabelClick","input","nextElementSibling","includes","tagName","focus","callbacks","onConfirmationInit","confirmationInputIndex","findIndex","isDisabled","onPasswordAnalyzer","passwordStrengthCheck","hasLowerCase","test","password","hasUpperCase","hasNumber","hasSpecialCharacter","hasLength","length","hasNoInvalidCharacters","disableConfirmInput","Object","values","result","newConditionsList","keys","forEach","key","index","doesMatch","doesMatchIndex","passMatchCondition","onValueChange","targetNamespace","targetActions"],"sourceRoot":""}