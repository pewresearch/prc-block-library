{"version":3,"file":"navigation-mega-menu/view.js","mappings":"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","sources":["webpack://@prc/block-library/./src/navigation-mega-menu/view.js","webpack://@prc/block-library/./src/navigation-mega-menu/use-ref-resizer.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\nimport { getValues } from './use-ref-resizer';\n\nconst { state, actions } = store('prc-block/navigation-mega-menu', {\n\tstate: {\n\t\tget isActive() {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\treturn state[id]?.isActive || false;\n\t\t},\n\t\tget width() {\n\t\t\tconst context = getContext();\n\t\t\treturn context.width;\n\t\t},\n\t\tget left() {\n\t\t\tconst context = getContext();\n\t\t\treturn context.left;\n\t\t},\n\t\tget top() {\n\t\t\tconst context = getContext();\n\t\t\treturn context.top;\n\t\t},\n\t},\n\tactions: {\n\t\tcloseAll: () => {\n\t\t\tObject.keys(state).forEach((key) => {\n\t\t\t\tstate[key].isActive = false;\n\t\t\t});\n\t\t},\n\t\ttoggleMenuOnClick() {\n\t\t\tconst { ref } = getElement();\n\t\t\tactions.toggleMenu();\n\t\t},\n\t\tcloseMenuOnClick() {\n\t\t\tactions.closeMenu('click');\n\t\t\tactions.closeMenu('focus');\n\t\t},\n\t\ttoggleMenu() {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\tstate[id].isActive = !state[id].isActive;\n\t\t},\n\t\topenMenu() {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\tstate[id].isActive = true;\n\t\t},\n\t\tcloseMenu() {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\tstate[id].isActive = false;\n\t\t},\n\t\tsetMenuPositions() {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst menu = ref.querySelector(\n\t\t\t\t'.wp-block-prc-block-navigation-mega-menu__container'\n\t\t\t);\n\t\t\tif (!menu) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst navBlock = menu.closest('.wp-block-navigation');\n\t\t\tif (!navBlock) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst context = getContext();\n\n\t\t\tconst { width, left, top } = getValues(\n\t\t\t\tref,\n\t\t\t\tref.closest('.wp-block-navigation')\n\t\t\t);\n\n\t\t\tcontext.width = width;\n\t\t\tcontext.left = left;\n\t\t\tcontext.top = top;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonInit() {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst menu = ref.querySelector(\n\t\t\t\t'.wp-block-prc-block-navigation-mega-menu__container'\n\t\t\t);\n\t\t\tcontext.menuRef = menu;\n\n\t\t\t// Set the initial menu positions\n\t\t\tactions.setMenuPositions();\n\n\t\t\tconst innerGroup = menu.querySelector(\n\t\t\t\t'.wp-block-group.has-background'\n\t\t\t);\n\t\t\tif (innerGroup) {\n\t\t\t\tconst activeClassnames = innerGroup.className.match(\n\t\t\t\t\t/(has-.*-background-color|has-background|has-text-color|has-.*-color)/g\n\t\t\t\t);\n\t\t\t\tcontext.activeClassnames = activeClassnames;\n\t\t\t}\n\t\t},\n\t\tonResize() {\n\t\t\t// Watch for window resize events and update the menu positions\n\t\t\tactions.setMenuPositions();\n\t\t},\n\t\tgetToggleClassname() {\n\t\t\tconst defaults = [\n\t\t\t\t'wp-block-navigation-item__content',\n\t\t\t\t'wp-block-prc-block-navigation-mega-menu__toggle',\n\t\t\t];\n\t\t\tconst context = getContext();\n\t\t\tconst { activeClassnames } = context;\n\t\t\t// convert the array of activeClassnames to a string\n\t\t\tif (state.isActive) {\n\t\t\t\tconst newClassnames =\n\t\t\t\t\tdefaults.join(' ') + activeClassnames.join(' ');\n\t\t\t\treturn newClassnames;\n\t\t\t}\n\t\t\treturn defaults.join(' ');\n\t\t},\n\t\tonWindowClickCloseMegaMenu: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!state[id]?.isActive) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst elm = getElement();\n\t\t\tconst { ref } = elm;\n\n\t\t\t// check elm for any of the event.target\n\t\t\t// if present then return early\n\t\t\tif (\n\t\t\t\tref.contains(event.target) &&\n\t\t\t\t!event.target.classList.contains(\n\t\t\t\t\t'wp-block-prc-block-popup-modal__outer'\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst megaMenuContainer = ref.querySelector(\n\t\t\t\t'.wp-block-prc-block-navigation-mega-menu__container'\n\t\t\t);\n\t\t\tif (\n\t\t\t\t!megaMenuContainer.innerHTML.includes(event.target.innerHTML) &&\n\t\t\t\ttrue === state[id].isActive\n\t\t\t) {\n\t\t\t\tstate[id].isActive = false;\n\t\t\t}\n\t\t},\n\t\tonESCKey: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { id } = context;\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.key === 'Escape') {\n\t\t\t\tif (true === state[id].isActive) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tstate[id].isActive = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n});\n","// Function to convert a complex CSS value to pixels\n// Everything below is heavily cribbed from Nick Diego for the js math window math.\nfunction convertCssValueToPixels(cssValue) {\n\t// Create a temporary element\n\tconst tempElement = document.createElement('div');\n\n\t// Apply the CSS value to the temporary element\n\t// For example, setting its width to the complex CSS value\n\ttempElement.style.width = cssValue;\n\n\t// Append the temporary element to the body to make it part of the document\n\tdocument.body.appendChild(tempElement);\n\n\t// Use getComputedStyle to get the computed width in pixels\n\tconst computedWidth = window.getComputedStyle(tempElement).width;\n\n\t// Remove the temporary element from the document\n\tdocument.body.removeChild(tempElement);\n\n\t// Return the computed width as a number\n\treturn parseFloat(computedWidth);\n}\n\nfunction getRootPaddingValues() {\n\tconst bodyStyles = window.getComputedStyle(document.body);\n\tlet rootPaddingLeft = bodyStyles\n\t\t.getPropertyValue('--wp--style--root--padding-left')\n\t\t.trim();\n\tlet rootPaddingRight = bodyStyles\n\t\t.getPropertyValue('--wp--style--root--padding-left')\n\t\t.trim();\n\t// Convert the CSS variable value to pixels.\n\trootPaddingLeft = '16px';\n\trootPaddingRight = '16px';\n\n\tconst rootPaddingLeftValue = convertCssValueToPixels(rootPaddingLeft);\n\tconst rootPaddingRightValue = convertCssValueToPixels(rootPaddingRight);\n\n\treturn {\n\t\trootPaddingLeftValue,\n\t\trootPaddingRightValue,\n\t};\n}\n\nexport function getValues(menuContainer, navBlock) {\n\tif (!menuContainer && !navBlock) {\n\t\treturn;\n\t}\n\n\t// Get the height of the navigation block containingthe menu\n\t// we use this to position the menu directly below the navigation block.\n\tconst navBlockHeight = navBlock.offsetHeight;\n\n\t// Find the body of menuContainer, remember iframes can have their own body.\n\tconst body = menuContainer.closest('body');\n\tconst windowWidth = body.offsetWidth;\n\n\t// Get the bounding rectangle of the menu container.\n\tconst menuRect = menuContainer.getBoundingClientRect();\n\t// Then the left position of the menu container.\n\t// This is used to position the menu negatively to the left of the navigation block\n\t// so that it is flush with the left edge of the navigation block.\n\tconst menuLeftPosition = menuRect?.left;\n\n\t// Determine the new values:\n\t// The top position of the menu is the height of\n\t// the navigation block minus 1px ( to account for borders )\n\tconst newTop = `${navBlockHeight - 1}px`;\n\t// The left position of the menu is the negative of the left position of the menu container.\n\tconst newLeft = `-${menuLeftPosition}px`;\n\t// We want all menus to extend the full width of the screen, for now.\n\tconst newWidth = `${windowWidth}px`;\n\n\treturn {\n\t\twidth: newWidth,\n\t\tleft: newLeft,\n\t\ttop: newTop,\n\t};\n}\n\nexport default function useRefResizer({ ref, isMobile, useState, useEffect }) {\n\tconst [topPosition, setTopPosition] = useState(0);\n\tconst [leftPosition, setLeftPosition] = useState(0);\n\tconst [widthValue, setWidth] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst updateRefPositions = () => {\n\t\t\tif (ref.current) {\n\t\t\t\tlet menuContainer; // That which menu options are acted upon.\n\t\t\t\tif (\n\t\t\t\t\tref.current.classList.contains(\n\t\t\t\t\t\t'wp-block-prc-block-navigation-mega-menu__container'\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tmenuContainer = ref.current;\n\t\t\t\t} else {\n\t\t\t\t\t// Return early if the ref.current is not the menu container.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet navBlock = menuContainer.closest('.wp-block-navigation'); // That which menu options are derived from.\n\t\t\t\tnavBlock = navBlock.parentElement;\n\n\t\t\t\tconst { width, left, top } = getValues(menuContainer, navBlock);\n\n\t\t\t\tsetTopPosition(top);\n\t\t\t\tsetLeftPosition(left);\n\t\t\t\tsetWidth(width);\n\t\t\t}\n\t\t};\n\n\t\t// Run once, to initially set the positions.\n\t\tupdateRefPositions();\n\n\t\t// Add a listener for the window resize event\n\t\twindow.addEventListener('resize', updateRefPositions);\n\n\t\treturn () => {\n\t\t\t// Remove the listener when the component unmounts\n\t\t\twindow.removeEventListener('resize', updateRefPositions);\n\t\t};\n\t}, [ref.current, isMobile]);\n\n\treturn {\n\t\ttopPosition,\n\t\tleftPosition,\n\t\twidth: widthValue,\n\t};\n}\n"],"names":["state","actions","store","isActive","context","getContext","id","width","left","top","closeAll","Object","keys","forEach","key","toggleMenuOnClick","ref","getElement","toggleMenu","closeMenuOnClick","closeMenu","openMenu","setMenuPositions","menu","querySelector","closest","menuContainer","navBlock","navBlockHeight","offsetHeight","windowWidth","offsetWidth","menuRect","getBoundingClientRect","menuLeftPosition","getValues","callbacks","onInit","menuRef","innerGroup","activeClassnames","className","match","onResize","getToggleClassname","defaults","join","onWindowClickCloseMegaMenu","event","elm","contains","target","classList","innerHTML","includes","onESCKey","preventDefault"],"sourceRoot":""}