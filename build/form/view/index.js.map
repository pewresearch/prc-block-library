{"version":3,"file":"form/view/index.js","mappings":"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","sources":["webpack://@prc/block-library/webpack/bootstrap","webpack://@prc/block-library/webpack/runtime/define property getters","webpack://@prc/block-library/webpack/runtime/hasOwnProperty shorthand","webpack://@prc/block-library/external module \"@wordpress/interactivity\"","webpack://@prc/block-library/./src/form/view/form-response.ts","webpack://@prc/block-library/./src/form/view/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store), [\"withSyncEvent\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.withSyncEvent) });","export class FormResponse {\n\tactionUrl: string | null;\n\tmessage: string;\n\tdata: any;\n\tstatus: string;\n\n\tconstructor(result: any) {\n\t\tthis.actionUrl = result?.actionUrl;\n\t\tthis.message = result.message;\n\t\tthis.data = result.data;\n\t\tthis.status = result.status;\n\t}\n\n\tget isSuccess() {\n\t\treturn this.status === 'success';\n\t}\n\n\tget isError() {\n\t\treturn this.status === 'error';\n\t}\n\n\tget isProcessing() {\n\t\treturn this.status === 'processing';\n\t}\n}\n","/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nimport { FormResponse } from './form-response';\n\n/**\n * LocalStorage utilities for form persistence\n */\nconst FormPersistence = {\n\tSTORAGE_KEY_PREFIX: 'prc_form_data_',\n\tEXPIRY_HOURS: 24, // Data expires after 24 hours\n\n\t/**\n\t * Generate a storage key for a specific form\n\t */\n\tgetStorageKey(formId) {\n\t\treturn `${this.STORAGE_KEY_PREFIX}${formId}`;\n\t},\n\n\t/**\n\t * Save form data to localStorage\n\t */\n\tsaveFormData(formId, formFields) {\n\t\ttry {\n\t\t\t// Only save fields that have values and aren't sensitive\n\t\t\tconst dataToSave = {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tfields: formFields\n\t\t\t\t\t.filter((field) => {\n\t\t\t\t\t\t// Don't save password fields or hidden fields for security\n\t\t\t\t\t\tconst sensitiveTypes = ['password', 'hidden'];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tfield.value && !sensitiveTypes.includes(field.type)\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.map((field) => ({\n\t\t\t\t\t\tid: field.id,\n\t\t\t\t\t\tname: field.name,\n\t\t\t\t\t\tvalue: field.value,\n\t\t\t\t\t\tchecked: field?.checked || null,\n\t\t\t\t\t})),\n\t\t\t};\n\n\t\t\tlocalStorage.setItem(\n\t\t\t\tthis.getStorageKey(formId),\n\t\t\t\tJSON.stringify(dataToSave)\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to save form data to localStorage:', error);\n\t\t}\n\t},\n\n\t/**\n\t * Load form data from localStorage\n\t */\n\tloadFormData(formId) {\n\t\ttry {\n\t\t\tconst stored = localStorage.getItem(this.getStorageKey(formId));\n\t\t\tif (!stored) return null;\n\n\t\t\tconst data = JSON.parse(stored);\n\n\t\t\t// Check if data has expired\n\t\t\tconst now = Date.now();\n\t\t\tconst expiryTime =\n\t\t\t\tdata.timestamp + this.EXPIRY_HOURS * 60 * 60 * 1000;\n\n\t\t\tif (now > expiryTime) {\n\t\t\t\tthis.clearFormData(formId);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn data.fields;\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to load form data from localStorage:', error);\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Clear form data from localStorage\n\t */\n\tclearFormData(formId) {\n\t\ttry {\n\t\t\tlocalStorage.removeItem(this.getStorageKey(formId));\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to clear form data from localStorage:', error);\n\t\t}\n\t},\n\n\t/**\n\t * Clear all expired form data\n\t */\n\tclearExpiredData() {\n\t\ttry {\n\t\t\tconst now = Date.now();\n\t\t\tconst keysToRemove = [];\n\n\t\t\tfor (let i = 0; i < localStorage.length; i++) {\n\t\t\t\tconst key = localStorage.key(i);\n\t\t\t\tif (key && key.startsWith(this.STORAGE_KEY_PREFIX)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst data = JSON.parse(localStorage.getItem(key));\n\t\t\t\t\t\tconst expiryTime =\n\t\t\t\t\t\t\tdata.timestamp + this.EXPIRY_HOURS * 60 * 60 * 1000;\n\n\t\t\t\t\t\tif (now > expiryTime) {\n\t\t\t\t\t\t\tkeysToRemove.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Invalid data format, remove it\n\t\t\t\t\t\tkeysToRemove.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeysToRemove.forEach((key) => localStorage.removeItem(key));\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to clear expired form data:', error);\n\t\t}\n\t},\n};\n\nconst collectFormFields = (ref) => {\n\t// find all the input elements in the ref that have a class name that contains at least 'wp-block-prc-block-form-input-*' with a wildcard at the end\n\tconst inputElements = ref.querySelectorAll(\n\t\t'input, select, textarea, .wp-block-prc-block-form-input-password'\n\t);\n\t// Find all that have a name attribute and return an array of objects with the name, the value, and the ref\n\tconst formFields = [];\n\tinputElements.forEach((input) => {\n\t\tif (input.type === 'password') {\n\t\t\treturn;\n\t\t}\n\t\tif (input.id) {\n\t\t\tformFields.push(input.id);\n\t\t}\n\t});\n\treturn formFields;\n};\n\nconst { state, actions } = store('prc-block/form', {\n\tstate: {\n\t\tsuccess: false,\n\t\terror: false,\n\t\tprocessing: false,\n\t\tget submissionDisabled() {\n\t\t\tconst context = getContext();\n\t\t\treturn !context.allowSubmit;\n\t\t},\n\t\tget fieldsForSubmission() {\n\t\t\tconst context = getContext();\n\t\t\tconst { formFields } = context;\n\t\t\tconst allFormFields = state.formFields;\n\t\t\t// Find the formFields in allFormFields that are in formFields\n\t\t\tconst formFieldsToSubmit = allFormFields.filter((field) =>\n\t\t\t\tformFields.includes(field.id)\n\t\t\t);\n\t\t\t// Add the captchaToken as a pseudo-field.\n\t\t\tformFieldsToSubmit.push({\n\t\t\t\tid: 'captchaToken',\n\t\t\t\ttype: 'captchaToken',\n\t\t\t\tvalue: context.captchaToken,\n\t\t\t\trequired: false,\n\t\t\t\tname: 'captchaToken',\n\t\t\t});\n\n\t\t\treturn formFieldsToSubmit;\n\t\t},\n\t\tget inputType() {\n\t\t\tconst context = getContext();\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.type;\n\t\t},\n\t\tget inputValue() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.value;\n\t\t},\n\t\tget inputName() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.name;\n\t\t},\n\t\tget inputPlaceholder() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.placeholder;\n\t\t},\n\t\tget isInputHidden() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.hidden;\n\t\t},\n\t\tget isInputDisabled() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.disabled;\n\t\t},\n\t\tget isInputReadOnly() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.readOnly;\n\t\t},\n\t\tget isInputRequired() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.required;\n\t\t},\n\t\tget isInputChecked() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.checked;\n\t\t},\n\t\tget isInputError() {\n\t\t\t// Check if this field has an error state.\n\t\t\tconst { formFields } = state;\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\treturn (\n\t\t\t\tformFields.find((field) => field.id === id)?.error ||\n\t\t\t\tstate.error\n\t\t\t);\n\t\t},\n\t\tget isInputSuccess() {\n\t\t\treturn state.success;\n\t\t},\n\t\tget isInputProcessing() {\n\t\t\treturn state.processing;\n\t\t},\n\t\tget hasErrors() {\n\t\t\tconst context = getContext();\n\t\t\treturn context.errors.length > 0;\n\t\t},\n\t\tget formMessage() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.formMessage || false;\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Update the state of an input field.\n\t\t * You can update properties like value, disabled, readonly, hidden, etc.\n\t\t *\n\t\t * @param {string} name - The name of the input field.\n\t\t * @param {string} prop - The property to update.\n\t\t * @param {any} value - The value to update the property to.\n\t\t */\n\t\tupdateInputStateProp: (id, prop, value) => {\n\t\t\tconst { formFields } = state;\n\t\t\tconst formField = formFields.find((field) => field.id === id);\n\t\t\tif (formField) {\n\t\t\t\tformField[prop] = value;\n\t\t\t}\n\t\t\tconst { formId } = getContext();\n\t\t\t// console.log('updateInputStateProp', {\n\t\t\t// \tformId,\n\t\t\t// \tid,\n\t\t\t// \tprop,\n\t\t\t// \tvalue,\n\t\t\t// \tformFields,\n\t\t\t// \tstate,\n\t\t\t// });\n\t\t\tstate.formFields = formFields;\n\t\t\tFormPersistence.saveFormData(formId, formFields);\n\t\t},\n\t\tonLabelClick: withSyncEvent((event) => {\n\t\t\t// Find the adjacent input element and focus it.\n\t\t\tconst input = event.target.nextElementSibling;\n\t\t\tif (\n\t\t\t\tinput &&\n\t\t\t\t['INPUT', 'SELECT', 'TEXTAREA'].includes(input.tagName)\n\t\t\t) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Get the current state of a property of an input field by input name and property name.\n\t\t *\n\t\t * @param {string} id - The id of the input field.\n\t\t * @param {string} prop - The property to get.\n\t\t * @return {any} The value of the property.\n\t\t */\n\t\tgetInputStateProp: (id, prop) => {\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.[prop];\n\t\t},\n\t\tonInputChange: withSyncEvent((event) => {\n\t\t\tconst { value, id } = event.target;\n\t\t\tactions.updateInputStateProp(id, 'value', value);\n\t\t\t// Clear error and timer on user input\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputCheckboxClick: withSyncEvent((event) => {\n\t\t\tconst { checked, id } = event.target;\n\t\t\tactions.updateInputStateProp(id, 'checked', checked);\n\t\t\t// Clear error and timer on user input\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputFocus: withSyncEvent((event) => {\n\t\t\tconst { id } = event.target;\n\t\t\t// Clear error and timer on focus\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputBlur: withSyncEvent((event) => {\n\t\t\t// console.log('onInputBlur', event);\n\t\t}),\n\t\tonInputMouseEnter: withSyncEvent((event) => {\n\t\t\t// console.log('onInputMouseEnter', event);\n\t\t}),\n\t\tonInputMouseLeave: withSyncEvent((event) => {\n\t\t\t// console.log('onInputMouseLeave', event);\n\t\t}),\n\t\tcheckForRequiredFieldsWithoutValues: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { fieldsForSubmission } = state;\n\t\t\t// Check if any of the formFieldsToSubmit are required and if they don't have a value, then set the error on their state to be true.\n\t\t\tlet stopProcessing = false;\n\t\t\tfieldsForSubmission.forEach((field) => {\n\t\t\t\tif (\n\t\t\t\t\tfield.required &&\n\t\t\t\t\t(field.type === 'checkbox' || field.type === 'radio'\n\t\t\t\t\t\t? !field.checked\n\t\t\t\t\t\t: !field.value)\n\t\t\t\t) {\n\t\t\t\t\tactions.updateInputStateProp(field.id, 'error', true);\n\t\t\t\t\tstopProcessing = true;\n\t\t\t\t} else {\n\t\t\t\t\tactions.updateInputStateProp(field.id, 'error', false);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcontext.stopProcessing = stopProcessing;\n\t\t},\n\t\t/**\n\t\t * This function runs when a form is submitted.\n\t\t * It will check for required fields that are missing values,\n\t\t * set the submission processing to true,\n\t\t * show the captcha,\n\t\t * and then hand off to the Captcha block to allow the submission to continue.\n\t\t * Below, you'll find the sendSubmission callback that watches for the captchaPassed state change and then continues with the form specific submission logic.\n\t\t */\n\t\tonSubmit: withSyncEvent(async (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst context = getContext();\n\n\t\t\t// First, we do form validation.\n\t\t\tactions.checkForRequiredFieldsWithoutValues();\n\n\t\t\tif (context.stopProcessing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Then, we set the submission processing to null, this is just to signal that the processing is about to begin but it's not started yet.\n\t\t\tcontext.submissionProcessing = null;\n\n\t\t\t// Next, we show the captcha.\n\t\t\tcontext.captchaHidden = false;\n\n\t\t\t// Hand off to the Captcha block for the next submission logic.\n\t\t\t// @see ../form-captcha/view.js\n\t\t}),\n\t\t/**\n\t\t * Resets the form submission process to initial state.\n\t\t * This allows the user to submit the form again.\n\t\t */\n\t\tonReset: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.submissionProcessing = false;\n\t\t\tcontext.captchaHidden = true;\n\t\t\tcontext.submitButtonText = 'Submit';\n\t\t\tcontext.stopProcessing = false;\n\t\t\tcontext.allowSubmit = true;\n\t\t\tcontext.errors = [];\n\t\t\tcontext._isSubmitting = false; // Reset submission flag\n\t\t\tFormPersistence.clearFormData(context.formId);\n\t\t},\n\t\t/**\n\t\t * Dismissing an error message resets the form submission process to initial state.\n\t\t */\n\t\tonErrorClick: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst { actionUrl } = event.target.dataset;\n\t\t\tif (actionUrl) {\n\t\t\t\twindow.location.href = actionUrl;\n\t\t\t}\n\t\t\tactions.onReset();\n\t\t}),\n\t},\n\tcallbacks: {\n\t\tonFormMount: () => {\n\t\t\tconst { ref, attributes } = getElement();\n\t\t\tlet { id } = attributes;\n\t\t\tif (!id) {\n\t\t\t\tid = `prc-block-form-${Math.random().toString(36).substring(2, 15)}`;\n\t\t\t}\n\t\t\tconst formFields = collectFormFields(ref);\n\t\t\tconst context = getContext();\n\t\t\tcontext.formId = id;\n\t\t\tcontext.formFields = formFields;\n\t\t\t// Clear any expired form data from localStorage\n\t\t\tFormPersistence.clearExpiredData();\n\t\t\t// Load saved form data if it exists\n\t\t\tconst savedFormFields = FormPersistence.loadFormData(id);\n\t\t\tif (savedFormFields) {\n\t\t\t\t// go through state.formFields and find the ones that are in savedFormFields and update the state with the saved values\n\t\t\t\tstate.formFields = state.formFields.map((field) => {\n\t\t\t\t\t// If the field id is in savedFormFields then update the value with the saved value\n\t\t\t\t\tconst savedField = savedFormFields.find(\n\t\t\t\t\t\t(savedField) => savedField.id === field.id\n\t\t\t\t\t);\n\t\t\t\t\tif (savedField) {\n\t\t\t\t\t\tfield.value = savedField?.value;\n\t\t\t\t\t\tfield.checked = savedField?.checked;\n\t\t\t\t\t}\n\t\t\t\t\treturn field;\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonCaptchaPassing: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (context.captchaPassed) {\n\t\t\t\tcontext.captchaHidden = true;\n\t\t\t}\n\t\t},\n\t\tonProcessing: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (context.submissionProcessing) {\n\t\t\t\tcontext.submitButtonText = 'Processing...';\n\t\t\t} else {\n\t\t\t\tcontext.submitButtonText = 'Submit';\n\t\t\t}\n\t\t},\n\t\t*sendSubmission() {\n\t\t\tconst context = getContext();\n\t\t\tconst {\n\t\t\t\tcaptchaPassed,\n\t\t\t\tcaptchaToken,\n\t\t\t\tnonceName,\n\t\t\t\tnonceToken,\n\t\t\t\tsubmissionProcessing,\n\t\t\t\tstopProcessing,\n\t\t\t\tsubmitMethod,\n\t\t\t\tformId,\n\t\t\t\tformName,\n\t\t\t\tredirectUrl,\n\t\t\t} = context;\n\n\t\t\t// Enhanced guard conditions to prevent double execution\n\t\t\tif (\n\t\t\t\t!captchaPassed ||\n\t\t\t\tstopProcessing ||\n\t\t\t\tfalse === submissionProcessing ||\n\t\t\t\ttrue === submissionProcessing || // Prevent re-execution if already processing\n\t\t\t\tcontext._isSubmitting // Flag to prevent re-execution\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set flag to prevent re-execution\n\t\t\tcontext._isSubmitting = true;\n\n\t\t\t// Now that we're on to actually submitting the form, we can hide the captcha.\n\t\t\tcontext.captchaHidden = true;\n\n\t\t\tcontext.submissionProcessing = true;\n\n\t\t\tconst { method, action, namespace } = submitMethod;\n\t\t\tconst { fieldsForSubmission } = state;\n\n\t\t\t// Add the nonce to the fieldsForSubmission array as we're ready to submit.\n\t\t\tconst fieldsForSubmissionWithCaptcha = [\n\t\t\t\t...fieldsForSubmission,\n\t\t\t\t{\n\t\t\t\t\tid: 'nonce',\n\t\t\t\t\tname: nonceName,\n\t\t\t\t\ttype: 'nonceToken',\n\t\t\t\t\tvalue: nonceToken,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// console.log(\n\t\t\t// \t'onSubmit',\n\t\t\t// \tcontext,\n\t\t\t// \tstate,\n\t\t\t// \tfieldsForSubmission,\n\t\t\t// \tfieldsForSubmissionWithCaptcha\n\t\t\t// );\n\t\t\tif (method === 'rest') {\n\t\t\t\t// Convert the action from camelCase to hyphenated form.\n\t\t\t\tconst slugifiedAction = action\n\t\t\t\t\t.replace(/([A-Z])/g, '-$1')\n\t\t\t\t\t.toLowerCase();\n\t\t\t\ttry {\n\t\t\t\t\tconst response = yield window.wp.apiFetch({\n\t\t\t\t\t\tpath: `/prc-api/v3/form/${slugifiedAction}?nonce=${nonceToken}`,\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tformName,\n\t\t\t\t\t\t\tformId,\n\t\t\t\t\t\t\tredirectTarget: redirectUrl,\n\t\t\t\t\t\t\tformFields: fieldsForSubmissionWithCaptcha,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst formResponse = new FormResponse(response);\n\t\t\t\t\tif (formResponse.isSuccess) {\n\t\t\t\t\t\tstate.success = true;\n\t\t\t\t\t\tcontext.formMessage =\n\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t'Form submitted successfully.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('onSubmit (REST) error:', error);\n\t\t\t\t\tstate.error = true;\n\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\tmessage: error?.message || 'An error occurred.',\n\t\t\t\t\t\tactionUrl: error?.actionUrl || null,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontext.submissionProcessing = false;\n\t\t\t\tcontext._isSubmitting = false; // Reset flag\n\t\t\t} else if (method === 'api') {\n\t\t\t\tconst _store = yield store(namespace);\n\t\t\t\t// console.log('onSubmit (iAPI)', {\n\t\t\t\t// \tnamespace,\n\t\t\t\t// \taction,\n\t\t\t\t// \tcontext,\n\t\t\t\t// \tstate,\n\t\t\t\t// \t_store,\n\t\t\t\t// });\n\t\t\t\t// Run the requested action and wait for it to complete.\n\t\t\t\tif (!!_store?.actions[action]) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = yield _store.actions[action](\n\t\t\t\t\t\t\tfieldsForSubmissionWithCaptcha\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst formResponse = new FormResponse(result);\n\t\t\t\t\t\t// console.log('onSubmit = ', result, formResponse);\n\t\t\t\t\t\tif (formResponse.isSuccess) {\n\t\t\t\t\t\t\t// Clear the form data from localStorage.\n\t\t\t\t\t\t\tFormPersistence.clearFormData(formId);\n\n\t\t\t\t\t\t\tstate.success = true;\n\n\t\t\t\t\t\t\t// If there's a redirectUrl, then redirect to it.\n\t\t\t\t\t\t\t// Otherwise, show the form message.\n\t\t\t\t\t\t\tif (redirectUrl) {\n\t\t\t\t\t\t\t\twindow.location.href = redirectUrl;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontext.formMessage =\n\t\t\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t\t\t'Form submitted successfully.';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// If the form response has an actionUrl, wait 1 second and then redirect to it.\n\t\t\t\t\t\t\tif (formResponse.actionUrl) {\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\twindow.location.href =\n\t\t\t\t\t\t\t\t\t\tformResponse.actionUrl;\n\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t\t\t'An error occurred.',\n\t\t\t\t\t\t\t\tactionUrl: formResponse?.actionUrl || null,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('onSubmit error', error);\n\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\t\tmessage: error?.message || 'An error occurred.',\n\t\t\t\t\t\t\tactionUrl: error?.actionUrl || null,\n\t\t\t\t\t\t});\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcontext.submissionProcessing = false;\n\t\t\t\t\t\tcontext._isSubmitting = false; // Reset flag\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tFormPersistence.clearFormData(formId);\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","FormResponse","constructor","result","this","actionUrl","message","data","status","isSuccess","isError","isProcessing","FormPersistence","STORAGE_KEY_PREFIX","EXPIRY_HOURS","getStorageKey","formId","saveFormData","formFields","dataToSave","timestamp","Date","now","fields","filter","field","value","includes","type","map","id","name","checked","localStorage","setItem","JSON","stringify","error","console","warn","loadFormData","stored","getItem","parse","clearFormData","removeItem","clearExpiredData","keysToRemove","i","length","startsWith","push","e","forEach","state","actions","store","success","processing","submissionDisabled","getContext","allowSubmit","fieldsForSubmission","context","formFieldsToSubmit","captchaToken","required","inputType","attributes","getElement","find","inputValue","inputName","inputPlaceholder","placeholder","isInputHidden","hidden","isInputDisabled","disabled","isInputReadOnly","readOnly","isInputRequired","isInputChecked","isInputError","isInputSuccess","isInputProcessing","hasErrors","errors","formMessage","updateInputStateProp","formField","onLabelClick","withSyncEvent","event","input","target","nextElementSibling","tagName","focus","getInputStateProp","onInputChange","onInputCheckboxClick","onInputFocus","onInputBlur","onInputMouseEnter","onInputMouseLeave","checkForRequiredFieldsWithoutValues","stopProcessing","onSubmit","async","preventDefault","submissionProcessing","captchaHidden","onReset","submitButtonText","_isSubmitting","onErrorClick","dataset","window","location","href","callbacks","onFormMount","ref","Math","random","toString","substring","inputElements","querySelectorAll","collectFormFields","savedFormFields","savedField","onCaptchaPassing","captchaPassed","onProcessing","sendSubmission","nonceName","nonceToken","submitMethod","formName","redirectUrl","method","action","namespace","fieldsForSubmissionWithCaptcha","slugifiedAction","replace","toLowerCase","response","wp","apiFetch","path","redirectTarget","formResponse","_store","setTimeout"],"sourceRoot":""}