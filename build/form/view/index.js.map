{"version":3,"file":"view/index.js","mappings":"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","sources":["webpack://@prc/block-library/./src/form/view/form-response.ts","webpack://@prc/block-library/./src/form/view/index.js"],"sourcesContent":["export class FormResponse {\n\tactionUrl: string | null;\n\tmessage: string;\n\tdata: any;\n\tstatus: string;\n\n\tconstructor(result: any) {\n\t\tthis.actionUrl = result?.actionUrl;\n\t\tthis.message = result.message;\n\t\tthis.data = result.data;\n\t\tthis.status = result.status;\n\t}\n\n\tget isSuccess() {\n\t\treturn this.status === 'success';\n\t}\n\n\tget isError() {\n\t\treturn this.status === 'error';\n\t}\n\n\tget isProcessing() {\n\t\treturn this.status === 'processing';\n\t}\n}\n","/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nimport { FormResponse } from './form-response';\n\n/**\n * LocalStorage utilities for form persistence\n */\nconst FormPersistence = {\n\tSTORAGE_KEY_PREFIX: 'prc_form_data_',\n\tEXPIRY_HOURS: 24, // Data expires after 24 hours\n\n\t/**\n\t * Generate a storage key for a specific form\n\t */\n\tgetStorageKey(formId) {\n\t\treturn `${this.STORAGE_KEY_PREFIX}${formId}`;\n\t},\n\n\t/**\n\t * Save form data to localStorage\n\t */\n\tsaveFormData(formId, formFields) {\n\t\ttry {\n\t\t\t// Only save fields that have values and aren't sensitive\n\t\t\tconst dataToSave = {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tfields: formFields\n\t\t\t\t\t.filter((field) => {\n\t\t\t\t\t\t// Don't save password fields or hidden fields for security\n\t\t\t\t\t\tconst sensitiveTypes = ['password', 'hidden'];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tfield.value && !sensitiveTypes.includes(field.type)\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.map((field) => ({\n\t\t\t\t\t\tid: field.id,\n\t\t\t\t\t\tname: field.name,\n\t\t\t\t\t\tvalue: field.value,\n\t\t\t\t\t\tchecked: field?.checked || null,\n\t\t\t\t\t})),\n\t\t\t};\n\n\t\t\tlocalStorage.setItem(\n\t\t\t\tthis.getStorageKey(formId),\n\t\t\t\tJSON.stringify(dataToSave)\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to save form data to localStorage:', error);\n\t\t}\n\t},\n\n\t/**\n\t * Load form data from localStorage\n\t */\n\tloadFormData(formId) {\n\t\ttry {\n\t\t\tconst stored = localStorage.getItem(this.getStorageKey(formId));\n\t\t\tif (!stored) return null;\n\n\t\t\tconst data = JSON.parse(stored);\n\n\t\t\t// Check if data has expired\n\t\t\tconst now = Date.now();\n\t\t\tconst expiryTime =\n\t\t\t\tdata.timestamp + this.EXPIRY_HOURS * 60 * 60 * 1000;\n\n\t\t\tif (now > expiryTime) {\n\t\t\t\tthis.clearFormData(formId);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn data.fields;\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to load form data from localStorage:', error);\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Clear form data from localStorage\n\t */\n\tclearFormData(formId) {\n\t\ttry {\n\t\t\tlocalStorage.removeItem(this.getStorageKey(formId));\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to clear form data from localStorage:', error);\n\t\t}\n\t},\n\n\t/**\n\t * Clear all expired form data\n\t */\n\tclearExpiredData() {\n\t\ttry {\n\t\t\tconst now = Date.now();\n\t\t\tconst keysToRemove = [];\n\n\t\t\tfor (let i = 0; i < localStorage.length; i++) {\n\t\t\t\tconst key = localStorage.key(i);\n\t\t\t\tif (key && key.startsWith(this.STORAGE_KEY_PREFIX)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst data = JSON.parse(localStorage.getItem(key));\n\t\t\t\t\t\tconst expiryTime =\n\t\t\t\t\t\t\tdata.timestamp + this.EXPIRY_HOURS * 60 * 60 * 1000;\n\n\t\t\t\t\t\tif (now > expiryTime) {\n\t\t\t\t\t\t\tkeysToRemove.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Invalid data format, remove it\n\t\t\t\t\t\tkeysToRemove.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tkeysToRemove.forEach((key) => localStorage.removeItem(key));\n\t\t} catch (error) {\n\t\t\tconsole.warn('Failed to clear expired form data:', error);\n\t\t}\n\t},\n};\n\nconst collectFormFields = (ref) => {\n\t// find all the input elements in the ref that have a class name that contains at least 'wp-block-prc-block-form-input-*'\n\tconst inputElements = ref.querySelectorAll(\n\t\t'input, select, textarea, .wp-block-prc-block-form-input-password, .wp-block-prc-block-form-input-radio-group'\n\t);\n\t// Find all that have a name attribute and return an array of objects with the name, the value, and the ref\n\tconst formFields = [];\n\tinputElements.forEach((input) => {\n\t\tif (input.type === 'password') {\n\t\t\treturn;\n\t\t}\n\t\tif (input.id) {\n\t\t\tformFields.push(input.id);\n\t\t}\n\t});\n\treturn formFields;\n};\n\nconst { state, actions } = store('prc-block/form', {\n\tstate: {\n\t\tsuccess: false,\n\t\terror: false,\n\t\tprocessing: false,\n\t\tget submissionDisabled() {\n\t\t\tconst context = getContext();\n\t\t\treturn !context.allowSubmit;\n\t\t},\n\t\tget fieldsForSubmission() {\n\t\t\tconst context = getContext();\n\t\t\tconst { formFields } = context;\n\t\t\tconst allFormFields = state.formFields;\n\t\t\t// Find the formFields in allFormFields that are in formFields\n\t\t\tconst formFieldsToSubmit = allFormFields.filter((field) =>\n\t\t\t\tformFields.includes(field.id)\n\t\t\t);\n\t\t\t// Add the captchaToken as a pseudo-field.\n\t\t\tformFieldsToSubmit.push({\n\t\t\t\tid: 'captchaToken',\n\t\t\t\ttype: 'captchaToken',\n\t\t\t\tvalue: context.captchaToken,\n\t\t\t\trequired: false,\n\t\t\t\tname: 'captchaToken',\n\t\t\t});\n\n\t\t\treturn formFieldsToSubmit;\n\t\t},\n\t\tget inputType() {\n\t\t\tconst context = getContext();\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.type;\n\t\t},\n\t\tget inputValue() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.value;\n\t\t},\n\t\tget inputName() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.name;\n\t\t},\n\t\tget inputPlaceholder() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.placeholder;\n\t\t},\n\t\tget isInputHidden() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.hidden;\n\t\t},\n\t\tget isInputDisabled() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.disabled;\n\t\t},\n\t\tget isInputReadOnly() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.readOnly;\n\t\t},\n\t\tget isInputRequired() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.required;\n\t\t},\n\t\tget isInputChecked() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.checked;\n\t\t},\n\t\tget isInputError() {\n\t\t\t// Check if this field has an error state.\n\t\t\tconst { formFields } = state;\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst { id } = attributes;\n\t\t\treturn (\n\t\t\t\tformFields.find((field) => field.id === id)?.error ||\n\t\t\t\tstate.error\n\t\t\t);\n\t\t},\n\t\tget isInputSuccess() {\n\t\t\treturn state.success;\n\t\t},\n\t\tget isInputProcessing() {\n\t\t\treturn state.processing;\n\t\t},\n\t\tget hasErrors() {\n\t\t\tconst context = getContext();\n\t\t\treturn context.errors.length > 0;\n\t\t},\n\t\tget formMessage() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.formMessage || false;\n\t\t},\n\t\tget isPageHidden() {\n\t\t\tconst context = getContext();\n\t\t\tconst { pageId } = context;\n\t\t\tif (!pageId) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn context.activePage !== pageId;\n\t\t},\n\t\tget submitButtonText() {\n\t\t\tconst context = getContext();\n\t\t\tconst { formPages, activePage } = context;\n\n\t\t\t// If currently processing, always show \"Processing...\"\n\t\t\tif (context.submissionProcessing) {\n\t\t\t\treturn 'Processing...';\n\t\t\t}\n\n\t\t\t// If form has pages\n\t\t\tif (formPages) {\n\t\t\t\tconst currentPageIndex = formPages.findIndex(\n\t\t\t\t\t(pageId) => pageId === activePage\n\t\t\t\t);\n\t\t\t\tconst isLastPage = currentPageIndex === formPages.length - 1;\n\t\t\t\treturn isLastPage ? 'Submit' : 'Next';\n\t\t\t} else {\n\t\t\t\t// No pages, simple form\n\t\t\t\treturn 'Submit';\n\t\t\t}\n\t\t}\n\t},\n\tactions: {\n\t\t/**\n\t\t * Update the state of an input field.\n\t\t * You can update properties like value, disabled, readonly, hidden, etc.\n\t\t *\n\t\t * @param {string} name - The name of the input field.\n\t\t * @param {string} prop - The property to update.\n\t\t * @param {any} value - The value to update the property to.\n\t\t */\n\t\tupdateInputStateProp: (id, prop, value) => {\n\t\t\tconst { formFields } = state;\n\t\t\tconst formField = formFields.find((field) => field.id === id);\n\t\t\tif (formField) {\n\t\t\t\tformField[prop] = value;\n\t\t\t}\n\t\t\tconst { formId } = getContext();\n\t\t\tstate.formFields = formFields;\n\t\t\tFormPersistence.saveFormData(formId, formFields);\n\t\t},\n\t\tonLabelClick: withSyncEvent((event) => {\n\t\t\t// Find the adjacent input element and focus it.\n\t\t\tconst input = event.target.nextElementSibling;\n\t\t\tif (\n\t\t\t\tinput &&\n\t\t\t\t['INPUT', 'SELECT', 'TEXTAREA'].includes(input.tagName)\n\t\t\t) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Get the current state of a property of an input field by input name and property name.\n\t\t *\n\t\t * @param {string} id - The id of the input field.\n\t\t * @param {string} prop - The property to get.\n\t\t * @return {any} The value of the property.\n\t\t */\n\t\tgetInputStateProp: (id, prop) => {\n\t\t\tconst { formFields } = state;\n\t\t\treturn formFields.find((field) => field.id === id)?.[prop];\n\t\t},\n\t\tonInputChange: withSyncEvent((event) => {\n\t\t\tconst { value, id } = event.target;\n\t\t\tactions.updateInputStateProp(id, 'value', value);\n\t\t\t// Clear error and timer on user input\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputCheckboxClick: withSyncEvent((event) => {\n\t\t\tconst { checked, id } = event.target;\n\t\t\tactions.updateInputStateProp(id, 'checked', checked);\n\t\t\t// Clear error and timer on user input\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputFocus: withSyncEvent((event) => {\n\t\t\tconst { id } = event.target;\n\t\t\t// Clear error and timer on focus\n\t\t\tactions.updateInputStateProp(id, 'error', false);\n\t\t}),\n\t\tonInputBlur: withSyncEvent((event) => {}),\n\t\tonInputMouseEnter: withSyncEvent((event) => {}),\n\t\tonInputMouseLeave: withSyncEvent((event) => {}),\n\t\tcheckForRequiredFieldsWithoutValues: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { fieldsForSubmission } = state;\n\t\t\t// Check if any of the formFieldsToSubmit are required and if they don't have a value, then set the error on their state to be true.\n\t\t\tlet stopProcessing = false;\n\t\t\tfieldsForSubmission.forEach((field) => {\n\t\t\t\tif (\n\t\t\t\t\tfield.required &&\n\t\t\t\t\t(field.type === 'checkbox' || field.type === 'radio'\n\t\t\t\t\t\t? !field.checked\n\t\t\t\t\t\t: !field.value)\n\t\t\t\t) {\n\t\t\t\t\tactions.updateInputStateProp(field.id, 'error', true);\n\t\t\t\t\tstopProcessing = true;\n\t\t\t\t} else {\n\t\t\t\t\tactions.updateInputStateProp(field.id, 'error', false);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcontext.stopProcessing = stopProcessing;\n\t\t},\n\t\t/**\n\t\t * This function runs when a form is submitted.\n\t\t * It will check for required fields that are missing values,\n\t\t * set the submission processing to true,\n\t\t * show the captcha,\n\t\t * and then hand off to the Captcha block to allow the submission to continue.\n\t\t * Below, you'll find the sendSubmission callback that watches for the captchaPassed state change and then continues with the form specific submission logic.\n\t\t */\n\t\tonSubmit: withSyncEvent(async (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst context = getContext();\n\t\t\tconst { formPages, activePage } = context;\n\t\t\tif (formPages && formPages.length > 0) {\n\t\t\t\t// If there are form pages, then we need to check if we're on the last page.\n\t\t\t\tconst currentPageIndex = formPages.findIndex(\n\t\t\t\t\t(pageId) => pageId === activePage\n\t\t\t\t);\n\t\t\t\tif (currentPageIndex < formPages.length - 1) {\n\t\t\t\t\t// Not on the last page, so go to the next page.\n\t\t\t\t\tcontext.activePage = formPages[currentPageIndex + 1];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// If we're here, then we're on the last page and can continue with submission.\n\n\t\t\t}\n\n\t\t\tif (context.submissionProcessing) {\n\t\t\t\t// Prevent double submission\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// First, we do form validation.\n\t\t\tactions.checkForRequiredFieldsWithoutValues();\n\n\t\t\tif (context.stopProcessing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Then, we set the submission processing to null, this is just to signal that the processing is about to begin but it's not started yet.\n\t\t\tcontext.submissionProcessing = null;\n\n\t\t\t// Next, we show the captcha.\n\t\t\tcontext.captchaHidden = false;\n\n\t\t\t// Hand off to the Captcha block for the next submission logic.\n\t\t\t// @see ../form-captcha/view.js\n\t\t}),\n\t\t/**\n\t\t * Resets the form submission process to initial state.\n\t\t * This allows the user to submit the form again.\n\t\t */\n\t\tonReset: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.submissionProcessing = false;\n\t\t\tcontext.captchaHidden = true;\n\t\t\tcontext.submitButtonText = 'Submit';\n\t\t\tcontext.stopProcessing = false;\n\t\t\tcontext.allowSubmit = true;\n\t\t\tcontext.errors = [];\n\t\t\tcontext._isSubmitting = false; // Reset submission flag\n\t\t\tFormPersistence.clearFormData(context.formId);\n\t\t},\n\t\t/**\n\t\t * Dismissing an error message resets the form submission process to initial state.\n\t\t */\n\t\tonErrorClick: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst { actionUrl } = event.target.dataset;\n\t\t\tif (actionUrl) {\n\t\t\t\twindow.location.href = actionUrl;\n\t\t\t}\n\t\t\tactions.onReset();\n\t\t}),\n\t},\n\tcallbacks: {\n\t\tonFormMount: () => {\n\t\t\tconst { ref, attributes } = getElement();\n\t\t\tlet { id } = attributes;\n\t\t\tif (!id) {\n\t\t\t\tid = `prc-block-form-${Math.random().toString(36).substring(2, 15)}`;\n\t\t\t}\n\t\t\tconst formFields = collectFormFields(ref);\n\t\t\tconst context = getContext();\n\t\t\tcontext.formId = id;\n\t\t\tcontext.formFields = formFields;\n\t\t\t// Clear any expired form data from localStorage\n\t\t\tFormPersistence.clearExpiredData();\n\t\t\t// Load saved form data if it exists\n\t\t\tconst savedFormFields = FormPersistence.loadFormData(id);\n\t\t\tif (savedFormFields) {\n\t\t\t\t// go through state.formFields and find the ones that are in savedFormFields and update the state with the saved values\n\t\t\t\tstate.formFields = state.formFields.map((field) => {\n\t\t\t\t\t// If the field id is in savedFormFields then update the value with the saved value\n\t\t\t\t\tconst savedField = savedFormFields.find(\n\t\t\t\t\t\t(savedField) => savedField.id === field.id\n\t\t\t\t\t);\n\t\t\t\t\tif (savedField) {\n\t\t\t\t\t\tfield.value = savedField?.value;\n\t\t\t\t\t\tfield.checked = savedField?.checked;\n\t\t\t\t\t}\n\t\t\t\t\treturn field;\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t},\n\t\tonCaptchaPassing: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (context.captchaPassed) {\n\t\t\t\tcontext.captchaHidden = true;\n\t\t\t}\n\t\t},\n\t\t// onProcessing: () => {\n\t\t// \tconst context = getContext();\n\t\t// \tconst { formPages, activePage } = context;\n\n\t\t// \t// If currently processing, always show \"Processing...\"\n\t\t// \tif (context.submissionProcessing) {\n\t\t// \t\tcontext.submitButtonText = 'Processing...';\n\t\t// \t\treturn;\n\t\t// \t}\n\n\t\t// \t// If form has pages\n\t\t// \tconsole.log('formPages', formPages);\n\t\t// \tif (formPages) {\n\t\t// \t\tconst currentPageIndex = formPages.findIndex(\n\t\t// \t\t\t(pageId) => pageId === activePage\n\t\t// \t\t);\n\t\t// \t\tconst isLastPage = currentPageIndex === formPages.length - 1;\n\t\t// \t\tcontext.submitButtonText = isLastPage ? 'Submit' : 'Next';\n\t\t// \t} else {\n\t\t// \t\t// No pages, simple form\n\t\t// \t\tcontext.submitButtonText = 'Submit';\n\t\t// \t}\n\t\t// },\n\t\t*sendSubmission() {\n\t\t\tconst context = getContext();\n\t\t\tconst {\n\t\t\t\tcaptchaPassed,\n\t\t\t\tcaptchaToken,\n\t\t\t\tnonceName,\n\t\t\t\tnonceToken,\n\t\t\t\tsubmissionProcessing,\n\t\t\t\tstopProcessing,\n\t\t\t\tsubmitMethod,\n\t\t\t\tformId,\n\t\t\t\tformName,\n\t\t\t\tredirectUrl,\n\t\t\t} = context;\n\n\t\t\t// Enhanced guard conditions to prevent double execution\n\t\t\tif (\n\t\t\t\t!captchaPassed ||\n\t\t\t\tstopProcessing ||\n\t\t\t\tfalse === submissionProcessing ||\n\t\t\t\ttrue === submissionProcessing || // Prevent re-execution if already processing\n\t\t\t\tcontext._isSubmitting // Flag to prevent re-execution\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set flag to prevent re-execution\n\t\t\tcontext._isSubmitting = true;\n\n\t\t\t// Now that we're on to actually submitting the form, we can hide the captcha.\n\t\t\tcontext.captchaHidden = true;\n\n\t\t\tcontext.submissionProcessing = true;\n\n\t\t\tconst { method, action, namespace } = submitMethod;\n\t\t\tconst { fieldsForSubmission } = state;\n\n\t\t\t// Add the nonce to the fieldsForSubmission array as we're ready to submit.\n\t\t\tconst fieldsForSubmissionWithCaptcha = [\n\t\t\t\t...fieldsForSubmission,\n\t\t\t\t{\n\t\t\t\t\tid: 'nonce',\n\t\t\t\t\tname: nonceName,\n\t\t\t\t\ttype: 'nonceToken',\n\t\t\t\t\tvalue: nonceToken,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tif (method === 'rest') {\n\t\t\t\t// Convert the action from camelCase to hyphenated form.\n\t\t\t\tconst slugifiedAction = action\n\t\t\t\t\t.replace(/([A-Z])/g, '-$1')\n\t\t\t\t\t.toLowerCase();\n\t\t\t\ttry {\n\t\t\t\t\tconst response = yield window.wp.apiFetch({\n\t\t\t\t\t\tpath: `/prc-api/v3/form/${slugifiedAction}?nonce=${nonceToken}`,\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tformName,\n\t\t\t\t\t\t\tformId,\n\t\t\t\t\t\t\tredirectTarget: redirectUrl,\n\t\t\t\t\t\t\tformFields: fieldsForSubmissionWithCaptcha,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst formResponse = new FormResponse(response);\n\t\t\t\t\tif (formResponse.isSuccess) {\n\t\t\t\t\t\tstate.success = true;\n\t\t\t\t\t\tcontext.formMessage =\n\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t'Form submitted successfully.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('onSubmit (REST) error:', error);\n\t\t\t\t\tstate.error = true;\n\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\tmessage: error?.message || 'An error occurred.',\n\t\t\t\t\t\tactionUrl: error?.actionUrl || null,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontext.submissionProcessing = false;\n\t\t\t\tcontext._isSubmitting = false; // Reset flag\n\t\t\t} else if (method === 'api') {\n\t\t\t\tconst _store = yield store(namespace);\n\t\t\t\t// Run the requested action and wait for it to complete.\n\t\t\t\tif (!!_store?.actions[action]) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = yield _store.actions[action](\n\t\t\t\t\t\t\tfieldsForSubmissionWithCaptcha\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst formResponse = new FormResponse(result);\n\t\t\t\t\t\tif (formResponse.isSuccess) {\n\t\t\t\t\t\t\t// Clear the form data from localStorage.\n\t\t\t\t\t\t\tFormPersistence.clearFormData(formId);\n\n\t\t\t\t\t\t\tstate.success = true;\n\n\t\t\t\t\t\t\t// If there's a redirectUrl, then redirect to it.\n\t\t\t\t\t\t\t// Otherwise, show the form message.\n\t\t\t\t\t\t\tif (redirectUrl) {\n\t\t\t\t\t\t\t\twindow.location.href = redirectUrl;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontext.formMessage =\n\t\t\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t\t\t'Form submitted successfully.';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// If the form response has an actionUrl, wait 1 second and then redirect to it.\n\t\t\t\t\t\t\tif (formResponse.actionUrl) {\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\twindow.location.href =\n\t\t\t\t\t\t\t\t\t\tformResponse.actionUrl;\n\t\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\tformResponse?.message ||\n\t\t\t\t\t\t\t\t\t'An error occurred.',\n\t\t\t\t\t\t\t\tactionUrl: formResponse?.actionUrl || null,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('onSubmit error', error);\n\t\t\t\t\t\tstate.error = true;\n\t\t\t\t\t\tcontext.errors.push({\n\t\t\t\t\t\t\tid: `error-${Math.random().toString(36).substring(2, 15)}`,\n\t\t\t\t\t\t\tmessage: error?.message || 'An error occurred.',\n\t\t\t\t\t\t\tactionUrl: error?.actionUrl || null,\n\t\t\t\t\t\t});\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcontext.submissionProcessing = false;\n\t\t\t\t\t\tcontext._isSubmitting = false; // Reset flag\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tFormPersistence.clearFormData(formId);\n\t\t},\n\t},\n});\n"],"names":["FormResponse","constructor","result","this","actionUrl","message","data","status","isSuccess","isError","isProcessing","FormPersistence","STORAGE_KEY_PREFIX","EXPIRY_HOURS","getStorageKey","formId","saveFormData","formFields","dataToSave","timestamp","Date","now","fields","filter","field","value","includes","type","map","id","name","checked","localStorage","setItem","JSON","stringify","error","console","warn","loadFormData","stored","getItem","parse","clearFormData","removeItem","clearExpiredData","keysToRemove","i","length","key","startsWith","push","e","forEach","state","actions","store","success","processing","submissionDisabled","getContext","allowSubmit","fieldsForSubmission","context","formFieldsToSubmit","captchaToken","required","inputType","attributes","getElement","find","inputValue","inputName","inputPlaceholder","placeholder","isInputHidden","hidden","isInputDisabled","disabled","isInputReadOnly","readOnly","isInputRequired","isInputChecked","isInputError","isInputSuccess","isInputProcessing","hasErrors","errors","formMessage","isPageHidden","pageId","activePage","submitButtonText","formPages","submissionProcessing","findIndex","updateInputStateProp","prop","formField","onLabelClick","withSyncEvent","event","input","target","nextElementSibling","tagName","focus","getInputStateProp","onInputChange","onInputCheckboxClick","onInputFocus","onInputBlur","onInputMouseEnter","onInputMouseLeave","checkForRequiredFieldsWithoutValues","stopProcessing","onSubmit","async","preventDefault","currentPageIndex","captchaHidden","onReset","_isSubmitting","onErrorClick","dataset","window","location","href","callbacks","onFormMount","ref","Math","random","toString","substring","inputElements","querySelectorAll","collectFormFields","savedFormFields","savedField","onCaptchaPassing","captchaPassed","sendSubmission","nonceName","nonceToken","submitMethod","formName","redirectUrl","method","action","namespace","fieldsForSubmissionWithCaptcha","slugifiedAction","replace","toLowerCase","response","wp","apiFetch","path","redirectTarget","formResponse","_store","setTimeout"],"sourceRoot":""}