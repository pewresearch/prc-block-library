{"version":3,"file":"core-dialog/view.js","mappings":"iEAMA,MAAM,oBAAEA,GAAwBC,QAqC1B,MAAEC,EAAK,QAAEC,GAAYC,EAAM,mBAAoB,CACpDF,MAAO,CACNG,cAAe,GACfC,oBAAoB,EACpBC,iBAAiB,GAElBJ,QAAS,CAIRK,aAAcA,KACb,MAAM,OAAEC,GAAWP,EACnB,IAAKO,EACJ,OAED,MAAM,IAAEC,GAAQC,IACVC,EAAiBR,EAAM,uBACvBS,EAAoBH,EAAII,iBAC7B,iCAEGD,EAAkBE,QACrBF,EAAkBG,QAASC,IAC1B,MAAMC,EAAcD,EAAQE,aAAa,OACnC,cAAEC,GAAkBH,EACpBI,EACL,OAASD,GAAeD,aAAa,UAClCD,IAAgBG,IACnBT,EAAeV,MAAMgB,GAAaI,SAAU,MAShDC,KAAOC,IAGDA,IAIDtB,EAAMuB,QAAQD,GAAIE,eAAiBxB,EAAMI,oBAC5CJ,EAAMuB,QAAQD,GAAIE,cAAcC,SAASJ,OAGtCrB,EAAMuB,QAAQD,GAAII,eAAiB1B,EAAMK,iBAC5CL,EAAMuB,QAAQD,GAAII,cAAcC,cAOlCC,MAAQN,IAEFA,IAIDtB,EAAMuB,QAAQD,GAAIE,eAAiBxB,EAAMI,oBAC5CJ,EAAMuB,QAAQD,GAAIE,cAAcC,SAASG,QAGtC5B,EAAMuB,QAAQD,GAAII,eAAiB1B,EAAMK,iBAC5CL,EAAMuB,QAAQD,GAAII,cAAcG,eAOlCC,MAAQR,IAEFA,IAIDtB,EAAMuB,QAAQD,GAAIE,eAAiBxB,EAAMI,oBAC5CJ,EAAMuB,QAAQD,GAAIE,cAAcC,SAASM,KAAK,GAG3C/B,EAAMuB,QAAQD,GAAII,eAAiB1B,EAAMK,iBAC5CL,EAAMuB,QAAQD,GAAII,cAAcM,OAAO,KAMzCC,kBAAmBC,UAIlB,IAAKpC,EACJ,OAED,MAAM,GAAEwB,GAAOtB,EACf,IAAKsB,EACJ,OAED,MAAM,IAAEd,GAAQC,IACV0B,EAAgB3B,EAAI4B,cACzB,8BAED,IAAKD,EACJ,OAED,MAAME,EAASF,EAAcC,cAAc,UAC3C,IAAKC,EACJ,OAGD,IAAIC,EAAW,KAQf,MAAMC,EAAqBzC,EAAoBuC,EAAQ,KAEtDE,EAAmBC,UAAUC,IAAI,CAAEC,aAAa,IAEhDH,EAAmBI,KAAKC,cAAeV,UAEtCI,QAAiBC,EAAmBI,KAAKL,eAK3CtC,EAAMuB,QAAQD,GAAIE,cAAgBe,EAGlCvC,EAAMI,oBAAqB,EAW3BmC,EAAmBM,OAAOC,sBACvBC,KACqBA,EAAkBT,EAAa,KAAMU,QAAQ,IAEhD,KAAQhD,EAAMG,cAAc8C,SAAU3B,KACxDtB,EAAMG,cAAgB,IAAKH,EAAMG,cAAemB,OASpD4B,eAAgBhB,UACf,MAAM,GAAEZ,GAAOtB,EACf,IAAKsB,EACJ,OAGD,MAAM,IAAEd,GAAQC,IAGV0C,EAAgB3C,EAAI4B,cAAc,+DACxC,GAAKe,EAKL,IACC,MAAMC,QA7MF,IAAIC,QAAQ,CAACC,EAASC,KAE5B,GAAIxD,OAAOqD,IAAMrD,OAAOqD,GAAGI,OAE1B,YADAF,EAAQvD,OAAOqD,IAKhBrD,OAAO0D,wBAA0B,KAChCH,EAAQvD,OAAOqD,KAGhB,MAAMM,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAM,qCACbH,EAAOI,OAAS,OAGhBJ,EAAOK,QAAWC,IACjBT,EAAOS,IAERL,SAASM,KAAKC,YAAYR,KA4LlBG,EAAMV,EAAcU,IACpBM,EAAS,IAAIC,IAAIP,GAGlBM,EAAOE,OAAOpB,SAAS,mBAC3BkB,EAAOG,aAAa7B,IAAI,cAAe,KACvCU,EAAcU,IAAMM,EAAOI,YAI5B,MAAM7C,EAAgB,IAAI0B,EAAGI,OAAOL,EAAe,CAClDqB,OAAQ,CACP,QAAYC,IACXzE,EAAMK,iBAAkB,GAEzB,cAAkBoE,IACjB,MAAMC,EAAUD,EAAME,KAElBD,IAAYtB,EAAGwB,YAAYC,QACzB7E,EAAMG,cAAc8C,SAAS3B,KACjCtB,EAAMG,cAAgB,IAAIH,EAAMG,cAAemB,KAK7CoD,IAAYtB,EAAGwB,YAAYE,UAE1B9E,EAAMuB,QAAQD,GAAIyD,yBACrBC,cAAchF,EAAMuB,QAAQD,GAAIyD,yBAGjC/E,EAAMuB,QAAQD,GAAIyD,wBAA0BE,YAAY,KACvD,MAAMC,EAASlF,EAAMuB,QAAQD,GAAII,cACjC,GAAIwD,GAA2C,mBAA1BA,EAAOC,eAA+B,CAC1D,MAEMC,GAFcF,EAAOC,iBACVD,EAAOG,cACuB,KAAKrC,QAAQ,GAGxDoC,GAAc,KAAOpF,EAAMG,cAAc8C,SAAS3B,KACrDgE,QAAQC,IAAI,oCAAqCjE,EAAI8D,EAAYpF,EAAMuB,QAAQD,IAC/EtB,EAAMG,cAAgB,IAAIH,EAAMG,cAAemB,GAE/C0D,cAAchF,EAAMuB,QAAQD,GAAIyD,yBAChC/E,EAAMuB,QAAQD,GAAIyD,wBAA0B,KAE9C,GACE,MAIAL,IAAYtB,EAAGwB,YAAYY,QAAUd,IAAYtB,EAAGwB,YAAYC,OAC/D7E,EAAMuB,QAAQD,GAAIyD,0BACrBC,cAAchF,EAAMuB,QAAQD,GAAIyD,yBAChC/E,EAAMuB,QAAQD,GAAIyD,wBAA0B,UAQjD/E,EAAMuB,QAAQD,GAAII,cAAgBA,CACnC,CAAE,MAAOsC,GACRsB,QAAQtB,MAAM,6BAA8BA,EAC7C,IAGFyB,UAAW,CACVC,iBAAkBA,KACjB,MAAM,GAAEpE,EAAE,OAAEf,GAAWP,EAElBsB,GAGAf,GACJN,EAAQoB,KAAKC,IAGfqE,iBAAkBzD,UACjB,MAAM,GAAEZ,EAAE,OAAEf,GAAWP,EACvB,IAAKsB,EACJ,OAGD,MAAMsE,OAAiBC,IAAc7F,EAAMuB,QAAQD,GAAIE,oBAAiBqE,IAAc7F,EAAMuB,QAAQD,GAAII,eACjGnB,GAAUqF,IAEhB3F,EAAQ2B,MAAMN,GACTtB,EAAMG,cAAc8C,SAAU3B,KAElCrB,EAAQ6B,MAAMR,IAQjBwE,YAAa5D,UAEZjC,EAAQgC,oBAERhC,EAAQiD","sources":["webpack://@prc/block-library/./src/core-dialog/view.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\n\nimport { store, getContext, getElement, withSyncEvent, withScope } from '@wordpress/interactivity';\n\nconst { VideoPressIframeApi } = window;\n\n/**\n * Load the YouTube iframe API script dynamically.\n *\n * @returns {Promise} A promise that resolves when the script has loaded.\n */\nconst loadYouTubeIframeAPI = () => {\n\treturn new Promise((resolve, reject) => {\n\t\t// Check if the API is already loaded\n\t\tif (window.YT && window.YT.Player) {\n\t\t\tresolve(window.YT);\n\t\t\treturn;\n\t\t}\n\n\t\t// Create a global callback for when the API loads\n\t\twindow.onYouTubeIframeAPIReady = () => {\n\t\t\tresolve(window.YT);\n\t\t};\n\n\t\tconst script = document.createElement('script');\n\t\tscript.src = 'https://www.youtube.com/iframe_api';\n\t\tscript.onload = () => {\n\t\t\t// The onYouTubeIframeAPIReady callback will be called by the API itself\n\t\t};\n\t\tscript.onerror = (error) => {\n\t\t\treject(error);\n\t\t};\n\t\tdocument.head.appendChild(script);\n\t});\n};\n\n/**\n * Add VideoPress and YouTube support to prc-block/dialog.\n * VideoPress API Docs: https://github.com/Automattic/videopress-player-api-doc/blob/trunk/public-js-api.md\n * YouTube IFrame API: https://developers.google.com/youtube/iframe_api_reference\n */\nconst { state, actions } = store('prc-block/dialog', {\n\tstate: {\n\t\twatchedVideos: [],\n\t\tvideoPressAPIReady: false,\n\t\tyouTubeAPIReady: false,\n\t},\n\tactions: {\n\t\t/**\n\t\t * Checks the element for any available animations and dispatches them with the animations store.\n\t\t */\n\t\trunAnimation: () => {\n\t\t\tconst { isOpen } = state;\n\t\t\tif (!isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { ref } = getElement();\n\t\t\tconst animationStore = store('prc-block/animation');\n\t\t\tconst animationElements = ref.querySelectorAll(\n\t\t\t\t'.wp-block-prc-block-animation'\n\t\t\t);\n\t\t\tif (animationElements.length) {\n\t\t\t\tanimationElements.forEach((element) => {\n\t\t\t\t\tconst animationId = element.getAttribute('id');\n\t\t\t\t\tconst { parentElement } = element;\n\t\t\t\t\tconst isHidden =\n\t\t\t\t\t\tnull !== parentElement?.getAttribute('hidden');\n\t\t\t\t\tif (animationId && !isHidden) {\n\t\t\t\t\t\tanimationStore.state[animationId].enabled = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Plays the video in the dialog if a VideoPress or YouTube block is present.\n\t\t * @param id The dialog block id.\n\t\t */\n\t\tplay: (id) => {\n\t\t\t// These are direct id state calls instead of derived state because when calling play directly we want to be explicit about which video dialog we're targeting.\n\t\t\t// Sanity Checks:\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Play VideoPress video if available\n\t\t\tif (state.dialogs[id].videoPressAPI && state.videoPressAPIReady) {\n\t\t\t\tstate.dialogs[id].videoPressAPI.controls.play();\n\t\t\t}\n\t\t\t// Play YouTube video if available\n\t\t\tif (state.dialogs[id].youTubePlayer && state.youTubeAPIReady) {\n\t\t\t\tstate.dialogs[id].youTubePlayer.playVideo();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Pauses the video in the dialog if a VideoPress or YouTube block is present.\n\t\t * @param id The dialog block id.\n\t\t */\n\t\tpause: (id) => {\n\t\t\t// Sanity Checks:\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Pause VideoPress video if available\n\t\t\tif (state.dialogs[id].videoPressAPI && state.videoPressAPIReady) {\n\t\t\t\tstate.dialogs[id].videoPressAPI.controls.pause();\n\t\t\t}\n\t\t\t// Pause YouTube video if available\n\t\t\tif (state.dialogs[id].youTubePlayer && state.youTubeAPIReady) {\n\t\t\t\tstate.dialogs[id].youTubePlayer.pauseVideo();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Resets the video in the dialog to the beginning if a VideoPress or YouTube block is present.\n\t\t * @param id The dialog block id.\n\t\t */\n\t\treset: (id) => {\n\t\t\t// Sanity Checks:\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Reset VideoPress video if available\n\t\t\tif (state.dialogs[id].videoPressAPI && state.videoPressAPIReady) {\n\t\t\t\tstate.dialogs[id].videoPressAPI.controls.seek(0);\n\t\t\t}\n\t\t\t// Reset YouTube video if available\n\t\t\tif (state.dialogs[id].youTubePlayer && state.youTubeAPIReady) {\n\t\t\t\tstate.dialogs[id].youTubePlayer.seekTo(0);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * When the element initializes, hoist the VideoPress API if a VideoPress block is present in the dialog content into global state.\n\t\t */\n\t\tinitVideoPressAPI: async () => {\n\t\t\t// Because the VideoPress block is on the page the VideoPressIframeApi should be available,\n\t\t\t// access it from window global, we import this (if available) at the top of the file.\n\t\t\t// If(when) a VideoPress JS module becomes available, we'll use that.\n\t\t\tif (!VideoPressIframeApi) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id } = state;\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { ref } = getElement();\n\t\t\tconst hasVideoPress = ref.querySelector(\n\t\t\t\t'.jetpack-videopress-player'\n\t\t\t);\n\t\t\tif (!hasVideoPress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst iframe = hasVideoPress.querySelector('iframe');\n\t\t\tif (!iframe) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet duration = null;\n\n\t\t\t/**\n\t\t\t * Set up the VideoPress API object.\n\t\t\t * Turn off shareButton's by default.\n\t\t\t * Set up a listener to get the initial duration once loaded.\n\t\t\t * Hoist the VideoPress API instance into state for later use.\n\t\t\t */\n\t\t\tconst VideoPressInstance = VideoPressIframeApi(iframe, () => {\n\t\t\t\t// Disable the share button by default.\n\t\t\t\tVideoPressInstance.customize.set({ shareButton: false });\n\t\t\t\t// Set up a listener to get the initial duration once loaded.\n\t\t\t\tVideoPressInstance.info.onInfoUpdated( async () => {\n\t\t\t\t\t// Get the duration and store it in state for later use.\n\t\t\t\t\tduration = await VideoPressInstance.info.duration();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Hoist the VideoPress API instance into state for later use.\n\t\t\tstate.dialogs[id].videoPressAPI = VideoPressInstance;\n\n\t\t\t// Mark that the VideoPress API is ready.\n\t\t\tstate.videoPressAPIReady = true;\n\n\t\t\t/**\n\t\t\t * Set up an event listener to track playback duration time updates.\n\t\t\t *\n\t\t\t * Note: This event fires very frequently, so be cautious about what you do in this callback.\n\t\t\t *\n\t\t\t * Note: This is the total user playback duration, not the position in the video.\n\t\t\t * For example, if a user watches the first 10 seconds of a 60 second video,\n\t\t\t * then rewinds and watches the first 10 seconds again, this value will be 20 seconds.\n\t\t\t */\n\t\t\tVideoPressInstance.status.onPlaybackTimeUpdated(\n\t\t\t\t( newPlaybackTime ) => {\n\t\t\t\t\tconst percentage = (( newPlaybackTime / duration ) * 100 ).toFixed(2);\n\t\t\t\t\t// If the user has watched more cumulatively more than 70 percent of the video duration, log that they've watched it.\n\t\t\t\t\tif ( percentage >= 70 && ! state.watchedVideos.includes( id ) ) {\n\t\t\t\t\t\tstate.watchedVideos = [ ...state.watchedVideos, id ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * When the element initializes, hoist the YouTube API if a YouTube iframe is present in the dialog content into global state.\n\t\t */\n\t\tinitYouTubeAPI: async () => {\n\t\t\tconst { id } = state;\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { ref } = getElement();\n\t\t\t// Check for YouTube iframes\n\t\t\t// YouTube embeds typically have src containing \"youtube.com/embed/\" or \"youtu.be/\"\n\t\t\tconst youtubeIframe = ref.querySelector('iframe[src*=\"youtube.com/embed/\"], iframe[src*=\"youtu.be/\"]');\n\t\t\tif (!youtubeIframe) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Load the YouTube API if needed\n\t\t\ttry {\n\t\t\t\tconst YT = await loadYouTubeIframeAPI();\n\n\t\t\t\t// Extract the video ID from the iframe src\n\t\t\t\tconst src = youtubeIframe.src;\n\t\t\t\tconst srcUrl = new URL(src);\n\n\t\t\t\t// Add API support to the iframe if not already present\n\t\t\t\tif (!srcUrl.search.includes('enablejsapi=1')) {\n\t\t\t\t\tsrcUrl.searchParams.set('enablejsapi', '1');\n\t\t\t\t\tyoutubeIframe.src = srcUrl.toString();\n\t\t\t\t}\n\n\t\t\t\t// Initialize the YouTube player with the iframe\n\t\t\t\tconst youTubePlayer = new YT.Player(youtubeIframe, {\n\t\t\t\t\tevents: {\n\t\t\t\t\t\t'onReady': (event) => {\n\t\t\t\t\t\t\tstate.youTubeAPIReady = true;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'onStateChange': (event) => {\n\t\t\t\t\t\t\tconst eventId = event.data;\n\t\t\t\t\t\t\t// Track video completion (state 0 = ended)\n\t\t\t\t\t\t\tif (eventId === YT.PlayerState.ENDED) {\n\t\t\t\t\t\t\t\tif (!state.watchedVideos.includes(id)) {\n\t\t\t\t\t\t\t\t\tstate.watchedVideos = [...state.watchedVideos, id];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Track video watching progress\n\t\t\t\t\t\t\tif (eventId === YT.PlayerState.PLAYING) {\n\t\t\t\t\t\t\t\t// Set up an interval to check progress\n\t\t\t\t\t\t\t\tif (state.dialogs[id].youTubeProgressInterval) {\n\t\t\t\t\t\t\t\t\tclearInterval(state.dialogs[id].youTubeProgressInterval);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tstate.dialogs[id].youTubeProgressInterval = setInterval(() => {\n\t\t\t\t\t\t\t\t\tconst player = state.dialogs[id].youTubePlayer;\n\t\t\t\t\t\t\t\t\tif (player && typeof player.getCurrentTime === 'function') {\n\t\t\t\t\t\t\t\t\t\tconst currentTime = player.getCurrentTime();\n\t\t\t\t\t\t\t\t\t\tconst duration = player.getDuration();\n\t\t\t\t\t\t\t\t\t\tconst percentage = ((currentTime / duration) * 100).toFixed(2);\n\n\t\t\t\t\t\t\t\t\t\t// If the user has watched more than 70 percent of the video duration, log that they've watched it\n\t\t\t\t\t\t\t\t\t\tif (percentage >= 70 && !state.watchedVideos.includes(id)) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Marking YouTube video as watched:\", id, percentage, state.dialogs[id]);\n\t\t\t\t\t\t\t\t\t\t\tstate.watchedVideos = [...state.watchedVideos, id];\n\t\t\t\t\t\t\t\t\t\t\t// Clear the interval once we've marked as watched\n\t\t\t\t\t\t\t\t\t\t\tclearInterval(state.dialogs[id].youTubeProgressInterval);\n\t\t\t\t\t\t\t\t\t\t\tstate.dialogs[id].youTubeProgressInterval = null;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, 2000); // Check every 2 seconds\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Clear interval when paused or ended\n\t\t\t\t\t\t\tif (eventId === YT.PlayerState.PAUSED || eventId === YT.PlayerState.ENDED) {\n\t\t\t\t\t\t\t\tif (state.dialogs[id].youTubeProgressInterval) {\n\t\t\t\t\t\t\t\t\tclearInterval(state.dialogs[id].youTubeProgressInterval);\n\t\t\t\t\t\t\t\t\tstate.dialogs[id].youTubeProgressInterval = null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Store the YouTube player instance in state\n\t\t\t\tstate.dialogs[id].youTubePlayer = youTubePlayer;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error loading YouTube API:', error);\n\t\t\t}\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonOpenStartVideo: () => {\n\t\t\tconst { id, isOpen } = state;\n\t\t\t// Sanity Checks:\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( isOpen ) {\n\t\t\t\tactions.play(id);\n\t\t\t}\n\t\t},\n\t\tonCloseStopVideo: async () => {\n\t\t\tconst { id, isOpen } = state;\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Check if there's a video player (VideoPress or YouTube)\n\t\t\tconst hasVideoPlayer = undefined !== state.dialogs[id].videoPressAPI || undefined !== state.dialogs[id].youTubePlayer;\n\t\t\tif ( ! isOpen && hasVideoPlayer ) {\n\t\t\t\t// When the dialog closes, check if the video has been marked watch, if so reset it, otherwise pause it.\n\t\t\t\tactions.pause(id);\n\t\t\t\tif ( state.watchedVideos.includes( id ) ) {\n\t\t\t\t\t// If we've already logged this video as watched, reset to the beginning.\n\t\t\t\t\tactions.reset(id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Initialize both VideoPress and YouTube players when the dialog content is loaded.\n\t\t */\n\t\tonVideoInit: async () => {\n\t\t\t// Initialize VideoPress\n\t\t\tactions.initVideoPressAPI();\n\t\t\t// Initialize YouTube\n\t\t\tactions.initYouTubeAPI();\n\t\t}\n\t},\n});\n"],"names":["VideoPressIframeApi","window","state","actions","store","watchedVideos","videoPressAPIReady","youTubeAPIReady","runAnimation","isOpen","ref","getElement","animationStore","animationElements","querySelectorAll","length","forEach","element","animationId","getAttribute","parentElement","isHidden","enabled","play","id","dialogs","videoPressAPI","controls","youTubePlayer","playVideo","pause","pauseVideo","reset","seek","seekTo","initVideoPressAPI","async","hasVideoPress","querySelector","iframe","duration","VideoPressInstance","customize","set","shareButton","info","onInfoUpdated","status","onPlaybackTimeUpdated","newPlaybackTime","toFixed","includes","initYouTubeAPI","youtubeIframe","YT","Promise","resolve","reject","Player","onYouTubeIframeAPIReady","script","document","createElement","src","onload","onerror","error","head","appendChild","srcUrl","URL","search","searchParams","toString","events","event","eventId","data","PlayerState","ENDED","PLAYING","youTubeProgressInterval","clearInterval","setInterval","player","getCurrentTime","percentage","getDuration","console","log","PAUSED","callbacks","onOpenStartVideo","onCloseStopVideo","hasVideoPlayer","undefined","onVideoInit"],"sourceRoot":""}