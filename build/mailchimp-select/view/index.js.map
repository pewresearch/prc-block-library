{"version":3,"file":"mailchimp-select/view/index.js","mappings":"iEAQA,MAGM,MAAEA,EAAK,QAAEC,GAAYC,EAHT,6BAG0B,CAC3CD,QAAS,CACRE,UAAWC,UACV,MAAM,MAAEC,GAAUC,IAEZC,EAAeC,EAAoBC,KAAMC,GAC9C,CAAC,eAAgB,SAASC,SAASD,EAAME,QACvCC,MAEGC,EAAeN,EAAoBC,KACvCC,GAAyB,iBAAfA,EAAME,OACfC,MAEGE,EAAYP,EAChBQ,OAAQN,GAAyB,aAAfA,EAAMO,MACxBC,IAAKR,GAAUA,EAAMG,OACjBM,QCzBMf,gBAAyB,aACvCG,EAAY,aACZO,GAAe,EAAK,UACpBC,EAAY,GAAE,MACdV,GAAQ,IAER,MAAM,SAAEe,GAAaC,OAAOC,IACtB,MAAEC,EAAK,iBAAEC,GAAqBH,OAAOC,GAAGG,IAC9C,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC5B,IAAKd,EACJ,OAAOc,EACN,IAAIC,MACH,gEAKH,MAAMJ,EAAMK,SAASC,IACrB,IAAKR,EAAME,GACV,OAAOG,EAAO,IAAIC,MAAM,cAAeJ,IAExCL,EAASY,IAAIZ,EAASa,sBAAsB5B,IAC5Ce,EAAS,CACRc,KAzBc,kCA0BdC,OAAQ,OACRC,KAAM,CACLC,MAAO9B,EACP+B,cAAexB,EACfC,UAAWA,EAAUwB,KAAK,KAC1BC,QAAS,mBACTC,WAAYhB,KAGZiB,KAAMC,IACFA,EAASC,QACZjB,EAAQgB,GAERf,EAAOe,KAGRE,MAAOC,IACPlB,EAAOkB,MAGX,CDnBwB3C,CAAU,CAC9BI,eACAQ,YACAD,eACAT,UAECqC,KAAMC,IACC,CACNI,OAAQ,UACRC,QACC,kDACDZ,KAAMO,KAGPE,MAAOC,IACA,CACNC,OAAQ,QACRC,QAASF,EAAEE,QACXZ,KAAMU,KAIT,OAAO3B,IAGT8B,UAAW,CAAC","sources":["webpack://@prc/block-library/./src/mailchimp-select/view/index.js","webpack://@prc/block-library/./src/mailchimp-select/view/subscribe.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-select';\nimport subscribe from './subscribe';\n\nconst { state, actions } = store(NAMESPACE, {\n\tactions: {\n\t\tsubscribe: async (fieldsForSubmission) => {\n\t\t\tconst { NONCE } = getContext();\n\t\t\t// Get the object out of fieldsForSubmission that has the name \"emailAddress\"\n\t\t\tconst emailAddress = fieldsForSubmission.find((field) =>\n\t\t\t\t['emailAddress', 'email'].includes(field.name)\n\t\t\t)?.value;\n\t\t\t// Get the object out of fieldsForSubmission that has the name \"captchaToken\"\n\t\t\tconst captchaToken = fieldsForSubmission.find(\n\t\t\t\t(field) => field.name === 'captchaToken'\n\t\t\t)?.value;\n\t\t\t// Get the object out of fieldsForSubmission that has the name \"interest\"\n\t\t\tconst interests = fieldsForSubmission\n\t\t\t\t.filter((field) => field.type === 'checkbox')\n\t\t\t\t.map((field) => field.value);\n\t\t\tconst result = await subscribe({\n\t\t\t\temailAddress,\n\t\t\t\tinterests,\n\t\t\t\tcaptchaToken,\n\t\t\t\tNONCE,\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t'You have been subscribed to the selected lists.',\n\t\t\t\t\t\tdata: response,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\tmessage: e.message,\n\t\t\t\t\t\tdata: e,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\treturn result;\n\t\t},\n\t},\n\tcallbacks: {},\n});\n","const ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nexport default async function subscribe({\n\temailAddress,\n\tcaptchaToken = false,\n\tinterests = [],\n\tNONCE = false,\n}) {\n\tconst { apiFetch } = window.wp;\n\tconst { isURL, buildQueryString } = window.wp.url;\n\treturn new Promise((resolve, reject) => {\n\t\tif (!captchaToken) {\n\t\t\treturn reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t\"We couldn't verify you're not a robot ðŸ¤–. Please try again.\"\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tconst url = document.URL;\n\t\tif (!isURL(url)) {\n\t\t\treturn reject(new Error('Invalid url', url));\n\t\t}\n\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\t\tapiFetch({\n\t\t\tpath: ENDPOINT,\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\temail: emailAddress,\n\t\t\t\tcaptcha_token: captchaToken,\n\t\t\t\tinterests: interests.join(','),\n\t\t\t\tapi_key: 'mailchimp-select',\n\t\t\t\torigin_url: url,\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve(response);\n\t\t\t\t} else {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t});\n}\n"],"names":["state","actions","store","subscribe","async","NONCE","getContext","emailAddress","fieldsForSubmission","find","field","includes","name","value","captchaToken","interests","filter","type","map","result","apiFetch","window","wp","isURL","buildQueryString","url","Promise","resolve","reject","Error","document","URL","use","createNonceMiddleware","path","method","data","email","captcha_token","join","api_key","origin_url","then","response","success","catch","e","status","message","callbacks"],"sourceRoot":""}