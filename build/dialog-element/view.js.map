{"version":3,"file":"view.js","mappings":"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","sources":["webpack://@prc/block-library/./src/dialog-element/view.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithScope,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nfunction addDialogIdToUrl(id) {\n\tconst url = new URL(window.location.href);\n\turl.searchParams.set('dialogId', id);\n\t// Update the URL without adding to history\n\twindow.history.replaceState({}, '', url);\n}\n\nfunction removeDialogIdFromUrl() {\n\tconst url = new URL(window.location.href);\n\turl.searchParams.delete('dialogId');\n\t// Update the URL without adding to history\n\twindow.history.replaceState({}, '', url);\n}\n\nconst { actions, state } = store('prc-block/dialog', {\n\tstate: {\n\t\tget id() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.id;\n\t\t},\n\t\tget activationTimerDuration() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].activationTimerDuration;\n\t\t},\n\t\tget animationDuration() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].animationDuration;\n\t\t},\n\t\tget dialogElement() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn document.getElementById(id);\n\t\t},\n\t\tget isOpen() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].isOpen;\n\t\t},\n\t\tget isClosing() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state[id].isClosing;\n\t\t},\n\t\tget enableDeepLink() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].enableDeepLink;\n\t\t}\n\t},\n\tactions: {\n\t\t/**\n\t\t * Helper function to close all open dialogs.\n\t\t */\n\t\tcloseAll: () => {\n\t\t\tconst { dialogs } = state;\n\t\t\tconst ids = Object.keys(dialogs);\n\t\t\tids.forEach((id) => {\n\t\t\t\t// Check that state[key] is an object and has an isOpen property.\n\t\t\t\tif (\n\t\t\t\t\ttypeof dialogs[id] !== 'object' ||\n\t\t\t\t\t!dialogs[id].hasOwnProperty('isOpen')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstate.dialogs[id].isOpen = false;\n\n\t\t\t\t// Fire off a custom event to let other blocks know the dialog has closed, it's explicit and only runs when a user closes the dialog.\n\t\t\t\t// @TODO: change this from dialogClosed to wpDialogClosed when migrating to Gutenberg core.\n\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\tnew CustomEvent('dialogClosed', { detail: { id } })\n\t\t\t\t);\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * This function is used by dialog-trigger to open the dialog when clicked.\n\t\t * @param event\n\t\t */\n\t\tonClickOpen: withSyncEvent((event) => {\n\t\t\t// We are hijacking all clicks on the trigger and any children to prevent the default click behavior.\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.open(id);\n\t\t}),\n\t\t/**\n\t\t * This function is used by the close button in the dialog element, when clicked it closes the dialog.\n\t\t * @param event\n\t\t */\n\t\tonClickClose: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.close(id);\n\t\t}),\n\t\t/**\n\t\t * This function allows you to directly open a dialog by passing an id from another store, like so:\n\t\t * store('prc-block/dialog').actions.open('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\topen: (passthroughId = false) => {\n\t\t\t// Most interactions will pass an id through, but if not then fallback to state for id.\n\t\t\tlet id = passthroughId;\n\t\t\tif (!id) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\t// Finally, if there is no id then we can't proceed and should exit early.\n\t\t\tif (!id) {\n\t\t\t\tconsole.error('No id found to open dialog.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate.dialogs[id].isOpen = true;\n\t\t\tstate.dialogs[id].closingModal = false;\n\t\t\t// @TODO: change this from dialogOpened to wpDialogOpened when migrating to Gutenberg core.\n\t\t\twindow.dispatchEvent(\n\t\t\t\tnew CustomEvent('dialogOpened', { detail: { id } })\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * This function allows you to directly close a dialog by passing an id from another store, like so:\n\t\t * store('prc-block/dialog').actions.close('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\tclose: (passthroughId = false) => {\n\t\t\tlet id = passthroughId;\n\t\t\tif (!id) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\tif (!id) {\n\t\t\t\tconsole.error('No id found to close dialog.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate.dialogs[id].isOpen = false;\n\t\t\t// @TODO: change this from dialogClosed to wpDialogClosed when migrating to Gutenberg core.\n\t\t\twindow.dispatchEvent(\n\t\t\t\tnew CustomEvent('dialogClosed', { detail: { id } })\n\t\t\t);\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * Handles the escape key event to close the dialog if it's open.\n\t\t *\n\t\t * @param event\n\t\t */\n\t\tonESCKey: (event) => {\n\t\t\tconst { id, isOpen } = state;\n\t\t\tif (id && event.key === 'Escape') {\n\t\t\t\tconsole.log('onESCKey:::id', id);\n\t\t\t\tif (true === isOpen) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tactions.close(id);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Handles the dialog open event, this is triggered by the user clicking the open button or via an auto activation timer.\n\t\t */\n\t\tonOpen: () => {\n\t\t\tconst { dialogElement, isOpen, id, enableDeepLink } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif (!id || !dialogElement) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to not be open, don't proceed.\n\t\t\tif (!isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (enableDeepLink) {\n\t\t\t\taddDialogIdToUrl(id);\n\t\t\t}\n\t\t\tdialogElement?.showModal();\n\t\t},\n\t\t/**\n\t\t * Handles the dialog close event, this is triggered by the user clicking the close button, pressing the escape key or clicking outside the dialog when it's a non-modal dialog.\n\t\t */\n\t\tonClose: () => {\n\t\t\tconst { dialogElement, isOpen, id, animationDuration } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif (!id || !dialogElement) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to be open, don't proceed.\n\t\t\tif (isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Start isClosing animation...\n\t\t\tstate.dialogs[id].isClosing = true;\n\t\t\t// Allow for animation to complete...\n\t\t\tsetTimeout(\n\t\t\t\twithScope(() => {\n\t\t\t\t\tdialogElement?.close();\n\t\t\t\t\tremoveDialogIdFromUrl(id); // We always clean the dialog id regardless of whether deep linking is enabled or not.\n\t\t\t\t\t// Fire off a custom event to let other blocks know the dialog has closed, it's explicit and only runs when a user closes the dialog.\n\t\t\t\t\tconst event = new CustomEvent('prc-block-dialog-closed', {\n\t\t\t\t\t\tdetail: { id },\n\t\t\t\t\t});\n\t\t\t\t\tdocument.dispatchEvent(event);\n\t\t\t\t\tstate.dialogs[id].isClosing = false;\n\t\t\t\t\tstate.dialogs[id].isOpen = false;\n\t\t\t\t}),\n\t\t\t\tanimationDuration\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * Closes the dialog if the backdrop is clicked.\n\t\t *\n\t\t * @param event\n\t\t */\n\t\tonBackdropClick: withSyncEvent((event) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst boundingRects = ref.getBoundingClientRect();\n\t\t\t// make sure the event x and y are within the dialog element, if they are continue...\n\t\t\tif (\n\t\t\t\tevent.clientX >= boundingRects.left &&\n\t\t\t\tevent.clientX <= boundingRects.right &&\n\t\t\t\tevent.clientY >= boundingRects.top &&\n\t\t\t\tevent.clientY <= boundingRects.bottom\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (true !== state.isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id } = state;\n\t\t\tactions.close(id);\n\t\t}),\n\t\t/**\n\t\t * Activates the current dialog element if there is an auto activation timer set.\n\t\t */\n\t\tonAutoActivation: () => {\n\t\t\tconst { id, activationTimerDuration, dialogs } = state;\n\t\t\tif (\n\t\t\t\t!id &&\n\t\t\t\t!activationTimerDuration &&\n\t\t\t\t-1 !== activationTimerDuration\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('onAutoActivation:::id', id, activationTimerDuration);\n\t\t\t// Check if any of the dialogs are already open,\n\t\t\t// if so we don't want to close or auto active another dialog.\n\t\t\tconst dialogIds = Object.keys(dialogs);\n\t\t\tfor (let i = 0; i < dialogIds.length; i++) {\n\t\t\t\tconst dialogId = dialogIds[i];\n\t\t\t\tif (dialogs[dialogId].isOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (1 <= activationTimerDuration) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\twithScope(() => {\n\t\t\t\t\t\tactions.closeAll();\n\t\t\t\t\t\tactions.open(id);\n\t\t\t\t\t}),\n\t\t\t\t\tactivationTimerDuration\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["actions","state","store","id","context","getContext","activationTimerDuration","dialogs","animationDuration","dialogElement","document","getElementById","isOpen","isClosing","enableDeepLink","closeAll","Object","keys","forEach","hasOwnProperty","window","dispatchEvent","CustomEvent","detail","onClickOpen","withSyncEvent","event","preventDefault","open","onClickClose","close","passthroughId","closingModal","console","error","callbacks","onESCKey","key","log","onOpen","url","URL","location","href","searchParams","set","history","replaceState","addDialogIdToUrl","showModal","onClose","setTimeout","withScope","delete","removeDialogIdFromUrl","onBackdropClick","ref","getElement","boundingRects","getBoundingClientRect","clientX","left","right","clientY","top","bottom","onAutoActivation","dialogIds","i","length"],"sourceRoot":""}