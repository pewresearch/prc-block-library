{"version":3,"file":"view.js","mappings":"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","sources":["webpack://@prc/block-library/./src/dialog-element/view.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithScope,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nfunction addDialogIdToUrl( id ) {\n\tconst url = new URL( window.location.href );\n\turl.searchParams.set( 'dialogId', id );\n\t// Update the URL without adding to history\n\twindow.history.replaceState( {}, '', url );\n}\n\nfunction removeDialogIdFromUrl() {\n\tconst url = new URL( window.location.href );\n\turl.searchParams.delete( 'dialogId' );\n\t// Update the URL without adding to history\n\twindow.history.replaceState( {}, '', url );\n}\n\nconst { actions, state } = store( 'prc-block/dialog', {\n\tstate: {\n\t\tget id() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.id;\n\t\t},\n\t\tget dialog() {\n\t\t\treturn state.dialogs[ state.id ];\n\t\t},\n\t\tget dialogElement() {\n\t\t\tconst context = getContext();\n\t\t\tif ( ! context?.id ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst { id } = context;\n\t\t\treturn document.getElementById( id );\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Helper function to close all open dialogs.\n\t\t */\n\t\tcloseAll: () => {\n\t\t\tconst { dialogs } = state;\n\t\t\tconst ids = Object.keys( dialogs );\n\t\t\tids.forEach( ( id ) => {\n\t\t\t\t// Check that state[key] is an object and has an isOpen property.\n\t\t\t\tif (\n\t\t\t\t\ttypeof dialogs[ id ] !== 'object' ||\n\t\t\t\t\t! dialogs[ id ].hasOwnProperty( 'isOpen' )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstate.dialogs[ id ].isOpen = false;\n\t\t\t} );\n\t\t},\n\t\t/**\n\t\t * This function is used by dialog-trigger to open the dialog when clicked.\n\t\t * @param event\n\t\t */\n\t\tonClickOpen: withSyncEvent( ( event ) => {\n\t\t\t// We are hijacking all clicks on the trigger and any children to prevent the default click behavior.\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.open( id );\n\t\t} ),\n\t\t/**\n\t\t * This function is used by the close button in the dialog element, when clicked it closes the dialog.\n\t\t * @param event\n\t\t */\n\t\tonClickClose: withSyncEvent( ( event ) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.close( id );\n\t\t} ),\n\t\t/**\n\t\t * This function allows you to directly open a dialog by passing an id from another store, like so:\n\t\t * store('core/dialog').actions.open('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\topen: ( passthroughId = false ) => {\n\t\t\t// Most interactions will pass an id through, but if not then fallback to state for id.\n\t\t\tlet id = passthroughId;\n\t\t\tif ( ! id ) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\t// Finally, if there is no id then we can't proceed and should exit early.\n\t\t\tif ( ! id ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate.dialogs[ id ].isOpen = true;\n\t\t\tstate.dialogs[ id ].closingModal = false;\n\t\t},\n\t\t/**\n\t\t * This function allows you to directly close a dialog by passing an id from another store, like so:\n\t\t * store('core/dialog').actions.close('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\tclose: ( passthroughId = false ) => {\n\t\t\tlet id = passthroughId;\n\t\t\tif ( ! id ) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\tif ( ! id ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate.dialogs[ id ].isOpen = false;\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * Handles the escape key event to close the dialog if it's open.\n\t\t *\n\t\t * @param event The keyboard event.\n\t\t */\n\t\tonESCKey: withSyncEvent( ( event ) => {\n\t\t\tconst { id, dialog } = state;\n\t\t\tif ( id && event.key === 'Escape' ) {\n\t\t\t\tif ( true === dialog.isOpen ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tactions.close( id );\n\t\t\t\t}\n\t\t\t}\n\t\t} ),\n\t\t/**\n\t\t * Handles the dialog open event, this is triggered by the user clicking the open button or via an auto activation timer.\n\t\t */\n\t\tonOpen: () => {\n\t\t\tconst { dialogElement, dialog, id } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif ( ! id || ! dialogElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to not be open, don't proceed.\n\t\t\tif ( ! dialog.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( dialog.enableDeepLink ) {\n\t\t\t\taddDialogIdToUrl( id );\n\t\t\t}\n\t\t\tdialogElement?.showModal();\n\t\t},\n\t\t/**\n\t\t * Handles the dialog close event, this is triggered by the user clicking the close button, pressing the escape key or clicking outside the dialog when it's a non-modal dialog.\n\t\t */\n\t\tonClose: () => {\n\t\t\tconst { dialogElement, dialog, id } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif ( ! id || ! dialogElement ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to be open, don't proceed.\n\t\t\tif ( dialog.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If already closing, don't start another close animation\n\t\t\tif ( dialog.isClosing ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// CRITICAL FIX: Only proceed if the dialog element is actually open in the DOM\n\t\t\t// This prevents the watcher from triggering close animations when the dialog\n\t\t\t// was never opened in the first place (e.g., on page load when isOpen initializes to false)\n\t\t\tif ( ! dialogElement.open ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Start isClosing animation...\n\t\t\tstate.dialogs[ id ].isClosing = true;\n\t\t\t// Allow for animation to complete...\n\t\t\tsetTimeout(\n\t\t\t\twithScope( () => {\n\t\t\t\t\tdialogElement?.close();\n\t\t\t\t\tremoveDialogIdFromUrl( id );\n\t\t\t\t\tstate.dialogs[ id ].isClosing = false;\n\t\t\t\t\tstate.dialogs[ id ].isOpen = false;\n\t\t\t\t} ),\n\t\t\t\tdialog.animationDuration\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * Closes the dialog if the backdrop is clicked.\n\t\t *\n\t\t * @param event\n\t\t */\n\t\tonBackdropClick: withSyncEvent( ( event ) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst boundingRects = ref.getBoundingClientRect();\n\t\t\t// make sure the event x and y are within the dialog element, if they are continue...\n\t\t\tif (\n\t\t\t\tevent.clientX >= boundingRects.left &&\n\t\t\t\tevent.clientX <= boundingRects.right &&\n\t\t\t\tevent.clientY >= boundingRects.top &&\n\t\t\t\tevent.clientY <= boundingRects.bottom\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { dialog, id } = state;\n\t\t\tif ( true !== dialog.isOpen || dialog.isClosing ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactions.close( id );\n\t\t} ),\n\t\t/**\n\t\t * Initializes the Dialog element.\n\t\t * Activates the current dialog element if there is an auto activation timer set.\n\t\t */\n\t\tonInit: () => {\n\t\t\tconst { id, dialog, dialogs } = state;\n\t\t\tif (\n\t\t\t\t! id &&\n\t\t\t\t! dialog.activationTimerDuration &&\n\t\t\t\t-1 !== dialog.activationTimerDuration\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Check if any of the dialogs are already open,\n\t\t\t// if so we don't want to close or auto activate another dialog.\n\t\t\tconst dialogIds = Object.keys( dialogs );\n\t\t\tfor ( let i = 0; i < dialogIds.length; i++ ) {\n\t\t\t\tconst dialogId = dialogIds[ i ];\n\t\t\t\tif ( dialogs[ dialogId ].isOpen ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( 1 <= dialog.activationTimerDuration ) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\twithScope( () => {\n\t\t\t\t\t\tactions.closeAll();\n\t\t\t\t\t\tactions.open( id );\n\t\t\t\t\t} ),\n\t\t\t\t\tdialog.activationTimerDuration\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n} );\n"],"names":["actions","state","store","id","context","getContext","dialog","dialogs","dialogElement","document","getElementById","closeAll","Object","keys","forEach","hasOwnProperty","isOpen","onClickOpen","withSyncEvent","event","preventDefault","open","onClickClose","close","passthroughId","closingModal","callbacks","onESCKey","key","onOpen","enableDeepLink","url","URL","window","location","href","searchParams","set","history","replaceState","addDialogIdToUrl","showModal","onClose","isClosing","setTimeout","withScope","delete","removeDialogIdFromUrl","animationDuration","onBackdropClick","ref","getElement","boundingRects","getBoundingClientRect","clientX","left","right","clientY","top","bottom","onInit","activationTimerDuration","dialogIds","i","length"],"sourceRoot":""}