{"version":3,"file":"view.js","mappings":"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","sources":["webpack://@prc/block-library/./src/dialog-element/view.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithScope,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nfunction addDialogIdToUrl(id) {\n\tconst url = new URL(window.location.href);\n\turl.searchParams.set('dialogId', id);\n\t// Update the URL without adding to history\n\twindow.history.replaceState({}, '', url);\n}\n\nfunction removeDialogIdFromUrl() {\n\tconst url = new URL(window.location.href);\n\turl.searchParams.delete('dialogId');\n\t// Update the URL without adding to history\n\twindow.history.replaceState({}, '', url);\n}\n\nconst { actions, state } = store('prc-block/dialog', {\n\tstate: {\n\t\tget id() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.id;\n\t\t},\n\t\tget activationTimerDuration() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].activationTimerDuration;\n\t\t},\n\t\tget animationDuration() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].animationDuration;\n\t\t},\n\t\tget dialogElement() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn document.getElementById(id);\n\t\t},\n\t\tget isOpen() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].isOpen;\n\t\t},\n\t\tget isClosing() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state[id].isClosing;\n\t\t},\n\t\tget enableDeepLink() {\n\t\t\tconst { id } = getContext();\n\t\t\treturn state.dialogs[id].enableDeepLink;\n\t\t}\n\t},\n\tactions: {\n\t\t/**\n\t\t * Helper function to close all open dialogs.\n\t\t */\n\t\tcloseAll: () => {\n\t\t\tconst { dialogs } = state;\n\t\t\tconst ids = Object.keys(dialogs);\n\t\t\tids.forEach((id) => {\n\t\t\t\t// Check that state[key] is an object and has an isOpen property.\n\t\t\t\tif (\n\t\t\t\t\ttypeof dialogs[id] !== 'object' ||\n\t\t\t\t\t!dialogs[id].hasOwnProperty('isOpen')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstate.dialogs[id].isOpen = false;\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * This function is used by dialog-trigger to open the dialog when clicked.\n\t\t * @param event\n\t\t */\n\t\tonClickOpen: withSyncEvent((event) => {\n\t\t\t// We are hijacking all clicks on the trigger and any children to prevent the default click behavior.\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.open(id);\n\t\t}),\n\t\t/**\n\t\t * This function is used by the close button in the dialog element, when clicked it closes the dialog.\n\t\t * @param event\n\t\t */\n\t\tonClickClose: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst { id } = state;\n\t\t\tactions.close(id);\n\t\t}),\n\t\t/**\n\t\t * This function allows you to directly open a dialog by passing an id from another store, like so:\n\t\t * store('prc-block/dialog').actions.open('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\topen: (passthroughId = false) => {\n\t\t\t// Most interactions will pass an id through, but if not then fallback to state for id.\n\t\t\tlet id = passthroughId;\n\t\t\tif (!id) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\t// Finally, if there is no id then we can't proceed and should exit early.\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log(\"dialog/element open() for id:\", id);\n\t\t\tstate.dialogs[id].isOpen = true;\n\t\t\tstate.dialogs[id].closingModal = false;\n\t\t},\n\t\t/**\n\t\t * This function allows you to directly close a dialog by passing an id from another store, like so:\n\t\t * store('prc-block/dialog').actions.close('xyz123');\n\t\t * @param {*} passthroughId\n\t\t */\n\t\tclose: (passthroughId = false) => {\n\t\t\tlet id = passthroughId;\n\t\t\tif (!id) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\tif (!id) {\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log(\"dialog/element close() for id:\", id);\n\t\t\tstate.dialogs[id].isOpen = false;\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * Handles the escape key event to close the dialog if it's open.\n\t\t *\n\t\t * @param event\n\t\t */\n\t\tonESCKey: (event) => {\n\t\t\tconst { id, isOpen } = state;\n\t\t\tif (id && event.key === 'Escape') {\n\t\t\t\tif (true === isOpen) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tactions.close(id);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Handles the dialog open event, this is triggered by the user clicking the open button or via an auto activation timer.\n\t\t */\n\t\tonOpen: () => {\n\t\t\tconst { dialogElement, isOpen, id, enableDeepLink } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif (!id || !dialogElement) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to not be open, don't proceed.\n\t\t\tif (!isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (enableDeepLink) {\n\t\t\t\taddDialogIdToUrl(id);\n\t\t\t}\n\t\t\tconsole.log('dialog/element callbacks.onOpen for id:', id);\n\t\t\tdialogElement?.showModal();\n\t\t},\n\t\t/**\n\t\t * Handles the dialog close event, this is triggered by the user clicking the close button, pressing the escape key or clicking outside the dialog when it's a non-modal dialog.\n\t\t */\n\t\tonClose: () => {\n\t\t\tconst { dialogElement, isOpen, id, animationDuration } = state;\n\t\t\t// Sanity check, if we don't have an id or dialogElement then we can't proceed.\n\t\t\tif (!id || !dialogElement) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If the dialog is meant to be open, don't proceed.\n\t\t\tif (isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Start isClosing animation...\n\t\t\tstate.dialogs[id].isClosing = true;\n\t\t\t// Allow for animation to complete...\n\t\t\tsetTimeout(\n\t\t\t\twithScope(() => {\n\t\t\t\t\tdialogElement?.close();\n\t\t\t\t\tremoveDialogIdFromUrl(id); // We always clean the dialog id regardless of whether deep linking is enabled or not.\n\t\t\t\t\tconsole.log('dialog/element callbacks.onClose for id:', id);\n\t\t\t\t\tstate.dialogs[id].isClosing = false;\n\t\t\t\t\tstate.dialogs[id].isOpen = false;\n\t\t\t\t}),\n\t\t\t\tanimationDuration\n\t\t\t);\n\t\t},\n\t\t/**\n\t\t * Closes the dialog if the backdrop is clicked.\n\t\t *\n\t\t * @param event\n\t\t */\n\t\tonBackdropClick: withSyncEvent((event) => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst boundingRects = ref.getBoundingClientRect();\n\t\t\t// make sure the event x and y are within the dialog element, if they are continue...\n\t\t\tif (\n\t\t\t\tevent.clientX >= boundingRects.left &&\n\t\t\t\tevent.clientX <= boundingRects.right &&\n\t\t\t\tevent.clientY >= boundingRects.top &&\n\t\t\t\tevent.clientY <= boundingRects.bottom\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (true !== state.isOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id } = state;\n\t\t\tconsole.log(\"dialog/element callbacks.onBackdropClick for id:\", id);\n\t\t\tactions.close(id);\n\t\t}),\n\t\t/**\n\t\t * Activates the current dialog element if there is an auto activation timer set.\n\t\t */\n\t\tonAutoActivation: () => {\n\t\t\tconst { id, activationTimerDuration, dialogs } = state;\n\t\t\tif (\n\t\t\t\t!id &&\n\t\t\t\t!activationTimerDuration &&\n\t\t\t\t-1 !== activationTimerDuration\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Check if any of the dialogs are already open,\n\t\t\t// if so we don't want to close or auto active another dialog.\n\t\t\tconst dialogIds = Object.keys(dialogs);\n\t\t\tfor (let i = 0; i < dialogIds.length; i++) {\n\t\t\t\tconst dialogId = dialogIds[i];\n\t\t\t\tif (dialogs[dialogId].isOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (1 <= activationTimerDuration) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\twithScope(() => {\n\t\t\t\t\t\tactions.closeAll();\n\t\t\t\t\t\tactions.open(id);\n\t\t\t\t\t}),\n\t\t\t\t\tactivationTimerDuration\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["actions","state","store","id","context","getContext","activationTimerDuration","dialogs","animationDuration","dialogElement","document","getElementById","isOpen","isClosing","enableDeepLink","closeAll","Object","keys","forEach","hasOwnProperty","onClickOpen","withSyncEvent","event","preventDefault","open","onClickClose","close","passthroughId","console","log","closingModal","callbacks","onESCKey","key","onOpen","url","URL","window","location","href","searchParams","set","history","replaceState","addDialogIdToUrl","showModal","onClose","setTimeout","withScope","delete","removeDialogIdFromUrl","onBackdropClick","ref","getElement","boundingRects","getBoundingClientRect","clientX","left","right","clientY","top","bottom","onAutoActivation","dialogIds","i","length"],"sourceRoot":""}