{"version":3,"file":"timeline/view.js","mappings":"iEAKA,MAAM,QAAEA,GAAYC,EAAM,qBAAsB,CAC/CD,QAAS,CACRE,WAAYA,KACX,MAAMC,EAAUC,IAChBD,EAAQE,WAAaF,EAAQE,UAG7B,MAAMC,EAASC,SAASC,cACvB,IAAIL,EAAQM,yBAETH,GACHA,EAAOI,aAAa,eAAgBP,EAAQE,WAGzCF,EAAQE,UACXL,EAAQW,gBAERX,EAAQY,gBAGVD,cAAeA,KACd,MAAMR,EAAUC,KACV,GAAEK,EAAE,MAAEI,EAAK,SAAEC,GAAaX,EAC1BY,EAASR,SAASS,eAAeP,GAEvCN,EAAQc,WAAaC,YAAY,KAChC,IAAIC,EAAeC,SAASL,EAAOM,OAC/BF,GAAgBN,EAAMS,OAAS,EAClCH,EAAe,EAEfA,IAGDJ,EAAOM,MAAQF,EACf,MAAMI,EAAOV,EAAMM,GACnBhB,EAAQqB,aAAeD,EAAKd,IAC1BK,IAEJF,aAAcA,KACb,MAAMT,EAAUC,IACZD,EAAQc,aACXQ,cAActB,EAAQc,YACtBd,EAAQc,WAAa,KACrBd,EAAQE,WAAY,IAGtBqB,aAAcA,KAEb1B,EAAQY,eACR,MAAMT,EAAUC,KACV,KAAEmB,GAASpB,GACX,GAAEM,GAAOc,EACfpB,EAAQqB,aAAef,EAEvB,MAAMkB,EAAcpB,SAASC,cAC5B,kBAAkBC,OAEfkB,GACHA,EAAYC,QAIb,MAAMb,EAASR,SAASS,eAAeb,EAAQM,IACzCoB,EAAQ1B,EAAQU,MAAMiB,UAAWC,GAAMA,EAAEtB,KAAOA,GACtDM,EAAOM,MAAQQ,IAGjBG,UAAW,CACVC,OAAQA,KACP,MAAM9B,EAAUC,KACV,GAAEK,EAAE,MAAEI,EAAK,UAAER,GAAcF,EAC3BY,EAASR,SAASS,eAAeP,GAGvCM,EAAOmB,iBAAiB,QAAUC,IACjC,MAAMd,EAAQe,WAAWD,EAAME,OAAOhB,OAEhCiB,EAAYC,KAAKC,IACtBD,KAAKE,MACHpB,GAASR,EAAMS,OAAS,IAAOT,EAAMS,OAAS,IAEhDT,EAAMS,OAAS,GAEVC,EAAOV,EAAMyB,GACnBnC,EAAQqB,aAAeD,EAAKd,KAI7BM,EAAOmB,iBAAiB,SAAWC,IAClC,MAAMd,EAAQe,WAAWD,EAAME,OAAOhB,OAEhCiB,EAAYC,KAAKC,IACtBD,KAAKE,MACHpB,GAASR,EAAMS,OAAS,IAAOT,EAAMS,OAAS,IAEhDT,EAAMS,OAAS,GAGhBP,EAAOM,MAAQiB,EACf,MAAMf,EAAOV,EAAMyB,GACnBnC,EAAQqB,aAAeD,EAAKd,KAIzBJ,GACHL,EAAQW,iBAGV+B,sBAAuBA,KACtB,MAAMvC,EAAUC,KACV,GAAEK,EAAE,aAAEe,GAAiBrB,EAC7B,OAAOM,IAAOe,GAEfmB,mBAAoBA,IACHvC,IACDC,UAAY,QAAU,OAEtCuC,gBAAiBA,KAChB,MAAMzC,EAAUC,KACV,KAAEmB,GAASpB,EAEjB,MAAO,SADgBoB,EAAKsB","sources":["webpack://@prc/block-library/./src/timeline/view.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport { store, getContext } from '@wordpress/interactivity';\n\nconst { actions } = store('prc-block/timeline', {\n\tactions: {\n\t\ttogglePlay: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.isPlaying = !context.isPlaying;\n\n\t\t\t// Update aria-pressed state\n\t\t\tconst button = document.querySelector(\n\t\t\t\t`#${context.id} .play-pause-button`\n\t\t\t);\n\t\t\tif (button) {\n\t\t\t\tbutton.setAttribute('aria-pressed', context.isPlaying);\n\t\t\t}\n\n\t\t\tif (context.isPlaying) {\n\t\t\t\tactions.startAutoPlay();\n\t\t\t} else {\n\t\t\t\tactions.stopAutoPlay();\n\t\t\t}\n\t\t},\n\t\tstartAutoPlay: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { id, ticks, interval } = context;\n\t\t\tconst slider = document.getElementById(id);\n\n\t\t\tcontext.intervalId = setInterval(() => {\n\t\t\t\tlet currentValue = parseInt(slider.value);\n\t\t\t\tif (currentValue >= ticks.length - 1) {\n\t\t\t\t\tcurrentValue = 0;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentValue++;\n\t\t\t\t}\n\n\t\t\t\tslider.value = currentValue;\n\t\t\t\tconst tick = ticks[currentValue];\n\t\t\t\tcontext.activeTickId = tick.id;\n\t\t\t}, interval);\n\t\t},\n\t\tstopAutoPlay: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (context.intervalId) {\n\t\t\t\tclearInterval(context.intervalId);\n\t\t\t\tcontext.intervalId = null;\n\t\t\t\tcontext.isPlaying = false;\n\t\t\t}\n\t\t},\n\t\tactivateTick: () => {\n\t\t\t// If used, stop autoplay immediately\n\t\t\tactions.stopAutoPlay();\n\t\t\tconst context = getContext();\n\t\t\tconst { tick } = context;\n\t\t\tconst { id } = tick;\n\t\t\tcontext.activeTickId = id;\n\t\t\t// Update focus for keyboard users\n\t\t\tconst tickElement = document.querySelector(\n\t\t\t\t`[data-tick-id=\"${id}\"]`\n\t\t\t);\n\t\t\tif (tickElement) {\n\t\t\t\ttickElement.focus();\n\t\t\t}\n\t\t\t// Update the input range to match, use the index of the\n\t\t\t// given tick from context.ticks given the id\n\t\t\tconst slider = document.getElementById(context.id);\n\t\t\tconst index = context.ticks.findIndex((t) => t.id === id);\n\t\t\tslider.value = index;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonInit: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { id, ticks, isPlaying } = context;\n\t\t\tconst slider = document.getElementById(id);\n\n\t\t\t// Handle continuous sliding\n\t\t\tslider.addEventListener('input', (event) => {\n\t\t\t\tconst value = parseFloat(event.target.value);\n\t\t\t\t// Find the nearest tick index based on the current value\n\t\t\t\tconst tickIndex = Math.min(\n\t\t\t\t\tMath.round(\n\t\t\t\t\t\t(value / (ticks.length - 1)) * (ticks.length - 1)\n\t\t\t\t\t),\n\t\t\t\t\tticks.length - 1\n\t\t\t\t);\n\t\t\t\tconst tick = ticks[tickIndex];\n\t\t\t\tcontext.activeTickId = tick.id;\n\t\t\t});\n\n\t\t\t// Handle snap on release\n\t\t\tslider.addEventListener('change', (event) => {\n\t\t\t\tconst value = parseFloat(event.target.value);\n\t\t\t\t// Calculate the nearest tick position\n\t\t\t\tconst tickIndex = Math.min(\n\t\t\t\t\tMath.round(\n\t\t\t\t\t\t(value / (ticks.length - 1)) * (ticks.length - 1)\n\t\t\t\t\t),\n\t\t\t\t\tticks.length - 1\n\t\t\t\t);\n\t\t\t\t// Update the slider value to the nearest tick position\n\t\t\t\tslider.value = tickIndex;\n\t\t\t\tconst tick = ticks[tickIndex];\n\t\t\t\tcontext.activeTickId = tick.id;\n\t\t\t});\n\n\t\t\t// Start autoplay if autostart is enabled\n\t\t\tif (isPlaying) {\n\t\t\t\tactions.startAutoPlay();\n\t\t\t}\n\t\t},\n\t\tisTimelineSlideActive: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { id, activeTickId } = context;\n\t\t\treturn id === activeTickId;\n\t\t},\n\t\tautoPlayButtonText: () => {\n\t\t\tconst context = getContext();\n\t\t\treturn context.isPlaying ? 'Pause' : 'Play';\n\t\t},\n\t\tgetTickPosition: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { tick } = context;\n\t\t\tconst activePosition = tick.position;\n\t\t\treturn `left: ${activePosition}%`;\n\t\t},\n\t},\n});\n"],"names":["actions","store","togglePlay","context","getContext","isPlaying","button","document","querySelector","id","setAttribute","startAutoPlay","stopAutoPlay","ticks","interval","slider","getElementById","intervalId","setInterval","currentValue","parseInt","value","length","tick","activeTickId","clearInterval","activateTick","tickElement","focus","index","findIndex","t","callbacks","onInit","addEventListener","event","parseFloat","target","tickIndex","Math","min","round","isTimelineSlideActive","autoPlayButtonText","getTickPosition","position"],"sourceRoot":""}