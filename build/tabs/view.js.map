{"version":3,"file":"view.js","mappings":"oGAWA,MAAM,MAAEA,EAAK,QAAEC,GAAYC,EAAM,iBAAkB,CAClDF,MAAO,CACN,YAAIG,GACH,MAAM,OAAEC,GAAWC,IAEnB,OADiBL,EAAMI,EAExB,EAOA,YAAIE,GACH,MAAM,WAAEC,GAAeC,IACjBC,EAAQF,GAAYG,IAAIC,QAAQ,QAAS,KAAO,KACtD,IAAKF,EACJ,OAAO,KAER,MAAM,SAAEN,GAAaH,EAErB,OADiBG,EAASS,UAAWC,GAAMA,EAAEH,KAAOD,EAErD,EAMA,eAAIK,GACH,MAAM,eAAEC,GAAmBV,IAE3B,OAAOU,IADUf,EAAMM,QAExB,EAMA,qBAAIU,GACH,OAAOhB,EAAMc,aAAe,EAAI,CACjC,GAEDb,QAAS,CAMRgB,iBAAkBC,EAAeC,IAEhC,MAAM,WAAEC,GAAef,IACvB,GAAkB,UAAdc,EAAME,IAAiB,CAC1B,MAAMf,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,EAEvB,MAAO,GAAkB,eAAda,EAAME,KAAyBD,EAKnC,GAAkB,cAAdD,EAAME,KAAwBD,GAKlC,GAAkB,cAAdD,EAAME,KAAuBD,EAAY,CACnD,MAAMd,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,EAAW,EAElC,MAAO,GAAkB,YAAda,EAAME,KAAqBD,EAAY,CACjD,MAAMd,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,EAAW,EAElC,MAfqD,CACpD,MAAMA,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,EAAW,EAElC,KAVsD,CACrD,MAAMA,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,EAAW,EAElC,IAsBDiB,eAAgBL,EAAeC,IAC9BA,EAAMK,iBAEN,MAAMlB,EAAWN,EAAMM,SACN,OAAbA,GACHL,EAAQqB,aAAahB,KAQvBgB,aAAcA,CAAChB,EAAUmB,GAAc,KAGtC,GAFgBpB,IACRU,eAAiBT,EACrBmB,EAAa,CAChB,MAAMhB,EAAQT,EAAMG,SAASG,GAAUI,GACjCgB,EAAaC,SAASC,eAAenB,GACvCiB,GACHG,WAAW,KACVH,EAAWI,eAAe,CAAEC,SAAU,YACpC,IAEL,GAEDC,gBAAiBA,KAEhBC,OAAOC,cAAc,IAAIC,YAAY,gBAGvCC,UAAW,CAIVC,WAAYA,KACX,MAAM,SAAElC,GAAaH,EACrB,GAAwB,IAApBG,EAASmC,OACZ,OAED,MACM7B,EADOwB,OAAOM,SAASC,KACV7B,QAAQ,IAAK,IAC1BL,EAAWH,EAASS,UAAWC,GAAMA,EAAEH,KAAOD,GAEhDH,GAAY,GACfL,EAAQqB,aAAahB,GAAU,GAEhCL,EAAQ+B","sources":["webpack://@prc/block-library/./src/tabs/view.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\n// Interactivy store for the tabs block.\nconst { state, actions } = store('prc-block/tabs', {\n\tstate: {\n\t\tget tabsList() {\n\t\t\tconst { tabsId } = getContext();\n\t\t\tconst tabsList = state[tabsId];\n\t\t\treturn tabsList;\n\t\t},\n\t\t/**\n\t\t * Gets the index of the active tab element whether it\n\t\t * is a tab label or tab panel.\n\t\t *\n\t\t * @type {number|null}\n\t\t */\n\t\tget tabIndex() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst tabId = attributes?.id?.replace('tab__', '') || null;\n\t\t\tif (!tabId) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst { tabsList } = state;\n\t\t\tconst tabIndex = tabsList.findIndex((t) => t.id === tabId);\n\t\t\treturn tabIndex;\n\t\t},\n\t\t/**\n\t\t * Whether the tab panel or tab label is the active tab.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tget isActiveTab() {\n\t\t\tconst { activeTabIndex } = getContext();\n\t\t\tconst tabIndex = state.tabIndex;\n\t\t\treturn activeTabIndex === tabIndex;\n\t\t},\n\t\t/**\n\t\t * The value of the tabindex attribute.\n\t\t *\n\t\t * @type {false|string}\n\t\t */\n\t\tget tabIndexAttribute() {\n\t\t\treturn state.isActiveTab ? -1 : 0;\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Handles the keydown events for the tab label and tabs controller.\n\t\t *\n\t\t * @param {KeyboardEvent} event The keydown event.\n\t\t */\n\t\thandleTabKeyDown: withSyncEvent((event) => {\n\t\t\t// If this is the enter key then lets get the tab index from context and set the active tab to that index.\n\t\t\tconst { isVertical } = getContext();\n\t\t\tif (event.key === 'Enter') {\n\t\t\t\tconst tabIndex = state.tabIndex;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowRight' && !isVertical) {\n\t\t\t\tconst tabIndex = state.tabIndex;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex + 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowLeft' && !isVertical) {\n\t\t\t\tconst tabIndex = state.tabIndex;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex - 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowDown' && isVertical) {\n\t\t\t\tconst tabIndex = state.tabIndex;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex + 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowUp' && isVertical) {\n\t\t\t\tconst tabIndex = state.tabIndex;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Handles the click event for the tab label.\n\t\t *\n\t\t * @param {MouseEvent} event The click event.\n\t\t */\n\t\thandleTabClick: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tconst tabIndex = state.tabIndex;\n\t\t\tif (tabIndex !== null) {\n\t\t\t\tactions.setActiveTab(tabIndex);\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Sets the active tab index.\n\t\t *\n\t\t * @param {number} tabIndex The index of the active tab.\n\t\t */\n\t\tsetActiveTab: (tabIndex, scrollToTab = false) => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.activeTabIndex = tabIndex;\n\t\t\tif (scrollToTab) {\n\t\t\t\tconst tabId = state.tabsList[tabIndex].id;\n\t\t\t\tconst tabElement = document.getElementById(tabId);\n\t\t\t\tif (tabElement) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttabElement.scrollIntoView({ behavior: 'smooth' });\n\t\t\t\t\t}, 100);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsignalTabsReady: () => {\n\t\t\t// Fire a custom browser event calles tabsReady.\n\t\t\twindow.dispatchEvent(new CustomEvent('tabsReady'));\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * When the tabs are initialized, we need to check if there is a hash in the url and if so if it exists in the current tabsList, set the active tab to that index.\n\t\t */\n\t\tonTabsInit: () => {\n\t\t\tconst { tabsList } = state;\n\t\t\tif (tabsList.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst hash = window.location.hash;\n\t\t\tconst tabId = hash.replace('#', '');\n\t\t\tconst tabIndex = tabsList.findIndex((t) => t.id === tabId);\n\t\t\t// Check if tabIndex is a positive number and if so we'll auto activate that tab.\n\t\t\tif (tabIndex >= 0) {\n\t\t\t\tactions.setActiveTab(tabIndex, true);\n\t\t\t}\n\t\t\tactions.signalTabsReady();\n\t\t},\n\t},\n});\n"],"names":["state","actions","store","tabsList","tabsId","getContext","tabIndex","attributes","getElement","tabId","id","replace","findIndex","t","isActiveTab","activeTabIndex","tabIndexAttribute","handleTabKeyDown","withSyncEvent","event","isVertical","key","setActiveTab","handleTabClick","preventDefault","scrollToTab","tabElement","document","getElementById","setTimeout","scrollIntoView","behavior","signalTabsReady","window","dispatchEvent","CustomEvent","callbacks","onTabsInit","length","location","hash"],"sourceRoot":""}