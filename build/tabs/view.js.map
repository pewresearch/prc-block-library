{"version":3,"file":"view.js","mappings":"oGAWA,MAAM,MAAEA,EAAK,QAAEC,GAAYC,EAAM,iBAAkB,CAClDF,MAAO,CAMN,YAAIG,GACH,MAAMC,EAAUC,IACVC,EAASF,GAASE,OAExB,OADiBN,EAAMM,EAExB,EAOA,YAAIC,GACH,MAAM,WAAEC,GAAeC,IACjBC,EAAQF,GAAYG,IAAIC,QAAQ,QAAS,KAAO,KACtD,IAAKF,EACJ,OAAO,KAER,MAAM,SAAEP,GAAaH,EAErB,OADiBG,EAASU,UAAWC,GAAMA,EAAEH,KAAOD,EAErD,EAMA,eAAIK,GACH,MAAM,eAAEC,GAAmBX,KACrB,SAAEE,GAAaP,EACrB,OAAOgB,IAAmBT,CAC3B,EAMA,oBAAIU,GACH,MAAMb,EAAUC,IAChB,OAAOD,GAASa,mBAAoB,CACrC,EAMA,qBAAIC,GACH,OAAOlB,EAAMe,aAAe,EAAI,CACjC,GAEDd,QAAS,CAMRkB,iBAAkBC,EAAeC,IAEhC,MAAM,WAAEC,GAAejB,IACvB,GAAkB,UAAdgB,EAAME,IAAiB,CAC1B,MAAM,SAAEhB,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,EAEvB,MAAO,GAAkB,eAAdc,EAAME,KAAyBD,EAKnC,GAAkB,cAAdD,EAAME,KAAwBD,GAKlC,GAAkB,cAAdD,EAAME,KAAuBD,EAAY,CACnD,MAAM,SAAEf,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,EAAW,EAElC,MAAO,GAAkB,YAAdc,EAAME,KAAqBD,EAAY,CACjD,MAAM,SAAEf,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,EAAW,EAElC,MAfqD,CACpD,MAAM,SAAEA,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,EAAW,EAElC,KAVsD,CACrD,MAAM,SAAEA,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,EAAW,EAElC,IAsBDkB,eAAgBL,EAAeC,IAC9BA,EAAMK,iBAEN,MAAM,SAAEnB,GAAaP,EACJ,OAAbO,GACHN,EAAQuB,aAAajB,KAQvBoB,mBAAoBP,EAAeC,IAClC,MAAMO,EAAgBP,EAAMQ,OAAOD,cAAgB,EAC/CA,GAAiB,GACpB3B,EAAQuB,aAAaI,KAMvBE,0BAA2BA,KAC1B,MAAM1B,EAAUC,KACV,eAAE0B,EAAc,oBAAEC,GAAwB5B,EAEhD,IAAK2B,EAEJ,YADA3B,EAAQa,kBAAmB,GAI5B,MAAMgB,EAAQC,OAAOC,WAIpB/B,EAAQa,oBADLgB,EAAQD,GAAuBD,IAYpCP,aAAcA,CAACjB,EAAU6B,GAAc,KAGtC,GAFgB/B,IACRW,eAAiBT,EACrB6B,EAAa,CAChB,MAAM1B,EAAQV,EAAMG,SAASI,GAAUI,GACjC0B,EAAaC,SAASC,eAAe7B,GACvC2B,GACHG,WAAW,KACVH,EAAWI,eAAe,CAAEC,SAAU,YACpC,IAEL,GAMDC,gBAAiBA,KAEhBT,OAAOU,cAAc,IAAIC,YAAY,gBAGvCC,UAAW,CAKVC,WAAYA,KACX,MAAM,SAAE5C,GAAaH,EACrB,GAAwB,IAApBG,EAAS6C,OACZ,OAED,MAAM,KAAEC,GAASf,OAAOgB,SAClBxC,EAAQuC,EAAKrC,QAAQ,IAAK,IAC1BL,EAAWJ,EAASU,UAAWC,GAAMA,EAAEH,KAAOD,GAEhDH,GAAY,GACfN,EAAQuB,aAAajB,GAAU,GAIhCN,EAAQ6B,4BAGRI,OAAOiB,iBAAiB,SAAUlD,EAAQ6B,2BAE1C7B,EAAQ0C","sources":["webpack://@prc/block-library/./src/tabs/view.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\n// Interactivy store for the tabs block.\nconst { state, actions } = store('prc-block/tabs', {\n\tstate: {\n\t\t/**\n\t\t * Gets a contextually aware list of tabs for the current tabs block.\n\t\t *\n\t\t * @type {Array}\n\t\t */\n\t\tget tabsList() {\n\t\t\tconst context = getContext();\n\t\t\tconst tabsId = context?.tabsId;\n\t\t\tconst tabsList = state[tabsId];\n\t\t\treturn tabsList;\n\t\t},\n\t\t/**\n\t\t * Gets the index of the active tab element whether it\n\t\t * is a tab label or tab panel.\n\t\t *\n\t\t * @type {number|null}\n\t\t */\n\t\tget tabIndex() {\n\t\t\tconst { attributes } = getElement();\n\t\t\tconst tabId = attributes?.id?.replace('tab__', '') || null;\n\t\t\tif (!tabId) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst { tabsList } = state;\n\t\t\tconst tabIndex = tabsList.findIndex((t) => t.id === tabId);\n\t\t\treturn tabIndex;\n\t\t},\n\t\t/**\n\t\t * Whether the tab panel or tab label is the active tab.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tget isActiveTab() {\n\t\t\tconst { activeTabIndex } = getContext();\n\t\t\tconst { tabIndex } = state;\n\t\t\treturn activeTabIndex === tabIndex;\n\t\t},\n\t\t/**\n\t\t * Whether tabs should display as mobile dropdown.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tget isMobileDropdown() {\n\t\t\tconst context = getContext();\n\t\t\treturn context?.isMobileDropdown || false;\n\t\t},\n\t\t/**\n\t\t * The value of the tabindex attribute.\n\t\t *\n\t\t * @type {false|string}\n\t\t */\n\t\tget tabIndexAttribute() {\n\t\t\treturn state.isActiveTab ? -1 : 0;\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Handles the keydown events for the tab label and tabs controller.\n\t\t *\n\t\t * @param {KeyboardEvent} event The keydown event.\n\t\t */\n\t\thandleTabKeyDown: withSyncEvent((event) => {\n\t\t\t// If this is the enter key then lets get the tab index from context and set the active tab to that index.\n\t\t\tconst { isVertical } = getContext();\n\t\t\tif (event.key === 'Enter') {\n\t\t\t\tconst { tabIndex } = state;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowRight' && !isVertical) {\n\t\t\t\tconst { tabIndex } = state;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex + 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowLeft' && !isVertical) {\n\t\t\t\tconst { tabIndex } = state;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex - 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowDown' && isVertical) {\n\t\t\t\tconst { tabIndex } = state;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex + 1);\n\t\t\t\t}\n\t\t\t} else if (event.key === 'ArrowUp' && isVertical) {\n\t\t\t\tconst { tabIndex } = state;\n\t\t\t\tif (tabIndex !== null) {\n\t\t\t\t\tactions.setActiveTab(tabIndex - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Handles the click event for the tab label.\n\t\t *\n\t\t * @param {MouseEvent} event The click event.\n\t\t */\n\t\thandleTabClick: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\n\t\t\tconst { tabIndex } = state;\n\t\t\tif (tabIndex !== null) {\n\t\t\t\tactions.setActiveTab(tabIndex);\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Handles the change event for the mobile dropdown select element.\n\t\t *\n\t\t * @param {Event} event The select change event.\n\t\t */\n\t\thandleSelectChange: withSyncEvent((event) => {\n\t\t\tconst selectedIndex = event.target.selectedIndex - 1; // Subtract 1 for the default option\n\t\t\tif (selectedIndex >= 0) {\n\t\t\t\tactions.setActiveTab(selectedIndex);\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * Updates the mobile dropdown state based on viewport width.\n\t\t */\n\t\tupdateMobileDropdownState: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { mobileDropdown, mobileDropdownWidth } = context;\n\t\t\t\n\t\t\tif (!mobileDropdown) {\n\t\t\t\tcontext.isMobileDropdown = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst width = window.innerWidth;\n\t\t\t// If the width is less than the mobileDropdownWidth and mobileDropdown is enabled\n\t\t\t// set isMobileDropdown to true\n\t\t\tif (width < mobileDropdownWidth && mobileDropdown) {\n\t\t\t\tcontext.isMobileDropdown = true;\n\t\t\t} else {\n\t\t\t\tcontext.isMobileDropdown = false;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Sets the active tab index.\n\t\t *\n\t\t * @param {number} tabIndex    The index of the active tab.\n\t\t * @param          scrollToTab\n\t\t */\n\t\tsetActiveTab: (tabIndex, scrollToTab = false) => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.activeTabIndex = tabIndex;\n\t\t\tif (scrollToTab) {\n\t\t\t\tconst tabId = state.tabsList[tabIndex].id;\n\t\t\t\tconst tabElement = document.getElementById(tabId);\n\t\t\t\tif (tabElement) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttabElement.scrollIntoView({ behavior: 'smooth' });\n\t\t\t\t\t}, 100);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Signals that the tabs are ready by firing a custom browser event.\n\t\t * This provides extensibility for other scripts to hook into when tabs are initialized.\n\t\t */\n\t\tsignalTabsReady: () => {\n\t\t\t// @TODO: change this from tabsReady to wpTabsReady when migrating to Gutenberg core.\n\t\t\twindow.dispatchEvent(new CustomEvent('tabsReady'));\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * When the tabs are initialized, we need to check if there is a hash in the url and if so if it exists in the current tabsList, set the active tab to that index.\n\t\t * Also setup mobile dropdown responsiveness.\n\t\t */\n\t\tonTabsInit: () => {\n\t\t\tconst { tabsList } = state;\n\t\t\tif (tabsList.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { hash } = window.location;\n\t\t\tconst tabId = hash.replace('#', '');\n\t\t\tconst tabIndex = tabsList.findIndex((t) => t.id === tabId);\n\t\t\t// Check if tabIndex is a positive number and if so we'll auto activate that tab.\n\t\t\tif (tabIndex >= 0) {\n\t\t\t\tactions.setActiveTab(tabIndex, true);\n\t\t\t}\n\t\t\t\n\t\t\t// Initialize mobile dropdown state\n\t\t\tactions.updateMobileDropdownState();\n\t\t\t\n\t\t\t// Add resize listener to update mobile dropdown state\n\t\t\twindow.addEventListener('resize', actions.updateMobileDropdownState);\n\t\t\t\n\t\t\tactions.signalTabsReady();\n\t\t},\n\t},\n});\n"],"names":["state","actions","store","tabsList","context","getContext","tabsId","tabIndex","attributes","getElement","tabId","id","replace","findIndex","t","isActiveTab","activeTabIndex","isMobileDropdown","tabIndexAttribute","handleTabKeyDown","withSyncEvent","event","isVertical","key","setActiveTab","handleTabClick","preventDefault","handleSelectChange","selectedIndex","target","updateMobileDropdownState","mobileDropdown","mobileDropdownWidth","width","window","innerWidth","scrollToTab","tabElement","document","getElementById","setTimeout","scrollIntoView","behavior","signalTabsReady","dispatchEvent","CustomEvent","callbacks","onTabsInit","length","hash","location","addEventListener"],"sourceRoot":""}