{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@prc/block-library/external window [\"wp\",\"blocks\"]","webpack://@prc/block-library/external window [\"wp\",\"data\"]","webpack://@prc/block-library/external window [\"wp\",\"i18n\"]","webpack://@prc/block-library/external window [\"wp\",\"element\"]","webpack://@prc/block-library/external window [\"wp\",\"blockEditor\"]","webpack://@prc/block-library/external window [\"wp\",\"components\"]","webpack://@prc/block-library/./src/dialog/store.js","webpack://@prc/block-library/external window \"ReactJSXRuntime\"","webpack://@prc/block-library/./src/dialog/edit.jsx","webpack://@prc/block-library/external window \"prcIcons\"","webpack://@prc/block-library/./src/dialog/deprecated.js","webpack://@prc/block-library/./src/dialog/index.js","webpack://@prc/block-library/./src/dialog/icon.jsx","webpack://@prc/block-library/./src/dialog/save.jsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","// Register a @wordpress/data store for the dialog open/closed state.\n// Whenever a core/dialog block is initialized, we should get it's blocks, find the dialog-element block, capture it's client id and then\n// use that to manage the open/closed state of the dialog. Really simple like { xyzCleintId: { isOpen: true }, abcdClientId: { isOpen: false } }.\n// Then we can use useSelect to get the isOpen state and useDispatch to create open/close actions in the dialog, dialog-element, and dialog-trigger blocks.\n/**\n * WordPress dependencies\n */\nimport { createReduxStore } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nconst DEFAULT_STATE = {\n\tid: null,\n\tdialogs: {},\n};\n\nconst actions = {\n\t/**\n\t * This function is used by dialog-element to initialize the dialog in the store.\n\t * @param {*} id The clientId of the dialog-element block.\n\t */\n\tinit: ( id ) => {\n\t\treturn {\n\t\t\ttype: 'INIT_DIALOG',\n\t\t\tid,\n\t\t};\n\t},\n\t/**\n\t * This function is used by dialog-element to remove the dialog from the store when the block is removed.\n\t * @param {*} id The clientId of the dialog-element block.\n\t */\n\tdestroy: ( id ) => {\n\t\treturn {\n\t\t\ttype: 'DESTROY_DIALOG',\n\t\t\tid,\n\t\t};\n\t},\n\t/**\n\t * This function is used to open the dialog when called, from any block.\n\t * @param {*} passthroughId The clientId of the dialog-element block to open.\n\t */\n\topen: ( passthroughId = false ) => {\n\t\treturn {\n\t\t\ttype: 'OPEN_DIALOG',\n\t\t\tid: passthroughId,\n\t\t};\n\t},\n\t/**\n\t * This function is used to close the dialog when called, from any block.\n\t * @param {*} passthroughId The clientId of the dialog-element block to close.\n\t */\n\tclose: ( passthroughId = false ) => {\n\t\treturn {\n\t\t\ttype: 'CLOSE_DIALOG',\n\t\t\tid: passthroughId,\n\t\t};\n\t},\n};\n\nconst reducer = ( state = DEFAULT_STATE, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'INIT_DIALOG': {\n\t\t\tconst { id } = action;\n\t\t\tif ( ! id ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tid,\n\t\t\t\tdialogs: {\n\t\t\t\t\t...state.dialogs,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t\tclosingModal: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'DESTROY_DIALOG': {\n\t\t\tconst { id } = action;\n\t\t\tif ( ! id ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\tconst newDialogs = { ...state.dialogs };\n\t\t\tdelete newDialogs[ id ];\n\t\t\tlet newId = state.id;\n\t\t\tif ( state.id === id ) {\n\t\t\t\tnewId = Object.keys( newDialogs )[ 0 ] || null;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tid: newId,\n\t\t\t\tdialogs: newDialogs,\n\t\t\t};\n\t\t}\n\t\tcase 'OPEN_DIALOG': {\n\t\t\t// Most interactions will pass an id through, but if not then fallback to state for id.\n\t\t\tlet id = action.id;\n\t\t\tif ( ! id ) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\t// Finally, if there is no id then we can't proceed and should exit early.\n\t\t\tif ( ! id ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdialogs: {\n\t\t\t\t\t...state.dialogs,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state.dialogs[ id ],\n\t\t\t\t\t\tisOpen: true,\n\t\t\t\t\t\tclosingModal: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'CLOSE_DIALOG': {\n\t\t\tlet id = action.id;\n\t\t\tif ( ! id ) {\n\t\t\t\tid = state.id;\n\t\t\t}\n\t\t\tif ( ! id ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdialogs: {\n\t\t\t\t\t...state.dialogs,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state.dialogs[ id ],\n\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t\tclosingModal: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nconst selectors = {\n\t/**\n\t * Get the open/closed state of a dialog by its clientId.\n\t * @param {*} state The current state of the store.\n\t * @param {*} id    The clientId of the dialog-element block.\n\t * @return {boolean} isOpen\n\t */\n\tisOpen: ( state, id ) => {\n\t\tif ( ! id || ! state.dialogs[ id ] ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn state.dialogs[ id ].isOpen;\n\t},\n\t/**\n\t * Get the closingModal state of a dialog by its clientId.\n\t * This is used to determine if we should add the closing animation class.\n\t * @param {*} state The current state of the store.\n\t * @param {*} id    The clientId of the dialog-element block.\n\t * @return {boolean} closingModal\n\t */\n\tisClosingModal: ( state, id ) => {\n\t\tif ( ! id || ! state.dialogs[ id ] ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn state.dialogs[ id ].closingModal;\n\t},\n};\n\nexport const STORE_NAME = 'prc-block/dialog';\n\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tactions,\n\tselectors,\n} );\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactJSXRuntime\"];","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { useRef, useMemo } from '@wordpress/element';\nimport {\n\tBlockControls,\n\tuseBlockProps,\n\tuseInnerBlocksProps,\n\tInspectorControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport {\n\tButton,\n\tToolbarButton,\n\tToolbarGroup,\n\tPanelBody,\n\tTextControl,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './store';\nconst TEMPLATE = [\n\t[\n\t\t'prc-block/dialog-trigger',\n\t\t{\n\t\t\tlock: {\n\t\t\t\tmove: true,\n\t\t\t\tremove: false,\n\t\t\t},\n\t\t},\n\t\t[\n\t\t\t[\n\t\t\t\t'core/paragraph',\n\t\t\t\t{\n\t\t\t\t\tplaceholder: __(\n\t\t\t\t\t\t'Start typing to add Dialog trigger text…'\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t],\n\t[\n\t\t'prc-block/dialog-element',\n\t\t{\n\t\t\tlock: {\n\t\t\t\tmove: true,\n\t\t\t\tremove: true,\n\t\t\t},\n\t\t},\n\t\t[\n\t\t\t[\n\t\t\t\t'core/heading',\n\t\t\t\t{\n\t\t\t\t\tlevel: 2,\n\t\t\t\t\tplaceholder: __( 'Add a dialog label…' ),\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tbindings: {\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tsource: 'prc-block/dialog-element-label',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t],\n];\n\nexport default function Edit( { attributes, setAttributes, clientId } ) {\n\t// add dialog id attribute to the block\n\tconst { dialogId } = attributes;\n\tif ( ! dialogId ) {\n\t\tsetAttributes( { dialogId: clientId } );\n\t}\n\n\t// Get the dialog-element block from inner blocks\n\tconst { dialogElementClientId, isDialogOpen } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlock } = select( blockEditorStore );\n\t\t\tconst block = getBlock( clientId );\n\t\t\tconst dialogElementBlock = block?.innerBlocks?.find(\n\t\t\t\t( innerBlock ) => innerBlock.name === 'prc-block/dialog-element'\n\t\t\t);\n\t\t\tconst dialogElementId = dialogElementBlock?.clientId;\n\n\t\t\treturn {\n\t\t\t\tdialogElementClientId: dialogElementId,\n\t\t\t\tisDialogOpen: dialogElementId\n\t\t\t\t\t? select( STORE_NAME ).isOpen( dialogElementId )\n\t\t\t\t\t: false,\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// Get store actions\n\tconst { open, close } = useDispatch( STORE_NAME );\n\n\t// Set up a ref for the block container\n\tconst ref = useRef( null );\n\n\tconst blockProps = useBlockProps( {\n\t\tref,\n\t} );\n\n\t// We're locking down the template and allowed blocks to only allow the dialog trigger and dialog element.\n\tconst innerBlocksProps = useInnerBlocksProps( blockProps, {\n\t\ttemplate: TEMPLATE,\n\t\ttemplateLock: 'insert',\n\t} );\n\n\tconst buttonLabel = useMemo(\n\t\t() => ( isDialogOpen ? __( 'Close Dialog' ) : __( 'Edit Dialog' ) ),\n\t\t[ isDialogOpen ]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls __experimentalShareWithChildBlocks>\n\t\t\t\t<ToolbarGroup>\n\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\tlabel={ buttonLabel }\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tif ( ! dialogElementClientId ) {\n\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t'No dialog-element block found. Please add a dialog-element block.'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( isDialogOpen ) {\n\t\t\t\t\t\t\t\tconsole.log('closing');\n\t\t\t\t\t\t\t\tclose( dialogElementClientId );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.log('opening');\n\t\t\t\t\t\t\t\topen( dialogElementClientId );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ buttonLabel }\n\t\t\t\t\t</ToolbarButton>\n\t\t\t\t</ToolbarGroup>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Dialog Settings' ) }>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t\t'The dialog element requires a dialog trigger and a dialog element. You can edit the text of the trigger and the content of the dialog by clicking the \"Edit Dialog\" button below.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'Dialog ID' ) }\n\t\t\t\t\t\t\tvalue={ dialogId }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { dialogId: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t'The ID of the dialog element. This should be unique on the page.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\tif ( dialogElementClientId ) {\n\t\t\t\t\t\t\t\t\tif ( isDialogOpen ) {\n\t\t\t\t\t\t\t\t\t\tclose( dialogElementClientId );\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\topen( dialogElementClientId );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\tdisabled={ ! dialogElementClientId }\n\t\t\t\t\t\t\taccessibleWhenDisabled\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ isDialogOpen\n\t\t\t\t\t\t\t\t? __( 'Close Dialog' )\n\t\t\t\t\t\t\t\t: __( 'Edit Dialog' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<div { ...innerBlocksProps } />\n\t\t</>\n\t);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","/**\n * WordPress Dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\nexport default [\n\t{\n\t\tattributes: {\n\t\t\tdialogId: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\tdialogType: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['dialog', 'modal'],\n\t\t\t\tdefault: 'modal',\n\t\t\t},\n\t\t\tautoActivateOnRender: {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: [\n\t\t\t\t\t'fade',\n\t\t\t\t\t'pop',\n\t\t\t\t\t'bounce',\n\t\t\t\t\t'slide',\n\t\t\t\t\t'slide-up',\n\t\t\t\t\t'slide-left',\n\t\t\t\t\t'slide-right',\n\t\t\t\t\t'zoom',\n\t\t\t\t],\n\t\t\t\tdefault: 'fade',\n\t\t\t},\n\t\t\tanimationDuration: {\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 500,\n\t\t\t},\n\t\t\tautoActivationTimer: {\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: -1,\n\t\t\t},\n\t\t\tenableDeepLink: {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t},\n\t\t\tdialogSize: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['small', 'medium', 'large'],\n\t\t\t\tdefault: 'small',\n\t\t\t},\n\t\t},\n\t\tmigrate(attributes, innerBlocks) {\n\t\t\tconst {\n\t\t\t\tdialogId,\n\t\t\t\tdialogType,\n\t\t\t\tautoActivateOnRender,\n\t\t\t\tanimation,\n\t\t\t\tanimationDuration,\n\t\t\t\tautoActivationTimer,\n\t\t\t\tenableDeepLink,\n\t\t\t\tdialogSize,\n\t\t\t} = attributes;\n\n\t\t\t// Move all attributes except dialogId to the dialog-element block\n\t\t\tconst newInnerBlocks = innerBlocks.map((block) => {\n\t\t\t\tif (block.name === 'prc-block/dialog-element') {\n\t\t\t\t\treturn createBlock(\n\t\t\t\t\t\t'prc-block/dialog-element',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...block.attributes,\n\t\t\t\t\t\t\tdialogType,\n\t\t\t\t\t\t\tautoActivateOnRender,\n\t\t\t\t\t\t\tanimation,\n\t\t\t\t\t\t\tanimationDuration,\n\t\t\t\t\t\t\tautoActivationTimer,\n\t\t\t\t\t\t\tenableDeepLink,\n\t\t\t\t\t\t\tdialogSize,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tblock.innerBlocks\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn block;\n\t\t\t});\n\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tdialogId,\n\t\t\t\t},\n\t\t\t\tnewInnerBlocks,\n\t\t\t];\n\t\t},\n\t\tsave() {\n\t\t\treturn InnerBlocks.Content();\n\t\t},\n\t\tisEligible(attributes) {\n\t\t\t// Check if any of the moved attributes exist on the dialog block\n\t\t\treturn !!(\n\t\t\t\tattributes.dialogType ||\n\t\t\t\tattributes.autoActivateOnRender ||\n\t\t\t\tattributes.animation ||\n\t\t\t\tattributes.animationDuration ||\n\t\t\t\tattributes.autoActivationTimer ||\n\t\t\t\tattributes.enableDeepLink ||\n\t\t\t\tattributes.dialogSize\n\t\t\t);\n\t\t},\n\t},\n];\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { register } from '@wordpress/data';\n\n/**\n * Internal Dependencies\n */\nimport edit from './edit';\nimport save from './save';\nimport icon from './icon';\nimport deprecated from './deprecated';\nimport metadata from './block.json';\nimport { store } from './store';\n\n\nconst { name } = metadata;\n\nconst settings = {\n\ticon,\n\tedit,\n\tsave,\n\tdeprecated,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\nregister(store);\n","/**\n * External Dependencies\n */\nimport { Icon } from '@prc/icons';\n\nexport default function () {\n\treturn <Icon icon=\"window-restore\" />;\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * Save function for the Dialog block.\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function Save() {\n\treturn <InnerBlocks.Content />;\n}\n"],"names":["window","DEFAULT_STATE","id","dialogs","STORE_NAME","store","createReduxStore","reducer","state","action","type","isOpen","closingModal","newDialogs","newId","Object","keys","actions","init","destroy","open","passthroughId","close","selectors","isClosingModal","TEMPLATE","lock","move","remove","placeholder","__","level","metadata","bindings","content","source","attributes","dialogId","default","dialogType","enum","autoActivateOnRender","animation","animationDuration","autoActivationTimer","enableDeepLink","dialogSize","migrate","innerBlocks","map","block","name","createBlock","save","InnerBlocks","Content","isEligible","settings","icon","_jsx","Icon","edit","setAttributes","clientId","dialogElementClientId","isDialogOpen","useSelect","select","getBlock","blockEditorStore","dialogElementBlock","find","innerBlock","dialogElementId","useDispatch","ref","useRef","blockProps","useBlockProps","innerBlocksProps","useInnerBlocksProps","template","templateLock","buttonLabel","useMemo","_jsxs","_Fragment","children","BlockControls","__experimentalShareWithChildBlocks","ToolbarGroup","ToolbarButton","label","onClick","console","log","warn","InspectorControls","PanelBody","title","TextControl","value","onChange","help","__next40pxDefaultSize","__nextHasNoMarginBottom","Button","variant","disabled","accessibleWhenDisabled","deprecated","registerBlockType","register"],"sourceRoot":""}