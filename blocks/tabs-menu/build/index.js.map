{"version":3,"file":"index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAc,MCA7C,EAA+BA,OAAsB,cCArD,EAA+BA,OAAW,GAAe,YCczDC,EAAiB,CAAC,4BAClBC,EAAkB,CAAC,CAAC,2BAA4B,CAAC,ICfjD,EAA+BF,OAAiB,S,21BC6B9CG,KAAIA,GAAKC,EAEXC,EAAW,CAChBC,KC3Bc,WACd,OAAOC,EAAAA,EAAAA,eAACC,EAAAA,KAAI,CAACF,KAAK,uBACnB,ED0BCG,KFhBc,UAAc,WAAEC,EAAU,QAAEC,IAC1C,MAAMC,EAAmBD,EAAQ,yBAE3BE,GAAaC,EAAAA,EAAAA,eAAc,CAChCC,MAAO,CACN,eAAeC,EAAAA,EAAAA,yBAAwBN,MAInCO,GAAmBC,EAAAA,EAAAA,qBAAoBL,EAAY,CACxDM,cAAelB,EACfmB,YAAaR,EAAmB,WAAa,aAC7CS,SAAUnB,EACVoB,cAAc,IAGf,OAAOf,EAAAA,EAAAA,eAAA,UAASU,GACjB,EEACM,KEPc,UAAe,WAAEb,IAC/B,OAAOH,EAAAA,EAAAA,eAACiB,EAAAA,YAAYC,QAAO,KAC5B,IFaAC,EAAAA,EAAAA,mBAAkBvB,EAAM,IAAKC,KAAaC,G","sources":["webpack://tabs-menu/external window [\"wp\",\"blocks\"]","webpack://tabs-menu/external window \"React\"","webpack://tabs-menu/external window \"prcBlockUtils\"","webpack://tabs-menu/external window [\"wp\",\"blockEditor\"]","webpack://tabs-menu/./src/edit.jsx","webpack://tabs-menu/external window \"prcIcons\"","webpack://tabs-menu/./src/index.js","webpack://tabs-menu/./src/icon.jsx","webpack://tabs-menu/./src/save.jsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcBlockUtils\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","/**\n * External Dependencies\n */\nimport { getBlockGapSupportValue } from '@prc/block-utils';\n\n\n/**\n * WordPress Dependencies\n */\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\n/**\n * Internal Dependencies\n */\nconst ALLOWED_BLOCKS = ['prc-block/tabs-menu-item'];\nconst BLOCKS_TEMPLATE = [['prc-block/tabs-menu-item', {}]];\n\nexport default function Edit({ attributes, context }) {\n\tconst isVerticalLayout = context['prc-block/tabs/layout'];\n\n\tconst blockProps = useBlockProps({\n\t\tstyle: {\n\t\t\t'--block-gap': getBlockGapSupportValue(attributes)\n\t\t}\n\t});\n\n\tconst innerBlocksProps = useInnerBlocksProps(blockProps, {\n\t\tallowedBlocks: ALLOWED_BLOCKS,\n\t\torientation: isVerticalLayout ? 'vertical' : 'horizontal',\n\t\ttemplate: BLOCKS_TEMPLATE,\n\t\ttemplateLock: false,\n\t});\n\n\treturn <div {...innerBlocksProps} />;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\n/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor. All other files\n * get applied to the editor only.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport edit from './edit';\nimport save from './save';\nimport icon from './icon';\n\nimport metadata from './block.json';\n\nconst { name } = metadata;\n\nconst settings = {\n\ticon,\n\tedit,\n\tsave,\n};\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType(name, { ...metadata, ...settings });\n","/**\n * External Dependencies\n */\nimport { Icon } from '@prc/icons';\n\nexport default function () {\n\treturn <Icon icon=\"diagram-predecessor\" />;\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function Save( { attributes } ) {\n\treturn <InnerBlocks.Content />;\n}\n"],"names":["window","ALLOWED_BLOCKS","BLOCKS_TEMPLATE","name","metadata","settings","icon","createElement","Icon","edit","attributes","context","isVerticalLayout","blockProps","useBlockProps","style","getBlockGapSupportValue","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","template","templateLock","save","InnerBlocks","Content","registerBlockType"],"sourceRoot":""}