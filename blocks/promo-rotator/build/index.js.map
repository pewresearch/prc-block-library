{"version":3,"file":"index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAc,MCA7C,EAA+BA,OAAW,GAAe,YCAzD,EAA+BA,OAAW,GAAQ,KCmBlDC,EAAiB,CAAC,kBAAmB,kBCnBrC,EAA+BD,OAAiB,S,osBCiC9CE,KAAIA,GAAKC,EAEXC,EAAW,CAIhBC,KClCc,WACd,OAAOC,EAAAA,EAAAA,eAACC,EAAAA,KAAI,CAACF,KAAK,WACnB,EDoCCG,KFVc,UAAc,WAAEC,EAAU,SAAEC,IAC1C,MAAMC,GAAiBC,EAAAA,EAAAA,YACrBC,GAAW,EAAIA,EAAOC,EAAAA,OAAkBC,UAAUL,GAAUM,QAC7D,CAACN,IAGIO,GAAaC,EAAAA,EAAAA,kBAIb,cAAEC,GAAkBV,EACpBW,GAAmBC,EAAAA,EAAAA,qBAAoBJ,EAAY,CACxDE,cAAeA,GAAiBlB,EAChCqB,YAAa,WACbC,cAAc,EACdC,eAAgBb,EACbc,EAAAA,YAAYC,qBACZD,EAAAA,YAAYE,sBAGhB,OAAOrB,EAAAA,EAAAA,eAAA,UAASc,GACjB,EEPCQ,KEpBc,WACd,OAAOtB,EAAAA,EAAAA,eAACmB,EAAAA,YAAYI,QAAO,KAC5B,IF0BAC,EAAAA,EAAAA,mBAAkB5B,EAAM,IAAKC,KAAaC,G","sources":["webpack://promo-rotator/external window [\"wp\",\"blocks\"]","webpack://promo-rotator/external window \"React\"","webpack://promo-rotator/external window [\"wp\",\"blockEditor\"]","webpack://promo-rotator/external window [\"wp\",\"data\"]","webpack://promo-rotator/./src/Edit.jsx","webpack://promo-rotator/external window \"prcIcons\"","webpack://promo-rotator/./src/index.js","webpack://promo-rotator/./src/Icon.jsx","webpack://promo-rotator/./src/Save.jsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport {\n\tInnerBlocks,\n\tuseBlockProps,\n\tuseInnerBlocksProps,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal Dependencies\n */\n\nconst ALLOWED_BLOCKS = ['prc-block/promo', 'prc-block/card'];\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({ attributes, clientId }) {\n\tconst hasInnerBlocks = useSelect(\n\t\t(select) => 0 < select(blockEditorStore).getBlocks(clientId).length,\n\t\t[clientId],\n\t);\n\n\tconst blockProps = useBlockProps();\n\t// By defining a allowedBlocks attribute any block can now customize what inner blocks are allowed.\n\t// This gives us a good way to ensure greater template and pattern control.\n\t// By default if nothing is defined in the \"allowedBlocks\" attribute this will default to the constant ALLOWED_BLOCKS found under \"Internal Dependencies\" ^.\n\tconst { allowedBlocks } = attributes;\n\tconst innerBlocksProps = useInnerBlocksProps(blockProps, {\n\t\tallowedBlocks: allowedBlocks || ALLOWED_BLOCKS,\n\t\torientation: 'vertical',\n\t\ttemplateLock: false,\n\t\trenderAppender: hasInnerBlocks\n\t\t\t? InnerBlocks.DefaultBlockAppender\n\t\t\t: InnerBlocks.ButtonBlockAppender,\n\t});\n\n\treturn <div {...innerBlocksProps} />;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\n/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor. All other files\n * get applied to the editor only.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport Edit from './Edit';\nimport Save from './Save';\nimport Icon from './Icon';\n\nimport metadata from './block.json';\n\nconst { name } = metadata;\n\nconst settings = {\n\t/**\n\t * @see ./Icon.jsx\n\t */\n\ticon: Icon,\n\t/**\n\t * @see ./Edit.jsx\n\t */\n\tedit: Edit,\n\t/**\n\t * @see ./Save.jsx\n\t */\n\tsave: Save,\n};\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType(name, { ...metadata, ...settings });\n","/**\n * External Dependencies\n */\nimport { Icon } from '@prc/icons';\n\nexport default function () {\n\treturn <Icon icon=\"recycle\" />;\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function Save() {\n\treturn <InnerBlocks.Content />;\n}\n"],"names":["window","ALLOWED_BLOCKS","name","metadata","settings","icon","createElement","Icon","edit","attributes","clientId","hasInnerBlocks","useSelect","select","blockEditorStore","getBlocks","length","blockProps","useBlockProps","allowedBlocks","innerBlocksProps","useInnerBlocksProps","orientation","templateLock","renderAppender","InnerBlocks","DefaultBlockAppender","ButtonBlockAppender","save","Content","registerBlockType"],"sourceRoot":""}