{"version":3,"file":"index.js","mappings":"yBAAA,IAAI,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAW,GAAW,QCArD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAe,YCAzD,EAA+BA,OAAW,GAAc,WCiB5D,MAAMC,EAAW,CAAC,CAAC,YAAa,CAAC,ICjBjC,IAAI,EAA+BD,OAAiB,SC8CpD,EArCmB,CAClB,CACCE,KAAM,UACNC,WAAW,EACXC,OAAOC,EAAAA,EAAAA,IAAG,WACVC,WAAY,CACXC,WAAY,UACZC,IAAK,IACLC,IAAK,GAENC,MAAO,CAAC,WAAY,aACpBC,SAAU,QAAC,WAAEJ,GAAY,QAAK,YAAcA,CAAU,GAEvD,CACCL,KAAM,SACNE,OAAOC,EAAAA,EAAAA,IAAG,UACVC,WAAY,CACXC,WAAY,SACZC,IAAK,IACLC,IAAK,KAENC,MAAO,CAAC,WAAY,aACpBC,SAAU,QAAC,WAAEJ,GAAY,QAAK,WAAaA,CAAU,GAEtD,CACCL,KAAM,SACNE,OAAOC,EAAAA,EAAAA,IAAG,UACVC,WAAY,CACXC,WAAY,SACZC,IAAK,EACLC,IAAK,KAENC,MAAO,CAAC,WAAY,aACpBC,SAAU,QAAC,WAAEJ,GAAY,QAAK,WAAaA,CAAU,I,o2BCPvD,MAAQL,KAAIA,GAAKU,EAEXC,EAAW,CAIhBC,KCpCc,WACd,OACC,mBAAC,EAAAC,KAAI,CACJD,KAAME,EAAAA,MAAAA,eACNC,MAAO,GACPC,oBAAoB,iBAGvB,EDgCCC,KHdc,SAAc,GAAyC,IAAzC,WAAEb,EAAU,cAAEc,EAAa,SAAEC,GAAU,EACnE,MAAM,IAAEb,EAAG,IAAEC,GAAQH,EAEfgB,GAAaC,EAAAA,EAAAA,kBAKb,cAAEC,EAAa,YAAEC,GAAgBnB,EACjCoB,GAAmBC,EAAAA,EAAAA,qBACxB,CAAC,EACD,CACCH,cAAeA,IAAiB,EAChCC,YAAaA,GAAe,WAC5BG,cAAc,EACdC,SAAU5B,KAIL6B,EAAOC,IAAYC,EAAAA,EAAAA,UAAU,GAAExB,UAAYC,OAalD,OAXAwB,EAAAA,EAAAA,YAAU,KACT,IAAIC,EAAK,WAAU1B,WAAaC,MAC3BA,IACJyB,EAAK,WAAU1B,OAEXA,IACJ0B,EAAK,WAAUzB,OAEhBsB,EAASG,EAAE,GACT,CAAC1B,EAAKC,KAGR,mBAAC,EAAA0B,SAAQ,MAER,yBAASb,GACR,mBAAC,EAAAc,OAAM,CACNC,eAAe,EACfC,eAAejC,EAAAA,EAAAA,IAAI,gBAAeG,eAAiBC,cAEnD,2BAAM8B,UAAU,eACf,oDAAgC,KAAElC,EAAAA,EAAAA,IAAGyB,MAGvC,yBAASJ,IAIb,EG9BCc,KEtBc,WACd,OAAO,mBAAC,EAAAC,YAAA,QAAmB,KAC5B,EFwBCC,WAAUA,IAQXC,EAAAA,EAAAA,mBAAkBzC,EAAM,IAAKU,KAAaC,G","sources":["webpack://responsive-container-view/external window [\"wp\",\"blocks\"]","webpack://responsive-container-view/external window [\"wp\",\"element\"]","webpack://responsive-container-view/external window [\"wp\",\"i18n\"]","webpack://responsive-container-view/external window [\"wp\",\"blockEditor\"]","webpack://responsive-container-view/external window [\"wp\",\"components\"]","webpack://responsive-container-view/./src/Edit.jsx","webpack://responsive-container-view/external window \"prcIcons\"","webpack://responsive-container-view/./src/variations.js","webpack://responsive-container-view/./src/index.js","webpack://responsive-container-view/./src/Icon.jsx","webpack://responsive-container-view/./src/Save.jsx"],"sourcesContent":["var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\nimport { Notice } from '@wordpress/components';\n\n/**\n * Internal Dependencies\n */\n// import Controls from './Controls';\n\nconst TEMPLATE = [['core/html', {}]];\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({ attributes, setAttributes, clientId }) {\n\tconst { min, max } = attributes;\n\n\tconst blockProps = useBlockProps();\n\t// By defining a allowedBlocks attribute any block can now customize what inner blocks are allowed.\n\t// This gives us a good way to ensure greater template and pattern control.\n\t// By default if nothing is defined in the \"allowedBlocks\" attribute this will default to the constant ALLOWED_BLOCKS found under \"Internal Dependencies\" ^.\n\t// The same applies for \"orientation\", defaults to \"vertical\".\n\tconst { allowedBlocks, orientation } = attributes;\n\tconst innerBlocksProps = useInnerBlocksProps(\n\t\t{},\n\t\t{\n\t\t\tallowedBlocks: allowedBlocks || true,\n\t\t\torientation: orientation || 'vertical',\n\t\t\ttemplateLock: false,\n\t\t\ttemplate: TEMPLATE,\n\t\t},\n\t);\n\n\tconst [label, setLabel] = useState(`${min}px to ${max}px`);\n\n\tuseEffect(() => {\n\t\tlet l = `between ${min}px and ${max}px`;\n\t\tif (!max) {\n\t\t\tl = `minimum ${min}px`;\n\t\t}\n\t\tif (!min) {\n\t\t\tl = `maximum ${max}px`;\n\t\t}\n\t\tsetLabel(l);\n\t}, [min, max]);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{/* <Controls {...{ attributes, setAttributes, clientId }} /> */}\n\t\t\t<div {...blockProps}>\n\t\t\t\t<Notice\n\t\t\t\t\tisDismissible={false}\n\t\t\t\t\tspokenMessage={__(`Visible from ${min} pixels to ${max} pixels`)}\n\t\t\t\t>\n\t\t\t\t\t<span className=\"sans-serif\">\n\t\t\t\t\t\t<strong>Viewport Range:</strong> {__(label)}\n\t\t\t\t\t</span>\n\t\t\t\t</Notice>\n\t\t\t\t<div {...innerBlocksProps} />\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\nconst variations = [\n\t{\n\t\tname: 'desktop',\n\t\tisDefault: true,\n\t\ttitle: __('Desktop'),\n\t\tattributes: {\n\t\t\tdeviceType: 'desktop',\n\t\t\tmin: 980,\n\t\t\tmax: 0,\n\t\t},\n\t\tscope: ['inserter', 'transform'],\n\t\tisActive: ({ deviceType }) => 'desktop' === deviceType,\n\t},\n\t{\n\t\tname: 'tablet',\n\t\ttitle: __('Tablet'),\n\t\tattributes: {\n\t\t\tdeviceType: 'tablet',\n\t\t\tmin: 480,\n\t\t\tmax: 979,\n\t\t},\n\t\tscope: ['inserter', 'transform'],\n\t\tisActive: ({ deviceType }) => 'tablet' === deviceType,\n\t},\n\t{\n\t\tname: 'mobile',\n\t\ttitle: __('Mobile'),\n\t\tattributes: {\n\t\t\tdeviceType: 'mobile',\n\t\t\tmin: 0,\n\t\t\tmax: 479,\n\t\t},\n\t\tscope: ['inserter', 'transform'],\n\t\tisActive: ({ deviceType }) => 'mobile' === deviceType,\n\t},\n];\n\nexport default variations;\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\n/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor. All other files\n * get applied to the editor only.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport './editor.scss';\nimport Edit from './Edit';\nimport Save from './Save';\nimport Icon from './Icon';\nimport variations from './variations';\n\nimport metadata from './block.json';\n\nconst { name } = metadata;\n\nconst settings = {\n\t/**\n\t * @see ./Icon.jsx\n\t */\n\ticon: Icon,\n\t/**\n\t * @see ./Edit.jsx\n\t */\n\tedit: Edit,\n\t/**\n\t * @see ./Save.jsx\n\t */\n\tsave: Save,\n\t/**\n\t * @see ./variations.js\n\t */\n\tvariations,\n};\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType(name, { ...metadata, ...settings });\n","/**\n * External Dependencies\n */\nimport { icons, Icon } from '@prc/icons';\n\nexport default function() {\n\treturn(\n\t\t<Icon\n\t\t\ticon={icons.faLaptopMobile}\n\t\t\twidth={21}\n\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t/>\n\t);\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function Save() {\n\treturn <InnerBlocks.Content />;\n}\n"],"names":["window","TEMPLATE","name","isDefault","title","__","attributes","deviceType","min","max","scope","isActive","metadata","settings","icon","Icon","icons","width","preserveAspectRatio","edit","setAttributes","clientId","blockProps","useBlockProps","allowedBlocks","orientation","innerBlocksProps","useInnerBlocksProps","templateLock","template","label","setLabel","useState","useEffect","l","Fragment","Notice","isDismissible","spokenMessage","className","save","InnerBlocks","variations","registerBlockType"],"sourceRoot":""}