{"version":3,"file":"index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAc,MCA7C,GCA+BA,OAAW,GAAW,QDAtBA,OAAW,GAAe,aEezDC,EAAiB,CACtB,eACA,iBACA,YACA,aACA,eCpBK,EAA+BD,OAAiB,SCKvC,aACd,OACC,mBAAC,EAAAE,KAAI,CACJC,KAAMC,EAAAA,MAAMC,uBACZC,MAAO,GACPC,oBAAoB,iBAGvB,CCHA,SACC,CACCC,KAAM,kBACNC,OAAOC,EAAAA,EAAAA,IAAG,kBAAmB,qBAC7BC,WAAY,CACXC,UAAW,kBAEZC,YAAa,CACZ,CACC,iBACA,CACCC,YAAa,wBAIhBC,SAAU,EAAGH,iBACZA,GAAYA,EAAUI,SAAS,mBAEjC,CACCR,KAAM,iBACNC,OAAOC,EAAAA,EAAAA,IAAG,iBAAkB,qBAC5BC,WAAY,CACXC,UAAW,iBAEZC,YAAa,CACZ,CACC,iBACA,CACCC,YAAa,uBAIhBX,MAAM,mBAACD,EAAI,CAACe,QAAQ,SACpBF,SAAU,EAAGH,iBACZA,GAAYA,EAAUI,SAAS,mB,yoBCT1BR,KAAIA,GAAKU,EAEXC,EAAW,CAChBhB,KAAMD,EAINkB,KJJc,UAAc,WAC5BT,EAAU,cACVU,EAAa,QACbC,EAAO,SACPC,EAAQ,WACRC,IAEA,MAAMC,GAAaC,EAAAA,EAAAA,kBAIb,cAAEC,EAAa,YAAEC,GAAgBjB,EACjCkB,GAAmBC,EAAAA,EAAAA,qBAAoBL,EAAY,CACxDE,cAAeA,GAAiB1B,EAChC8B,cAAc,IAGf,OACC,6BAASF,GAEX,EIZCG,KCnBc,UAAe,WAAErB,IAC/B,OAAO,mBAAC,EAAAsB,YAAYC,QAAO,KAC5B,EDsBCC,WAAUA,IAQXC,EAAAA,EAAAA,mBAAmB5B,EAAM,IAAKU,KAAaC,G","sources":["webpack://flip-card-side/external window [\"wp\",\"i18n\"]","webpack://flip-card-side/external window [\"wp\",\"blocks\"]","webpack://flip-card-side/external window \"React\"","webpack://flip-card-side/external window [\"wp\",\"blockEditor\"]","webpack://flip-card-side/external window [\"wp\",\"element\"]","webpack://flip-card-side/./src/Edit.jsx","webpack://flip-card-side/external window \"prcIcons\"","webpack://flip-card-side/./src/Icon.jsx","webpack://flip-card-side/./src/variations.js","webpack://flip-card-side/./src/index.js","webpack://flip-card-side/./src/Save.jsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\n/**\n * Internal Dependencies\n */\n\nconst ALLOWED_BLOCKS = [\n\t'core/heading',\n\t'core/paragraph',\n\t'core/list',\n\t'core/image',\n\t'core/button',\n];\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param            props.context\n * @param            props.clientId\n * @param            props.isSelected\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({\n\tattributes,\n\tsetAttributes,\n\tcontext,\n\tclientId,\n\tisSelected,\n}) {\n\tconst blockProps = useBlockProps();\n\t// By defining a allowedBlocks attribute any block can now customize what inner blocks are allowed.\n\t// This gives us a good way to ensure greater template and pattern control.\n\t// By default if nothing is defined in the \"allowedBlocks\" attribute this will default to the constant ALLOWED_BLOCKS found under \"Internal Dependencies\" ^.\n\tconst { allowedBlocks, orientation } = attributes;\n\tconst innerBlocksProps = useInnerBlocksProps(blockProps, {\n\t\tallowedBlocks: allowedBlocks || ALLOWED_BLOCKS,\n\t\ttemplateLock: false,\n\t});\n\n\treturn (\n\t\t<div {...innerBlocksProps} />\n\t);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","/**\n * External Dependencies\n */\nimport { icons, Icon } from '@prc/icons';\n\nexport default function() {\n\treturn(\n\t\t<Icon\n\t\t\ticon={icons.faCreditCardFrontLight}\n\t\t\twidth={21}\n\t\t\tpreserveAspectRatio=\"xMidYMid meet\"\n\t\t/>\n\t);\n}\n","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal Dependencies\n */\nimport Icon from './Icon';\n\nexport default [\n\t{\n\t\tname: 'flip-card-front',\n\t\ttitle: __('Flip Card Front', 'prc-block-library'),\n\t\tattributes: {\n\t\t\tclassName: 'is-style-front',\n\t\t},\n\t\tinnerBlocks: [\n\t\t\t[\n\t\t\t\t'core/paragraph',\n\t\t\t\t{\n\t\t\t\t\tplaceholder: 'Flip Card Front...',\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\tisActive: ({ className }) =>\n\t\t\tclassName ? className.includes('is-style-front') : false,\n\t},\n\t{\n\t\tname: 'flip-card-back',\n\t\ttitle: __('Flip Card Back', 'prc-block-library'),\n\t\tattributes: {\n\t\t\tclassName: 'is-style-back',\n\t\t},\n\t\tinnerBlocks: [\n\t\t\t[\n\t\t\t\t'core/paragraph',\n\t\t\t\t{\n\t\t\t\t\tplaceholder: 'Flip Card Back...',\n\t\t\t\t},\n\t\t\t],\n\t\t],\n\t\ticon: <Icon variant=\"back\" />,\n\t\tisActive: ({ className }) =>\n\t\t\tclassName ? className.includes('is-style-back') : false,\n\t},\n];\n","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\n/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor. All other files\n * get applied to the editor only.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport Edit from './Edit';\nimport Save from './Save';\nimport Icon from './Icon';\nimport variations from './variations';\n\nimport metadata from './block.json';\n\nconst { name } = metadata;\n\nconst settings = {\n\ticon: Icon,\n\t/**\n\t * @see ./Edit.jsx\n\t */\n\tedit: Edit,\n\t/**\n\t * @see ./Save.jsx\n\t */\n\tsave: Save,\n\t/**\n\t * @see ./variations.js\n\t * @see https://developer.wordpress.org/block-editor/developers/block-api/block-variations/\n\t */\n\tvariations,\n};\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType( name, { ...metadata, ...settings } );\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function Save( { attributes } ) {\n\treturn <InnerBlocks.Content />;\n}\n"],"names":["window","ALLOWED_BLOCKS","Icon","icon","icons","faCreditCardFrontLight","width","preserveAspectRatio","name","title","__","attributes","className","innerBlocks","placeholder","isActive","includes","variant","metadata","settings","edit","setAttributes","context","clientId","isSelected","blockProps","useBlockProps","allowedBlocks","orientation","innerBlocksProps","useInnerBlocksProps","templateLock","save","InnerBlocks","Content","variations","registerBlockType"],"sourceRoot":""}