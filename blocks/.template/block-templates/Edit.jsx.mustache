{{^isCoreBlockVariant}}
/**
 * External Dependencies
 */

/**
 * WordPress Dependencies
 */
import { __ } from '@wordpress/i18n';
import { Fragment } from '@wordpress/element';
import { useBlockProps, RichText {{^isStaticVariant}}, useInnerBlocksProps, InnerBlocks{{/isStaticVariant}} {{#isSyncedEntityVariant}}, __experimentalRecursionProvider as RecursionProvider,__experimentalUseHasRecursion as useHasRecursion, Warning{{/isSyncedEntityVariant}} } from '@wordpress/block-editor';
{{#isSyncedEntityVariant}}
import { withNotices } from '@wordpress/components';
import { useEntityBlockEditor, useEntityRecord } from '@wordpress/core-data';
{{/isSyncedEntityVariant}}

/**
 * Internal Dependencies
 */
import Controls from './controls';
{{#isSyncedEntityVariant}}
import Placeholder from './placeholder';
import { POST_TYPE } from './constants';
{{/isSyncedEntityVariant}}

const ALLOWED_BLOCKS = ['core/group', 'core/paragraph'];

{{#isSyncedEntityVariant}}
/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 * For a "Synced Entity" block, this is where we'll handle the logic for
 * rendering the block based on whether or not the entity exists. As well as handle
 * the logic and functionality for rendering the contents of the entity as innerblocks.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @param {Object}   props               Properties passed to the function.
 * @param {Object}   props.attributes    Available block attributes.
 * @param {Function} props.setAttributes Function that updates individual attributes.
 * @param {string}   props.clientId      Unique ID of the block.
 * @param {Object}   props.noticeOperations Object with operations for managing notices.
 * @param {Object}   props.noticeUI      Object with operations for displaying notices.
 *
 * @return {WPElement} Element to render.
 */
function SyncedEntityEdit({
	attributes,
	setAttributes,
	clientId,
	noticeOperations,
	noticeUI,
}) {
	const { ref } = attributes;
	const isNew = !ref;
	const hasAlreadyRendered = useHasRecursion(ref);
	const { record, hasResolved } = useEntityRecord('postType', POST_TYPE, ref);
	const isResolving = !hasResolved;
	const isMissing = hasResolved && !record && !isNew;

	/**
	 * The useEntityBlockEditor hook handles the logic for
	 * rendering the contents of the entity as innerblocks. It returns an array
	 * of blocks, an onInput callback, and an onChange callback that will be used by
	 * useInnerBlocksProps to render blocks and control their
	 *
	 *
	 * @param {string}   entityName          The name of the entity.
	 * @param {string}   postType            The type of the entity. "post type" or in the case of taxonomies "taxonomy type".
	 * @param {Object}   options             Options object.
	 *
	 */
	const [blocks, onInput, onChange] = useEntityBlockEditor(
		'postType',
		POST_TYPE,
		{ id: ref }
	);

	const blockProps = useBlockProps();

	const innerBlocksProps = useInnerBlocksProps(blockProps, {
		value: blocks,
		onInput,
		onChange,
		allowedBlocks: ALLOWED_BLOCKS,
		renderAppender: blocks?.length
			? undefined
			: InnerBlocks.ButtonBlockAppender,
	});

	if (hasAlreadyRendered) {
		return (
			<div {...blockProps}>
				<Warning>
					{__(`${POST_TYPE} cannot be rendered inside itself.`)}
				</Warning>
			</div>
		);
	}

	if (isMissing) {
		return (
			<div {...blockProps}>
				<Warning>
					{__(` ${POST_TYPE}as been deleted or is unavailable.`)}
				</Warning>
			</div>
		);
	}

	if (isResolving || isNew) {
		return (
			<div {...blockProps}>
				<Placeholder
					{...{
						attributes,
						setAttributes,
						clientId,
						isResolving,
						isNew,
					}}
				/>
			</div>
		);
	}

	return (
		<RecursionProvider uniqueId={ref}>
			<Controls
				{...{
					attributes,
					clientId,
					blocks,
					postType: POST_TYPE,
				}}
			/>
			<div {...innerBlocksProps} />
		</RecursionProvider>
	);
}

/**
 * Wraps the SyncedEntityEdit component with the withNotices higher order component.
 * This allows us to use the noticeOperations and noticeUI objects to display notices.
 *
 * @see https://developer.wordpress.org/block-editor/packages/packages-notices/
 */
export default withNotices(SyncedEntityEdit);
{{/isSyncedEntityVariant}}
{{^isSyncedEntityVariant}}

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @param {Object}   props               Properties passed to the function.
 * @param {Object}   props.attributes    Available block attributes.
 * @param {Function} props.setAttributes Function that updates individual attributes.
 * @param {Object}   props.context       Context object with the block's context values.
 * @param {string}   props.clientId      Unique ID of the block.
 * @param {boolean}  props.isSelected    Whether or not the block is currently selected.
 *
 * @return {WPElement} Element to render.
 */
export default function Edit({ attributes, setAttributes, context, clientId, isSelected }) {
	const blockProps = useBlockProps();
	{{^isStaticVariant}}
	/**
	* By defining a allowedBlocks attribute any block can now customize what inner blocks are allowed.
	* This gives us a good way to ensure greater template and pattern control.
	* By default if nothing is defined in the "allowedBlocks" attribute this will default to the constant,
	* ALLOWED_BLOCKS found under "Internal Dependencies" ^.
	*
	* The same applies for "orientation", defaults to "vertical".
	*
	* This behavior is being adopted in Core currently, so it's a good idea to get used to it.
	*/
	const { allowedBlocks, orientation } = attributes;
	const innerBlocksProps = useInnerBlocksProps(blockProps, {
		allowedBlocks: allowedBlocks ? allowedBlocks : ALLOWED_BLOCKS,
		orientation: orientation ? orientation : 'vertical',
	});

	return (
		<Fragment>
			<Controls {...{attributes, setAttributes, context: false}}/>
			<div { ...innerBlocksProps }/>
		</Fragment>
	);
	{{/isStaticVariant}}
	{{#isStaticVariant}}
	return (
		<Fragment>
			<Controls {...{attributes, setAttributes, context: false}}/>
			<div { ...blockProps }>
				<p>Your block content, and possibly some controls go here.</p>
			</div>
		</Fragment>
	);
	{{/isStaticVariant}}
}
{{/isSyncedEntityVariant}}
{{/isCoreBlockVariant}}
