<?php
namespace PRC\Platform\Blocks;

/**
 * Block Name:        {{title}}
{{#description}}
 * Description:       {{description}}
{{/description}}
 * Version:           {{version}}
 * Requires at least: 6.1
 * Requires PHP:      7.0
{{#author}}
 * Author:            {{author}}
{{/author}}
 *
 * @package           {{namespace}}
 */

class {{slugSnakeCase}} {
	public $block_library_version;
	public $active_theme;

	{{^isCoreBlockVariant}}
	public static $version = '{{version}}';
	public static $dir = __DIR__;

	public function __construct( $block_library_version, $active_theme ) {
		$this->block_library_version = $block_library_version ? $block_library_version : false;
		$this->active_theme = $active_theme ? $active_theme : false;
	}
	{{#isDynamicVariant}}
	public function render_block_callback( $attributes, $content, $block ) {
		$wrapper_attributes = get_block_wrapper_attributes();

		return wp_sprintf(
			'<div %1$s>%2$s</div>',
			$wrapper_attributes,
			$content
		);
	}
	{{/isDynamicVariant}}

	/**
	* Registers the block using the metadata loaded from the `block.json` file.
	* Behind the scenes, it registers also all assets so they can be enqueued
	* through the block editor in the corresponding context.
	*
	* @see https://developer.wordpress.org/reference/functions/register_block_type/
	*/
	public function block_init() {
		{{^isDynamicVariant}}
		register_block_type( self::$dir . '/build' );
		{{/isDynamicVariant}}
		{{#isDynamicVariant}}
		register_block_type(
			self::$dir . '/build',
			array(
				'render_callback' => array( $this, 'render_block_callback' ),
			)
		);
		{{/isDynamicVariant}}
	}
	{{/isCoreBlockVariant}}

	{{#isCoreBlockVariant}}
	/**
	* @TODO Search and replace {coreBlockChangeMyName} for your block name, e.g. "core/group".
	*/
	public static $block_name = {coreBlockChangeMyName};
	public static $block_json = null;
	public static $view_style_handle = null;
	public static $editor_script_handle = null;

	public function __construct($init = false) {
		if ( true === $init ) {
			$block_json_file = PRC_BLOCK_LIBRARY_DIR . '/blocks/{{slug}}/build/block.json';
			self::$block_json = wp_json_file_decode( $block_json_file, array( 'associative' => true ) );
			self::$block_json['file'] = wp_normalize_path( realpath( $block_json_file ) );

			add_action( 'init', array($this, 'init_assets') );
			add_action( 'enqueue_block_editor_assets', array($this, 'register_editor_assets') );
			add_filter( 'block_type_metadata', array( $this, 'add_attributes' ), 100, 1 );
			add_filter( 'block_type_metadata_settings', array( $this, 'add_settings' ), 100, 2 );
			add_filter( 'render_block', array( $this, 'render' ), 10, 2 );
		}
	}

	public function init_assets() {
		self::$editor_script_handle = register_block_script_handle( self::$block_json, 'editorScript' );
		self::$view_style_handle    = register_block_style_handle( self::$block_json, 'style' );
	}


	public function register_editor_assets() {
		wp_enqueue_script( self::$editor_script_handle );
	}

	/**
	* Register additional attributes for the {coreBlockChangeMyName} block.
	* @param mixed $metadata
	* @return mixed
	*/
	public function add_attributes( $metadata ) {
		if ( self::$block_name !== $metadata['name'] ) {
			return $metadata;
		}

		if ( ! array_key_exists( 'isSticky', $metadata['attributes'] ) ) {
			$metadata['attributes']['myNewAttribute'] = array(
				'type'    => 'boolean',
				'default' => false,
			);
		}

		return $metadata;
	}

	/**
	* Register additional settings, like context, for the {coreBlockChangeMyName} block.
	* @param mixed $settings
	* @param mixed $metadata
	* @return mixed
	*/
	public function add_settings(array $settings, array $metadata) {
		if ( self::$block_name === $metadata['name'] ) {
			$settings['provides_context'] = array_merge(
				array_key_exists('provides_context', $settings) ? $settings['provides_context'] : array(),
				array(
					'core/{{slug}}}/myNewAttribute' => 'myNewAttribute',
				)
			);
		}
		return $settings;
	}

	/**
	* Render the {coreBlockChangeMyName} block
	* @param string $block_content
	* @param mixed $block
	* @return mixed
	*/
	public function render( $block_content, $block ) {
		if ( self::$block_name !== $block['blockName'] || is_admin() ) {
			return $block_content;
		}

		$my_new_attribute = is_array($block['attrs']) && array_key_exists('isSticky', $block['attrs']) ? $block['attrs']['isSticky'] : false;

		if ( $my_new_attribute ) {
			wp_enqueue_script( self::$view_script_handle );
			wp_enqueue_style( self::$view_style_handle );
		}

		// A central point that other plugins can use to affect content without affecting asset loading for block's actual content.
		$block_content = apply_filters( 'prc_{{slug}}_block_content', $block_content, $block );

		// Everything below here is an example, you do not have to wrap your core block.
		// You can use WP_HTML_Tag_Processor to modify the markup or override entirely depending on your use case.
		if ( $my_new_attribute ) {
			$block_content = wp_sprintf(
				'<div class="prc-example-block">%s</div>',
				$block_content
			);
		}

		return $block_content;
	}

	{{/isCoreBlockVariant}}
}
