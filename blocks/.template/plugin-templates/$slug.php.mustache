<?php
namespace PRC\Platform\Blocks;

/**
 * Block Name:        {{title}}
{{#description}}
 * Description:       {{description}}
{{/description}}
 * Requires at least: 6.4
 * Requires PHP:      8.1
{{#author}}
 * Author:            {{author}}
{{/author}}
 *
 * @package           {{namespace}}
 */

class {{namespacePascalCase}} {
	public static $block_json = null;
	public static $version;
	public static $block_name;
	{{^isCoreBlockVariant}}
	public static $dir = __DIR__;

	public function __construct($loader) {
		$block_json_file = PRC_BLOCK_LIBRARY_DIR . '/blocks/{{slug}}/build/block.json';
		self::$block_json = \wp_json_file_decode( $block_json_file, array( 'associative' => true ) );
		self::$block_json['file'] = wp_normalize_path( realpath( $block_json_file ) );
		self::$version = self::$block_json['version'];
		self::$block_name = self::$block_json['name'];
		$this->init($loader);
	}

	public function init($loader = null) {
		if ( null !== $loader ) {
			$loader->add_action('init', $this, 'block_init');
		}
	}

	{{#isDynamicVariant}}
	/**
	* Render the block
	* @param array $attributes Block attributes
	* @param string $content Block content
	* @param array $block WP_Block object
	* @return string
	*/
	public function render_block_callback( $attributes, $content, $block ) {
		$wrapper_attributes = get_block_wrapper_attributes();

		return wp_sprintf(
			'<div %1$s>%2$s</div>',
			$wrapper_attributes,
			$content
		);
	}
	{{/isDynamicVariant}}

	/**
	* Registers the block using the metadata loaded from the `block.json` file.
	* Behind the scenes, it registers also all assets so they can be enqueued
	* through the block editor in the corresponding context.
	* @hook init
	*
	* @see https://developer.wordpress.org/reference/functions/register_block_type/
	*/
	public function block_init() {
		{{^isDynamicVariant}}
		register_block_type( self::$dir . '/build' );
		{{/isDynamicVariant}}
		{{#isDynamicVariant}}
		register_block_type(
			self::$dir . '/build',
			array(
				'render_callback' => array( $this, 'render_block_callback' ),
			)
		);
		{{/isDynamicVariant}}
	}
	{{/isCoreBlockVariant}}

	{{#isCoreBlockVariant}}
	/**
	* @TODO Search and replace {coreBlockChangeMyName} for your block name, e.g. "core/group".
	*/
	public static $view_style_handle = null;
	public static $editor_script_handle = null;

	public function __construct($loader) {
		$block_json_file = PRC_BLOCK_LIBRARY_DIR . '/blocks/{{slug}}/build/block.json';
		self::$block_json = \wp_json_file_decode( $block_json_file, array( 'associative' => true ) );
		self::$block_json['file'] = wp_normalize_path( realpath( $block_json_file ) );
		self::$version = self::$block_json['version'];
		self::$block_name = self::$block_json['name'];
		$this->init($loader);
	}

	public function init($loader = null) {
		if ( null !== $loader ) {
			$loader->add_action('init', $this, 'init');
			$loader->add_action('enqueue_block_editor_assets', $this, 'register_editor_assets');
			$loader->add_action('enqueue_block_assets', $this, 'register_style_assets');
			$loader->add_filter('block_type_metadata', $this, 'add_attributes');
			$loader->add_filter('block_type_metadata_settings', $this, 'add_settings', 10, 2);
			$loader->add_filter('render_block', $this, 'render', 10, 2);
		}
	}

	/**
	* Register the block's assets.
	* @hook init
	*/
	public function init() {
		self::$editor_script_handle = register_block_script_handle( self::$block_json, 'editorScript' );
		self::$view_style_handle    = register_block_style_handle( self::$block_json, 'style' );
	}

	/**
	* Register the block's editor assets.
	* @hook enqueue_block_editor_assets
	*/
	public function register_editor_assets() {
		wp_enqueue_script( self::$editor_script_handle );
	}

	/**
	* Register the block's style assets.
	* @hook enqueue_block_assets
	*/
	public function register_style_assets() {
		wp_enqueue_script( self::$editor_script_handle );
	}

	/**
	* Register additional attributes for the {coreBlockChangeMyName} block.
	*
	* In the example we're adding a simple new attribute that is a boolean with a default value of false.
	*
	* @hook block_type_metadata
	* @param mixed $metadata
	* @return mixed
	*/
	public function add_attributes( $metadata ) {
		if ( self::$block_name !== $metadata['name'] ) {
			return $metadata;
		}

		if ( ! array_key_exists( 'isSticky', $metadata['attributes'] ) ) {
			$metadata['attributes']['myNewAttribute'] = array(
				'type'    => 'boolean',
				'default' => false,
			);
		}

		return $metadata;
	}

	/**
	* Register additional settings, like context, for the {coreBlockChangeMyName} block.
	*
	* In the example we're providing context for all innerblocks with the myNewAttribute attribute that we set in the add_attributes method above.
	*
	* @hook block_type_metadata_settings
	* @param mixed $settings
	* @param mixed $metadata
	* @return mixed
	*/
	public function add_settings(array $settings, array $metadata) {
		if ( self::$block_name === $metadata['name'] ) {
			$settings['provides_context'] = array_merge(
				array_key_exists('provides_context', $settings) ? $settings['provides_context'] : array(),
				array(
					'core/{{slug}}}/myNewAttribute' => 'myNewAttribute',
				)
			);
		}
		return $settings;
	}

	/**
	* Render the {coreBlockChangeMyName} block
	*
	* In the example we're adding enqueueing the view script and style if the myNewAttribute attribute is set to true and modifying the block markup, otherwise the block loads normally.
	* You should maintain the robust attributes check in your core block modification as other plugins may be modifying core block attributes as well. Always check for the block name and always return $block_content if you are not modifying it.
	*
	* @hook render_block
	* @param string $block_content
	* @param mixed $block
	* @return mixed
	*/
	public function render( $block_content, $block ) {
		if ( self::$block_name !== $block['blockName'] || is_admin() ) {
			return $block_content;
		}

		$my_new_attribute = is_array($block['attrs']) && array_key_exists('isSticky', $block['attrs']) ? $block['attrs']['isSticky'] : false;

		if ( $my_new_attribute ) {
			wp_enqueue_script( self::$view_script_handle );
			wp_enqueue_style( self::$view_style_handle );
		}

		// Everything below here is an example, you do not have to wrap your core block.
		// You can use WP_HTML_Tag_Processor to modify the markup or override entirely depending on your use case.
		if ( $my_new_attribute ) {
			$block_content = wp_sprintf(
				'<div class="prc-example-block">%s</div>',
				$block_content
			);
		}

		return $block_content;
	}

	{{/isCoreBlockVariant}}
}
