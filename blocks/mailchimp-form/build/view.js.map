{"version":3,"file":"view.js","mappings":"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","sources":["webpack://mailchimp-form/webpack/bootstrap","webpack://mailchimp-form/webpack/runtime/define property getters","webpack://mailchimp-form/webpack/runtime/hasOwnProperty shorthand","webpack://mailchimp-form/external module \"@wordpress/interactivity\"","webpack://mailchimp-form/./src/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-form';\nconst ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nfunction submitHandler({\n\temailAddress,\n\tcaptchaToken = false,\n\tinterest = false,\n\tNONCE = false,\n}) {\n\tconsole.log('submitHandler', window.wp.url, window.wp.apiFetch);\n\tconst { apiFetch } = window.wp;\n\tconst { isURL, buildQueryString } = window.wp.url;\n\n\tif (!captchaToken) {\n\t\treturn new Error(\n\t\t\t\"We couldn't verify you're not a robot ðŸ¤–. Please try again.\"\n\t\t);\n\t}\n\n\tconst email = emailAddress;\n\n\tconst url = document.URL;\n\tif (!isURL(url)) {\n\t\treturn new Error('Invalid url', url);\n\t}\n\n\tconst path = buildQueryString({\n\t\temail,\n\t\tcaptcha_token: captchaToken,\n\t\tinterests: interest,\n\t\tapi_key: 'mailchimp-form',\n\t\torigin_url: url,\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\t\tapiFetch({\n\t\t\tpath: `${ENDPOINT}/?${path}`,\n\t\t\tmethod: 'POST',\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log('RESPONSE:', response);\n\t\t\t\tif (response.success) {\n\t\t\t\t\tresolve(response);\n\t\t\t\t} else {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\treject(e);\n\t\t\t});\n\t});\n}\n\nconst { state } = store('prc-block/mailchimp-form', {\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst { value } = event.target;\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\t// Store the value in the global state where we store all primitve inputs.\n\t\t\tstate[id].value = value;\n\t\t\t// Also, store the value in this block's context so we can use it in the submitHandler.\n\t\t\tcontext.emailAddress = state[id].value;\n\t\t},\n\t\tonButtonClick: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id } = ref;\n\t\t\tcontext.captchaHidden = false;\n\t\t},\n\t\tonCheckboxMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-form', 'onCheckboxMouseEnter');\n\t\t},\n\t\tonButtonMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-form', 'onButtonMouseEnter');\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonInit: () => {\n\t\t\t// Get the prc-block/mailchimp-form element\n\t\t\tconst { ref } = getElement();\n\t\t\t// Get the prc-block/mailchimp-form context\n\t\t\tconst context = getContext();\n\t\t\t// Look for the input element inside the prc-block/mailchimp-form element\n\t\t\tconst input = ref.querySelector(\n\t\t\t\t'input.wp-block-prc-block-form-input-text'\n\t\t\t);\n\t\t\t// Store the ID of the input element in the prc-block/mailchimp-form context so it's aware of it's own components.\n\t\t\tif (input?.id) {\n\t\t\t\tcontext.inputId = input?.id;\n\t\t\t}\n\n\t\t\t// Do the same for the button.\n\t\t\tconst button = ref.querySelector('.wp-element-button');\n\t\t\tif (button?.id) {\n\t\t\t\tcontext.buttonId = button?.id;\n\t\t\t}\n\t\t\tconsole.log('prc-block/mailchimp-form -> onInit', context);\n\t\t},\n\t\t// When the input value changes, watch for an email address and enable/disable the button\n\t\tonInputChange: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { emailAddress, buttonId } = context;\n\t\t\t// check if value is an email address, if it is then enable the button, otherwise disable the button.\n\t\t\tif (emailAddress && emailAddress.includes('@')) {\n\t\t\t\tstate[buttonId].isDisabled = false;\n\t\t\t} else {\n\t\t\t\tstate[buttonId].isDisabled = true;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the user clicks the button to show the captcha. When the captcha is shown, hide the form elements; when the captcha is hidden, show the form elements.\n\t\t */\n\t\tonCaptchaDisplayHideFormElements: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { captchaHidden, inputId, buttonId } = context;\n\t\t\tif (false === captchaHidden) {\n\t\t\t\tstate[inputId].isHidden = true;\n\t\t\t\tstate[buttonId].isHidden = true;\n\t\t\t}\n\t\t\tif (true === captchaHidden) {\n\t\t\t\tstate[inputId].isHidden = false;\n\t\t\t\tstate[buttonId].isHidden = false;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the captcha has verified the user is not a robot and hides the captcha.\n\t\t */\n\t\tonCaptchaVerifyHideCaptcha: () => {\n\t\t\tconst context = getContext();\n\t\t\tif (false !== context.captchaToken) {\n\t\t\t\tconsole.log('onCaptchaVerifyHideCaptcha', context);\n\t\t\t\tcontext.captchaHidden = true;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * This is the callback that runs once the captcha has verified the user is not a robot and submits the form and subscribes the user to the designated interest.\n\t\t */\n\t\tonCaptchaVerifyThenSubscribe: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst {\n\t\t\t\tcaptchaToken,\n\t\t\t\tinputId,\n\t\t\t\tbuttonId,\n\t\t\t\temailAddress,\n\t\t\t\tinterest,\n\t\t\t\tNONCE,\n\t\t\t} = context;\n\n\t\t\tif (false !== captchaToken) {\n\t\t\t\tconsole.log('onCaptchaVerifyThenSubscribe', context);\n\t\t\t\tstate[buttonId].text = 'Subscribing...';\n\n\t\t\t\tsubmitHandler({\n\t\t\t\t\temailAddress,\n\t\t\t\t\tinterest,\n\t\t\t\t\tcaptchaToken,\n\t\t\t\t\tNONCE,\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tconsole.log('SUCCESS', response);\n\t\t\t\t\t\tcontext.isSuccess = true;\n\t\t\t\t\t\t// context.captchaToken = false;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tconsole.error('ERROR', e);\n\t\t\t\t\t\tcontext.isError = true;\n\t\t\t\t\t\t// context.captchaToken = false;\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isSuccess, buttonId, inputId } = context;\n\t\t\t// We explicitly check for null because we want to know if it's true or false, which only is set after the submitHandler runs.\n\t\t\tif (null !== isSuccess) {\n\t\t\t\tstate[inputId].isSuccess = isSuccess;\n\t\t\t\tstate[buttonId].isSuccess = isSuccess;\n\t\t\t\tif (true === isSuccess) {\n\t\t\t\t\tstate[buttonId].text = 'Success';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { isError, buttonId, inputId } = context;\n\t\t\tif (null !== isError) {\n\t\t\t\tstate[inputId].isError = isError;\n\t\t\t\tstate[buttonId].isError = isError;\n\t\t\t\tif (true === isError) {\n\t\t\t\t\tstate[buttonId].text = 'Error';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","actions","onInputChange","event","value","target","context","getContext","ref","getElement","id","emailAddress","onButtonClick","captchaHidden","onCheckboxMouseEnter","console","log","onButtonMouseEnter","callbacks","onInit","input","querySelector","inputId","button","buttonId","includes","isDisabled","onCaptchaDisplayHideFormElements","isHidden","onCaptchaVerifyHideCaptcha","captchaToken","onCaptchaVerifyThenSubscribe","interest","NONCE","text","window","wp","url","apiFetch","isURL","buildQueryString","Error","email","document","URL","path","captcha_token","interests","api_key","origin_url","Promise","resolve","reject","use","createNonceMiddleware","method","then","response","success","catch","e","submitHandler","isSuccess","error","isError","onSuccess","onError"],"sourceRoot":""}