{"version":3,"file":"view.js","mappings":"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","sources":["webpack://mailchimp-select/webpack/bootstrap","webpack://mailchimp-select/webpack/runtime/define property getters","webpack://mailchimp-select/webpack/runtime/hasOwnProperty shorthand","webpack://mailchimp-select/external module \"@wordpress/interactivity\"","webpack://mailchimp-select/./src/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getElement, getContext } from \"@wordpress/interactivity\";\n\n/**\n * Internal Dependencies\n */\nconst NAMESPACE = 'prc-block/mailchimp-select';\nconst ENDPOINT = '/prc-api/v3/mailchimp/subscribe';\n\nconst {state} = store( 'prc-block/mailchimp-select', {\n\tstate: {},\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst {value} = event.target;\n\t\t\tconst context = getContext();\n\t\t\tconst {ref} = getElement();\n\t\t\tconst {id} = ref;\n\t\t\t// Store the value in the global state where we store all primitve inputs.\n\t\t\tstate[id].value = value;\n\t\t\t// Also, store the value in this block's context so we can use it in the submitHandler.\n\t\t\tcontext.emailAddress = state[id].value;\n\t\t},\n\t\tonButtonClick: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst {ref} = getElement();\n\t\t\tconst {id} = ref;\n\t\t\tcontext.captchaHidden = false;\n\t\t},\n\t\tonCheckboxClick: (event) => {\n\t\t\tif ( event.target.tagName === 'LABEL' ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tconst context = getContext();\n\t\t\tconst {ref} = getElement();\n\t\t\tconst input = ref.querySelector('input');\n\t\t\tconst {id} = input;\n\t\t\tconst {checked, value, type} = state[id];\n\n\t\t\tstate[id].checked = !checked;\n\n\t\t\tconst index = context.interests.indexOf(value);\n\t\t\tif (index > -1) {\n\t\t\t\tcontext.interests.splice(index, 1);\n\t\t\t} else {\n\t\t\t\tcontext.interests.push(value);\n\t\t\t}\n\n\t\t\tconsole.log('onCheckboxClick', ref, state, id, context);\n\t\t},\n\t\tonCheckboxMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-select', 'onCheckboxMouseEnter');\n\t\t},\n\t\tonButtonMouseEnter: () => {\n\t\t\tconsole.log('prc-block/mailchimp-select', 'onButtonMouseEnter');\n\t\t}\n\t},\n\tcallbacks: {\n\t\tonInit: () => {\n\t\t\tconst {ref} = getElement();\n\t\t\tconst context = getContext();\n\n\t\t\tconst input = ref.querySelector('input.wp-block-prc-block-form-input-text');\n\t\t\tif (input?.id) {\n\t\t\t\tcontext.inputId = input?.id;\n\t\t\t}\n\t\t\tconst button = ref.querySelector('.wp-element-button');\n\t\t\tif (button?.id) {\n\t\t\t\tcontext.buttonId = button?.id;\n\t\t\t}\n\t\t\tconsole.log(\"prc-block/mailchimp-select -> onInit\", context);\n\t\t},\n\t\tonInputChange: () => {\n\t\t\t// An exercise in how concise can we make this function.\n\t\t\tconst {emailAddress, buttonId} = getContext();\n\t\t\tstate[buttonId].isDisabled = emailAddress && emailAddress.includes('@') ? false : true;\n\t\t},\n\t\t// This is the callback that runs once the captcha has verified the user is not a robot.\n\t\tonCaptchaVerify: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { NONCE, captchaToken, captchaHidden } = context;\n\t\t\tconst isCaptchaVisible = !captchaHidden;\n\n\t\t\tif (!isCaptchaVisible) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!captchaToken) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconsole.log(\"onCaptchaVerify\", context);\n\n\t\t\tconst apiFetch = window.wp.apiFetch;\n\t\t\tconst { isURL, buildQueryString } = window.wp.url;\n\n\t\t\tconst url = document.URL;\n\n\t\t\tif (!isURL(url)) {\n\t\t\t\treturn new Error('Invalid url', url);\n\t\t\t}\n\t\t\tapiFetch.use(apiFetch.createNonceMiddleware(NONCE));\n\n\t\t\tapiFetch({\n\t\t\t\tpath: ENDPOINT,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\temail: context.emailAddress,\n\t\t\t\t\tcaptcha_token: captchaToken,\n\t\t\t\t\tinterests: context?.interests.join(','),\n\t\t\t\t\tapi_key: 'mailchimp-select',\n\t\t\t\t\torigin_url: url,\n\t\t\t\t},\n\t\t\t}).then((response) => {\n\t\t\t\tcontext.isSuccess = true;\n\t\t\t\tconsole.log(\"SUCCESS\", response, context);\n\t\t\t}).catch((e) => {\n\t\t\t\tcontext.isError = true;\n\t\t\t\tconsole.error(\"ERROR\", e, context);\n\t\t\t});\n\t\t},\n\t\tonSuccess: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst {isSuccess, buttonId, inputId} = context;\n\t\t\tif ( null !== isSuccess ) {\n\t\t\t\tstate[inputId].isSuccess = isSuccess;\n\t\t\t\tstate[buttonId].isSuccess = isSuccess;\n\t\t\t\tif ( true === isSuccess ) {\n\t\t\t\t\tstate[buttonId].text = 'Success';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonError: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst {isError, buttonId, inputId} = context;\n\t\t\tif ( null !== isError ) {\n\t\t\t\tstate[inputId].isError = isError;\n\t\t\t\tstate[buttonId].isError = isError;\n\t\t\t\tif ( true === isError ) {\n\t\t\t\t\tstate[buttonId].text = 'Error';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n} );\n\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","actions","onInputChange","event","value","target","context","getContext","ref","getElement","id","emailAddress","onButtonClick","captchaHidden","onCheckboxClick","tagName","preventDefault","input","querySelector","checked","type","index","interests","indexOf","splice","push","console","log","onCheckboxMouseEnter","onButtonMouseEnter","callbacks","onInit","inputId","button","buttonId","isDisabled","includes","onCaptchaVerify","NONCE","captchaToken","apiFetch","window","wp","isURL","buildQueryString","url","document","URL","Error","use","createNonceMiddleware","path","method","data","email","captcha_token","join","api_key","origin_url","then","response","isSuccess","catch","e","isError","error","onSuccess","text","onError"],"sourceRoot":""}