{"version":3,"file":"view.js","mappings":"2CACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,ICIlF,MAAM,GAJGI,EAI8B,CAAE,WAAgB,IAAOC,EAAwE,WAAG,WAAgB,IAAOA,EAAwE,WAAG,MAAW,IAAOA,EAAmE,OAH7TC,EAAI,CAAC,EAAGhB,EAAoBiB,EAAED,EAAGF,GAAWE,GADzC,IAACF,EACJE,EC+BL,MAAM,MAAEE,IAAUC,EAAAA,EAAAA,OAAM,gCAAiC,CACxDC,QAAS,CACRC,cAAgBC,IACf,MAAMC,GAAUC,EAAAA,EAAAA,eACV,IAAEC,IAAQC,EAAAA,EAAAA,eACV,GAAEC,EAAE,KAAEC,GAASH,GACf,MAAEI,GAAUP,EAAMQ,QAClB,gBAAEC,EAAe,oBAAEC,GAAwBT,EAGjD,GADAL,EAAMS,GAAIE,MAAQA,EACd,oBAAsBD,EACzBL,EAAQU,kBAAoBJ,EAC5BN,EAAQW,cAAgBX,EAAQM,QAAUA,MACpC,CACN,GAAIE,EAAiB,CACpB,MAAMI,EAzBH,CACNC,aAhBoB,QAAQC,KAFCC,EA0C0BT,GAvBvDU,aAfoB,QAAQF,KAAKC,GAgBjCE,UAdiB,KAAKH,KAAKC,GAe3BG,oBAb2B,wCAAwCJ,KACnEC,GAaAI,UAViBJ,EAASK,QAAU,GAWpCC,uBARA,oDAAoDP,KAAKC,IA6BhDO,EAAsBxC,OAAOyC,OAClCX,GACCY,OAAOC,IAAsB,IAAXA,IAEpB9B,EAAMc,GAAqBiB,YACzBJ,EAEFxC,OAAO6C,KAAKf,GAAuBgB,SAAShD,IAC3C,MAAMiD,EAAQ7B,EAAQ8B,eAAeC,WACnCC,GAAcA,EAAU5B,KAAOxB,IAE3BoD,EAAYhC,EAAQ8B,eAAeD,GACzCG,EAAUC,IAAMrB,EAAsBhC,GACtCoB,EAAQ8B,eAAeD,GAASG,CAAS,GAE3C,CACAhC,EAAQM,MAAQA,CACjB,CA7DH,IAA+BS,CA6D5B,GAGFmB,UAAW,CACVC,cAAeA,KACd,MAAMnC,GAAUC,EAAAA,EAAAA,eACV,MAAEK,EAAK,gBAAE8B,EAAe,gBAAE5B,EAAe,cAAEG,GAChDX,EACD,GAAIM,EAAO,CACV,MAAM,QAAET,IAAYD,EAAAA,EAAAA,OAAMwC,GACtBvC,EAAQwC,mBACP7B,GAAmBG,EACtBd,EAAQwC,iBAAiB/B,GACdE,GACXX,EAAQwC,iBAAiB/B,GAG5B,GAEDgC,mBAAoBA,KACnB,MAAMtC,GAAUC,EAAAA,EAAAA,cAEVsC,EAAuBzD,OAAO6C,KAAKhC,GAAO6C,MAC9C5D,GACoB,aAApBe,EAAMf,GAAK6D,MACS,oBAApB9C,EAAMf,GAAKyB,OAEbL,EAAQS,oBAAsB8B,EAC9B5C,EAAM4C,GAAsBb,YAAa,CAAI","sources":["webpack://form-input-password/webpack/bootstrap","webpack://form-input-password/webpack/runtime/define property getters","webpack://form-input-password/webpack/runtime/hasOwnProperty shorthand","webpack://form-input-password/external module \"@wordpress/interactivity\"","webpack://form-input-password/./src/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\nfunction checkPasswordStrength(password) {\n\t// check if password has a lowercase letter\n\tconst hasLowerCase = /[a-z]/.test(password);\n\t// check if password has an uppercase letter\n\tconst hasUpperCase = /[A-Z]/.test(password);\n\t// check if password has a number\n\tconst hasNumber = /\\d/.test(password);\n\t// check if password has a symbol that is valid\n\tconst hasSpecialCharacter = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(\n\t\tpassword\n\t);\n\t// check if password is at least 12 characters long\n\tconst hasLength = password.length >= 12;\n\t// check that it only contains valid characters\n\tconst hasNoInvalidCharacters =\n\t\t/^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]*$/.test(password);\n\n\treturn {\n\t\thasLowerCase,\n\t\thasUpperCase,\n\t\thasNumber,\n\t\thasSpecialCharacter,\n\t\thasLength,\n\t\thasNoInvalidCharacters,\n\t};\n}\n\nconst { state } = store('prc-block/form-input-password', {\n\tactions: {\n\t\tonInputChange: (event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\tconst { id, name } = ref;\n\t\t\tconst { value } = event.target;\n\t\t\tconst { hasConfirmation, confirmationInputId } = context;\n\n\t\t\tstate[id].value = value;\n\t\t\tif ('confirmPassword' === name) {\n\t\t\t\tcontext.confirmationValue = value;\n\t\t\t\tcontext.passwordMatch = context.value === value;\n\t\t\t} else {\n\t\t\t\tif (hasConfirmation) {\n\t\t\t\t\tconst passwordStrengthCheck = checkPasswordStrength(value);\n\t\t\t\t\t// check if all the values in passwordStrengthCheck are true\n\t\t\t\t\tconst disableConfirmInput = Object.values(\n\t\t\t\t\t\tpasswordStrengthCheck\n\t\t\t\t\t).every((result) => result === true);\n\t\t\t\t\t// Disable the confirmationn input if the password does not meet the requirements\n\t\t\t\t\tstate[confirmationInputId].isDisabled =\n\t\t\t\t\t\t!disableConfirmInput;\n\t\t\t\t\t// Report the password strength to the user\n\t\t\t\t\tObject.keys(passwordStrengthCheck).forEach((key) => {\n\t\t\t\t\t\tconst index = context.conditionsList.findIndex(\n\t\t\t\t\t\t\t(condition) => condition.id === key\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst condition = context.conditionsList[index];\n\t\t\t\t\t\tcondition.met = passwordStrengthCheck[key];\n\t\t\t\t\t\tcontext.conditionsList[index] = condition;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontext.value = value;\n\t\t\t}\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonValueChange: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { value, targetNamespace, hasConfirmation, passwordMatch } =\n\t\t\t\tcontext;\n\t\t\tif (value) {\n\t\t\t\tconst { actions } = store(targetNamespace);\n\t\t\t\tif (actions.onPasswordChange) {\n\t\t\t\t\tif (hasConfirmation && passwordMatch) {\n\t\t\t\t\t\tactions.onPasswordChange(value);\n\t\t\t\t\t} else if (!hasConfirmation) {\n\t\t\t\t\t\tactions.onPasswordChange(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonConfirmationInit: () => {\n\t\t\tconst context = getContext();\n\t\t\t// get the confirmation input value id and store it so we can set it as disabled...\n\t\t\tconst confirmationInputKey = Object.keys(state).find(\n\t\t\t\t(key) =>\n\t\t\t\t\tstate[key].type === 'password' &&\n\t\t\t\t\tstate[key].name === 'confirmPassword'\n\t\t\t);\n\t\t\tcontext.confirmationInputId = confirmationInputKey;\n\t\t\tstate[confirmationInputKey].isDisabled = true;\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","actions","onInputChange","event","context","getContext","ref","getElement","id","name","value","target","hasConfirmation","confirmationInputId","confirmationValue","passwordMatch","passwordStrengthCheck","hasLowerCase","test","password","hasUpperCase","hasNumber","hasSpecialCharacter","hasLength","length","hasNoInvalidCharacters","disableConfirmInput","values","every","result","isDisabled","keys","forEach","index","conditionsList","findIndex","condition","met","callbacks","onValueChange","targetNamespace","onPasswordChange","onConfirmationInit","confirmationInputKey","find","type"],"sourceRoot":""}