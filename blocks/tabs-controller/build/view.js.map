{"version":3,"file":"view.js","mappings":"2CACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,ICIlF,MAAM,GAJGI,EAI8B,CAAE,WAAgB,IAAOC,EAAwE,WAAG,WAAgB,IAAOA,EAAwE,WAAG,MAAW,IAAOA,EAAmE,OAH7TC,EAAI,CAAC,EAAGhB,EAAoBiB,EAAED,EAAGF,GAAWE,GADzC,IAACF,EACJE,ECgBL,MAAM,MAAEE,IAAUC,EAAAA,EAAAA,OAAM,4BAA6B,CACpDD,MAAO,CAENE,OAAQ,IAETC,QAAS,CACRC,aAAcA,KACb,MAAM,IAAEC,IAAQC,EAAAA,EAAAA,cACVC,GAAUC,EAAAA,EAAAA,eACV,KAAEC,GAASF,EACbF,EAAIK,UAAUC,SAAS,mBAC1BJ,EAAQK,iBAAmBH,GAE3BF,EAAQM,WAAaJ,EAzBzB,SAA6BK,EAAKL,GACjCK,EAAIC,QAEJ,MAAM,KAAEC,GAASC,OAAOC,SAElBC,EACLH,EAAKI,QAAQ,MAAQ,EACjB,GAAEJ,WAAcP,IAChB,GAAEO,WAAcP,IACrBQ,OAAOI,QAAQC,UAAU,CAAEC,KAAMJ,GAAU,GAAIA,EAChD,CAiBIK,CAAoBnB,EAAKI,IAE1BgB,QAAQC,IAAI,aAAcnB,EAAQ,EAEnCoB,WAAYA,KACX,MAAMpB,GAAUC,EAAAA,EAAAA,eACV,KAAEC,GAASF,EACjBA,EAAQK,iBAAmB,IAAI,GAGjCgB,UAAW,CACVC,WAAYA,KACX,MAAM,IAAExB,IAAQC,EAAAA,EAAAA,cACVwB,EAAKzB,EAAI0B,aAAa,MAC5B/B,EAAME,OAAO8B,KAAKF,GAElB,MAAMG,EAAQ,IAAIC,YAAY,YAAa,CAAEC,OAAQ,CAAEL,QAEvDM,SAASC,cAAcJ,EAAM,EAE9BK,SAAUA,KACT,MAAM,IAAEjC,IAAQC,EAAAA,EAAAA,cACVC,GAAUC,EAAAA,EAAAA,cAChBiB,QAAQC,IAAI,WAAYrB,EAAKE,GAE7B,MAAM,KAAEE,EAAI,WAAEI,EAAU,eAAE0B,EAAc,iBAAE3B,GACzCL,EACD,OAAIE,IAAS8B,GAAkB9B,IAASG,KAGnCH,GAGEI,IAAeJ,CAAI,EAE3B+B,WAAYA,KACX,MAAM,IAAEnC,IAAQC,EAAAA,EAAAA,cACVC,GAAUC,EAAAA,EAAAA,eACV,KAAEC,EAAI,WAAEgC,GAAelC,EACzBE,IAASgC,EACZhB,QAAQC,IAAI,eAAgBjB,EAAMgC,GAElChB,QAAQC,IAAI,gBAAiBrB,EAAKE,EACnC","sources":["webpack://tabs-controller/webpack/bootstrap","webpack://tabs-controller/webpack/runtime/define property getters","webpack://tabs-controller/webpack/runtime/hasOwnProperty shorthand","webpack://tabs-controller/external module \"@wordpress/interactivity\"","webpack://tabs-controller/./src/view.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getContext\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getContext), [\"getElement\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getElement), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress Dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\n\nfunction updateWindowHistory(tab, uuid) {\n\ttab.focus();\n\t// add a tabId query arg to the url with the id of the new tab\n\tconst { href } = window.location;\n\t// add ?tabId=uuid to the url, check if there is already a query string and append accordingly\n\tconst newUrl =\n\t\thref.indexOf('?') > -1\n\t\t\t? `${href}&tabId=${uuid}`\n\t\t\t: `${href}?tabId=${uuid}`;\n\twindow.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nconst { state } = store('prc-block/tabs-controller', {\n\tstate: {\n\t\t// A simple log of all the tab controller blocks on the page\n\t\tonPage: [],\n\t},\n\tactions: {\n\t\tsetActiveTab: () => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst context = getContext();\n\t\t\tconst { uuid } = context;\n\t\t\tif (ref.classList.contains('is-style-dialog')) {\n\t\t\t\tcontext.activeDialogUUID = uuid;\n\t\t\t} else {\n\t\t\t\tcontext.activeUUID = uuid;\n\t\t\t\t// When we select a new tab also update the browser history state and add the tab's uuid to the url. This allows users to copy the url and provide deep linking activation of a specific tab by url. Thats handled server side with a query var check on the block render.\n\t\t\t\tupdateWindowHistory(ref, uuid);\n\t\t\t}\n\t\t\tconsole.log('context...', context);\n\t\t},\n\t\thideDialog: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { uuid } = context;\n\t\t\tcontext.activeDialogUUID = null;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tonTabsInit: () => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst id = ref.getAttribute('id');\n\t\t\tstate.onPage.push(id);\n\n\t\t\tconst event = new CustomEvent('tabsReady', { detail: { id } });\n\t\t\t// Fire a custom event when the tabs are ready\n\t\t\tdocument.dispatchEvent(event);\n\t\t},\n\t\tisActive: () => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst context = getContext();\n\t\t\tconsole.log('isActive', ref, context);\n\t\t\t// Each panel|tab has its own context containing its own uuid, we can then compare that to the activeUUID. The two contexts get merged.\n\t\t\tconst { uuid, activeUUID, dialogLinkUUID, activeDialogUUID } =\n\t\t\t\tcontext;\n\t\t\tif (uuid === dialogLinkUUID && uuid === activeDialogUUID) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!uuid) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn activeUUID === uuid;\n\t\t},\n\t\tonTabWatch: () => {\n\t\t\tconst { ref } = getElement();\n\t\t\tconst context = getContext();\n\t\t\tconst { uuid, activeUuid } = context;\n\t\t\tif (uuid === activeUuid) {\n\t\t\t\tconsole.log('onTabWatch!!', uuid, activeUuid);\n\t\t\t} else {\n\t\t\t\tconsole.log('onTabWatch...', ref, context);\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","d","state","store","onPage","actions","setActiveTab","ref","getElement","context","getContext","uuid","classList","contains","activeDialogUUID","activeUUID","tab","focus","href","window","location","newUrl","indexOf","history","pushState","path","updateWindowHistory","console","log","hideDialog","callbacks","onTabsInit","id","getAttribute","push","event","CustomEvent","detail","document","dispatchEvent","isActive","dialogLinkUUID","onTabWatch","activeUuid"],"sourceRoot":""}