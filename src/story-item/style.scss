@use "../../../../themes/prc_parent/src/scss/master.variables.scss" as variables;
@use "../../../../themes/prc_parent/src/scss/colors.scss" as colors;
@use "../../../../themes/prc_parent/src/scss/functions.scss" as functions;
@use "../../../../themes/prc_parent/src/scss/mixins.scss" as mixins;
@use "sass:math";

// @TODO: Redo this stylesheet using custom css vars.

$mobileImageWidth: 690px;

/* Header */
$headerColor: colors.$darkTextColor;
$headerLinkColor: $headerColor;
//
$headerSmallFontSize: 18px;
$headerSmallFontWeight: 400;
$headerSmallLineHeight: 25px;
//
$headerSmallAltFontSize: 18px;
$headerSmallAltFontWeight: variables.$bold;
$headerSmallAltLineHeight: 23px;
//
$headerFont: variables.$postTitleFont;
//
$headerMediumFontSize: 20px;
$headerMediumFontWeight: 700;
$headerMediumLineHeight: 26px;
//
$headerLargeFontSize: 28px;
$headerLargeFontWeight: variables.$bold;
$headerLargeLineHeight: 34px;

/* Extras Content */
$extraHorizontalSpacing: 0.5rem;
$extraRowSpacing: 0.5rem;
$extraMargin: 1em 0 0 0;

/* Consecutive Items */
$itemSpacing: 0em 0em 14px 0em;
$relaxedItemSpacing: 0 0 21px 0;
$veryRelaxedItemSpacing: 0 0 28px 0;

/* Divided */
$dividedBorder: 1px solid colors.$borderColor;

/* Glow Gradient */
$placeholderLoadingAnimationDuration: 2s;
$placeholderLoadingGradientWidth: 1200px;
$placeholderLoadingGradient: linear-gradient(to right,
    rgba(0, 0, 0, 0.08) 0%,
    rgba(0, 0, 0, 0.15) 15%,
    rgba(0, 0, 0, 0.08) 30%);
$placeholderInvertedLoadingGradient: linear-gradient(to right,
    rgba(255, 255, 255, 0.08) 0%,
    rgba(255, 255, 255, 0.14) 15%,
    rgba(255, 255, 255, 0.08) 30%);

@mixin imageSize($size) {
    // Mobile first
    &:not(.loaded) > picture > img {
        @media only screen and (min-width: variables.$largestMobileScreen) {
            animation: placeholderShimmer $placeholderLoadingAnimationDuration linear;
            animation-iteration-count: infinite;
            background-color: colors.$white;
            background-image: $placeholderLoadingGradient;
            background-size: $placeholderLoadingGradientWidth 100%;
        }
    }

    @if $size == "A1" {
		& > button > picture > img,
        & > button > picture > source,
        & > picture > img,
        & > picture > source {
            max-width: $mobileImageWidth;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                max-width: variables.$A1;
            }
        }
        &:not(.loaded) > picture > img {
            @media only screen and (min-width: variables.$largestMobileScreen) {
                height: variables.$A1Height;
            }
        }
    }

    @if $size == "A2" {
		& > button > picture > img,
        & > button > picture > source,
        & > picture > img,
        & > picture > source {
            max-width: $mobileImageWidth;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                max-width: variables.$A2;
            }
        }
        &:not(.loaded) > picture > img {
            @media only screen and (min-width: variables.$largestMobileScreen) {
                height: variables.$A2Height;
            }
        }
    }

    @if $size == "A3" {
		& > button > picture > img,
        & > button > picture > source,
        & > picture > img,
        & > picture > source {
            max-width: variables.$A3Small;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                max-width: variables.$A3;
            }
        }
        &:not(.loaded) > picture > img {
            @media only screen and (min-width: variables.$largestMobileScreen) {
                height: variables.$A3Height;
            }
        }
    }

    @if $size == "A4" {
		& > button > picture > img,
        & > button > picture > source,
        & > picture > img,
        & > picture > source {
            max-width: $mobileImageWidth;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                max-width: variables.$A4;
            }
        }
        &:not(.loaded) > picture > img {
            @media only screen and (min-width: variables.$largestMobileScreen) {
                height: variables.$A4Height;
            }
        }
    }
}

@mixin rightAlignedA3($mobile: false) {
    @include mixins.clearfix();
    display: block!important;
    .image {
        float: right!important;
        padding-left: 21px!important;
        // Force A3 image size.
        @if $mobile == true {
            @include imageSize("A3");
        }
    }
    .description {
        clear: right!important;
        padding-top: 10px!important;
    }
}

@keyframes placeholderShimmer {
    0% {
        background-position: -$placeholderLoadingGradientWidth 0;
    }

    100% {
        background-position: $placeholderLoadingGradientWidth 0;
    }
}

.wp-block-prc-block-story-item,
.story.item {
    display: grid;
    gap: 0px;
    grid-auto-flow: column;
    grid-template-areas:
        "image"
        "meta"
        "header"
        "excerpt"
        "extras"
        "breakingnews"
        "extracontent";
    margin: 0;
    padding: 0;
    width: 100%;
    background: transparent;
    border: none;
    transition: box-shadow variables.$defaultDuration variables.$defaultEasing;
    z-index: '';

	&:not(.aligned) {
		grid-template-areas:
			"meta"
			"header"
			"excerpt"
			"extras"
			"breakingnews"
			"extracontent";
	}

    &.bordered {
        padding: 21px!important;
        border: 1px solid #d3d3d3;
        margin-bottom: 2rem;
    }

    &.aligned {
        grid-auto-flow: row;
    }

    &.top,
    &.bottom {
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;
    }

    // Mobile first, both top and bottom are the same. Bottom only gets aligned to the bottom on desktop.
    &.top.aligned,
    &.bottom.aligned {
        grid-template-areas:
          "image"
          "meta"
          "header"
          "excerpt"
          "extras"
          "breakingnews"
          "extracontent";
        .image {
            margin: 0 0 21px 0;
        }
    }

    // On desktop make bottom aligned images actually bottom aligned
    &.bottom.aligned {
        @media only screen and (min-width: variables.$largestMobileScreen) {
            grid-template-areas:
            "meta"
            "header"
            "excerpt"
            "extras"
            "breakingnews"
            "extracontent"
            "image";
            .image {
                margin: 21px 0 0 0;
            }
        }
    }

    &.left,
    &.right {
        grid-column-gap: 23px;
    }

    &.left.aligned {
        grid-template-columns: 1fr 2fr;
        &[data-image-size="A1"] {
            grid-template-columns: variables.$A1 2fr;
        }
        &[data-image-size="A2"] {
            grid-template-columns: variables.$A2 2fr;
        }
        &[data-image-size="A3"] {
            grid-template-columns: variables.$A3 2fr;
        }
        &[data-image-size="A4"] {
            grid-template-columns: variables.$A4 2fr;
        }
        &[data-image-size="XL"] {
            grid-template-columns: variables.$A1 2fr;
        }
        grid-template-rows: auto;
        grid-template-areas:
          "image meta"
          "image header"
          "image excerpt"
          "image extras"
          "image breakingnews"
          "image extracontent";
    }

    &.right.aligned {
        grid-template-columns: 2fr 1fr;
        grid-template-rows: auto;
        @media only screen and (min-width: variables.$largestMobileScreen) {
            grid-template-areas:
                "meta image"
                "header image"
                "excerpt image"
                "extras image"
                "breakingnews image"
                "extracontent image";
        }

        &[data-image-size="A1"] {
            grid-template-columns: 2fr variables.$A1Small;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                grid-template-columns: 2fr variables.$A1;
            }
        }
        &[data-image-size="A2"] {
            grid-template-columns: 2fr variables.$A2Small;
            @media only screen and (min-width: variables.$largestMobileScreen) {
                grid-template-columns: 2fr variables.$A2;
            }
        }
        &[data-image-size="A3"] {
            @include rightAlignedA3(false);
        }
        &[data-image-size="A4"] {
            grid-template-columns: 2fr variables.$A4;
        }
        &[data-image-size="XL"] {
            grid-template-columns: 2fr variables.$A1;
        }
    }

    // Mobile switch over for left and right to be right aligned in the loop.
    &.left.aligned,
    &.right.aligned {
        @media only screen and (max-width: variables.$largestMobileScreen) {
            @include rightAlignedA3(true);
        }
    }

    /* Image */
    .image {
        grid-area: image;

        // Chart Art
        &.bordered > picture > img {
            border: 1px solid #dadada;
        }

        &.A1 {
            @include imageSize("A1");
        }

        &.A2 {
            @include imageSize("A2");
        }

        &.A3 {
            @include imageSize("A3");
        }

        &.A4 {
            @include imageSize("A4");
        }

        &.XL > picture > img,
        &.XL > picture > source {
            max-width: variables.$XL;
        }

		& > button > picture > img,
        & > button > picture > source,
        & > picture > img,
        & > picture > source,
        & > a {
            display: block;
            margin: 0;
            width: 100%;
            height: auto;
            border-radius: 0px;
        }
    }

    .meta {
        grid-area: meta;
		font-size: 12px;
		font-family: var(--wp--preset--font-family--sans-serif);
		color: rgba(0,0,0,.6);
		letter-spacing: 0.1em;
		line-height: 1em;
		text-transform: uppercase;
		padding-bottom: 1.5em;
    }

    .header {
        grid-area: header;

        @media only screen and (max-width: variables.$largestMobileScreen) {
            display: block;
        }

        display: inline-block;
        // color: $headerColor;
        -ms-word-wrap: break-word;
        word-wrap: break-word;

        // .medium, mobile first.
		font-family: $headerFont;
        font-size: $headerMediumFontSize;
        font-weight: $headerMediumFontWeight;
        line-height: $headerMediumLineHeight;

        // Find .large above

        &.small {
            font-size: $headerSmallFontSize;
            font-weight: $headerSmallFontWeight;
            line-height: $headerSmallLineHeight;
        }

		&.large {
			font-size: $headerLargeFontSize;
			font-weight: $headerLargeFontWeight;
			line-height: $headerLargeLineHeight;
		}

        &.light {
            font-weight: normal;
        }

        & > a {
            color: $headerColor;
            text-decoration: none;

            &:hover {
                color: $headerColor !important;
                text-decoration: underline;
            }
        }
    }

    .description {
        grid-area: excerpt;
        margin: 10px 0 0 0;
        font-size: 16px;
		color: colors.$textColor;
        line-height: variables.$lineHeight;
        p {
            margin: 0 0 7px 0;
            &:last-child {
                margin-bottom: 0;
            }
        }
    }

    .description a,
    .extra a {
        color: colors.$trueBlack;
        transition: color variables.$defaultDuration variables.$defaultEasing;
        &:hover {
            color: colors.$trueBlack;
        }
    }

    // For when breaking news is enabled but extras are not.
    .description + ul.extra-breaking-news {
        margin: $extraMargin;
    }

    .extra {
        grid-area: extras;
    }
    .extra-breaking-news {
        grid-area: breakingnews;
    }

    .extra,
    .extra-breaking-news {
        @include mixins.clearfix();
        display: block;
        margin: $extraMargin;
        width: 100%;
        color: colors.$darkTextColor;
        font-family: variables.$sansSerifFont;
        font-size: 15px;
        transition: color variables.$defaultDuration variables.$defaultEasing;

        .kicker-breaking-news {
            display: inline;
        }
    }

    // Make extra and extra breaking news attached.
    ul.extra + ul.extra-breaking-news {
        margin: 0;
    }

    ul.extra,
    ul.extra-breaking-news {
        list-style-position: outside;
        padding-left: 1em;

        li {
            margin: $extraRowSpacing $extraHorizontalSpacing $extraRowSpacing 0;
        }
    }

    // @TODO what is this combination, where does this appear?
    ul.extra-breaking-news > li,
    div.extra > * {
        margin: $extraRowSpacing $extraHorizontalSpacing $extraRowSpacing 0;
    }

    .extra-content {
        grid-area: extracontent;
    }
}
// End .wp-block-prc-block-story-item

// A mobile tweak for spacing for a single story item...
.wp-block-prc-block-column > .wp-block-prc-block-story-item:only-child {
    @media only screen and (max-width: variables.$largestMobileScreen) {
        margin: $itemSpacing;
        padding: $itemSpacing;
        border-bottom: $dividedBorder;
    }
}

// Query Block support
.wp-block-post-template > li {
	&:not(:last-of-type) > .wp-block-prc-block-story-item {
        border-bottom: $dividedBorder;
        padding: 21px 0 21px 0;
    }
	&:first-of-type > .wp-block-prc-block-story-item {
        padding-top: 0px;
    }
	&:last-of-type > .wp-block-prc-block-story-item {
        padding-top: 21px;
    }
}

// Handle Consecutive Items in the block editor.
.block-editor-block-list__layout {
    & > .wp-block-prc-block-story-item:not(:last-of-type) {
        padding: $itemSpacing;
        margin: $itemSpacing;

        & + .story.item.bordered {
            margin-top: -15px;
        }
    }
    &.wp-block-prc-block-column > .wp-block-prc-block-story-item:not(:last-of-type) {
        border-bottom: $dividedBorder;
        padding: $relaxedItemSpacing;
        margin: $relaxedItemSpacing;

        & + .story.item.bordered {
            margin-top: -22px;
        }
    }
}

/**
 * Consecutive Story Items
 */
// Keeping these .ui for the time being for backwards compatibility.
.ui.items,
.ui[class*="story items"] {
    & > .item,
    & > .wp-block-prc-block-story-item {
        font-size: variables.$relativeMedium;
    }

    &.divided > .story.item:not(:last-of-type) {
        border-bottom: $dividedBorder;
    }

    & > .wp-block-prc-block-story-item > .item:not(:last-of-type),
    & > .item:not(:last-of-type) {
        padding: $itemSpacing;
        margin: $itemSpacing;

        & + .story.item.bordered {
            margin-top: -15px;
        }
    }

    &.relaxed > .wp-block-prc-block-story-item > .item:not(:last-of-type),
    &.relaxed > .item:not(:last-of-type) {
        padding: $relaxedItemSpacing;
        margin: $relaxedItemSpacing;

        & + .story.item.bordered {
            margin-top: -22px;
        }
    }

    &[class*="very realxed"] > .wp-block-prc-block-story-item .item:not(:last-of-type),
    &[class*="very relaxed"] > .item:not(:last-of-type) {
        padding: $veryRelaxedItemSpacing;
        margin: $veryRelaxedItemSpacing;
        & + .story.item.bordered {
            margin-top: -29px;
        }
    }
}

/**
 * Responsive Layouts
 */

/* Tablet Only */
@media only screen and (min-width: variables.$tabletBreakpoint) and (max-width: variables.$largestTabletScreen) {

}

/* Mobile Only */
// On mobile and items not explicitly defined as being unstackable should stack
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.items .item {
        padding: $veryRelaxedItemSpacing;
    }
}


/**
 * Block Editor Only Styles
*/
.wp-block.wp-block-prc-block-story-item {
	&.wp-block-prc-block-story-item__placeholder  {
		padding: 16px;
		.components-placeholder__label > .dashicon {
			margin-right: 10px;
		}
	}
	.meta {
		.components-base-control__field {
			margin-bottom: 0!important;
		}
	}
}
