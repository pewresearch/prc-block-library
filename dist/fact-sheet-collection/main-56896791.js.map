{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blocks\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/fact-sheet-collection/edit.js","webpack:///./src/fact-sheet-collection/save.js","webpack:///./src/fact-sheet-collection/index.js","webpack:///external \"wp.components\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"ReactDOM\"","webpack:///external \"moment\"","webpack:///external \"wp.url\"","webpack:///external \"wp.data\"","webpack:///external \"wp.element\"","webpack:///external \"wp.apiFetch\""],"names":["module","exports","React","wp","blocks","getTerms","taxonomy","perPage","Promise","resolve","data","apiFetch","path","then","terms","index","length","slug","replace","toLowerCase","id","name","parent","AltPostLabelControl","label","setAttributes","value","onChange","l","altPostLabel","CollectionTermControl","termId","enableFlags","useState","setTerms","editPost","useDispatch","useEffect","treeData","convertedData","Object","keys","map","i","filter","e","forEach","c","f","children","cT","push","options","style","display","flexDirection","alignItems","flexGrow","noOptionLabel","selected","collection","parseFloat","selectedId","tree","paddingLeft","checked","PDFControl","attachmentId","title","allowedTypes","onSelect","pdf","pdfId","render","open","isPrimary","onClick","isSecondary","edit","attributes","className","blockProps","useBlockProps","useSelect","select","getEditedPostAttribute","__","isColumnLayout","isNaN","save","metadata","settings","icon","description","keywords","example","altLangPostId","collectionId","reportPdfUrl","registerBlockType","components","i18n","blockEditor","ReactDOM","moment","url","element"],"mappings":"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","file":"fact-sheet-collection/main-56896791.js","sourcesContent":["module.exports = React;","module.exports = wp.blocks;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","/* eslint-disable no-restricted-globals */\n// eslint-disable-next-line import/no-unresolved\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport {\n    useBlockProps,\n    MediaUpload,\n    MediaUploadCheck,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    ButtonGroup,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    TreeSelect,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\nimport { getTermsAsTree } from 'shared';\n\nconst AltPostLabelControl = ({ label, setAttributes }) => {\n    return (\n        <Fragment>\n            <TextControl\n                label=\"Alternate Post Label\"\n                value={label}\n                onChange={l => setAttributes({ altPostLabel: l })}\n            />\n        </Fragment>\n    );\n};\n\nconst CollectionTermControl = ({ termId, enableFlags, setAttributes }) => {\n    const [terms, setTerms] = useState(false);\n    const { editPost } = useDispatch('core/editor');\n\n    useEffect(() => {\n        getTermsAsTree('collection').then(options => {\n            setTerms(options);\n        });\n    }, []);\n\n    return (\n        <Fragment>\n            {false !== terms && (\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'flex-end',\n                    }}\n                >\n                    <div style={{ flexGrow: 1 }}>\n                        <TreeSelect\n                            label=\"Select Collection\"\n                            noOptionLabel=\"No Collection\"\n                            onChange={selected =>\n                                editPost({ collection: parseFloat(selected) })\n                            }\n                            selectedId={termId}\n                            tree={terms}\n                        />\n                    </div>\n                    <div style={{ paddingLeft: '1em' }}>\n                        <ToggleControl\n                            label=\"Enable Flags\"\n                            checked={enableFlags}\n                            onChange={() =>\n                                setAttributes({ enableFlags: !enableFlags })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n        </Fragment>\n    );\n};\n\nconst PDFControl = ({ attachmentId, setAttributes }) => {\n    const ALLOWED_MEDIA_TYPES = ['application/pdf'];\n    return (\n        <MediaUploadCheck>\n            <MediaUpload\n                title=\"Upload PDF\"\n                allowedTypes={ALLOWED_MEDIA_TYPES}\n                value={attachmentId}\n                onSelect={pdf => setAttributes({ pdfId: pdf.id })}\n                render={({ open }) => (\n                    <ButtonGroup>\n                        <Button isPrimary onClick={open}>\n                            {0 === attachmentId ? `Upload PDF` : `Change PDF`}\n                        </Button>\n                        {0 !== attachmentId && (\n                            <Button\n                                isSecondary\n                                onClick={() => setAttributes({ pdfId: 0 })}\n                            >\n                                Clear PDF\n                            </Button>\n                        )}\n                    </ButtonGroup>\n                )}\n            />\n        </MediaUploadCheck>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes }) => {\n    const blockProps = useBlockProps({\n        className,\n    });\n\n    const { altPostLabel, enableFlags, pdfId } = attributes;\n\n    const { termId } = useSelect(select => {\n        return {\n            termId: select('core/editor').getEditedPostAttribute('collection'),\n        };\n    }, []);\n\n    return (\n        <div {...blockProps}>\n            <Placeholder\n                label={__('Configure Fact Sheet Collection')}\n                isColumnLayout\n            >\n                {!isNaN(termId) && (\n                    <AltPostLabelControl\n                        label={altPostLabel}\n                        setAttributes={setAttributes}\n                    />\n                )}\n                <CollectionTermControl\n                    termId={termId}\n                    enableFlags={enableFlags}\n                    setAttributes={setAttributes}\n                />\n                <PDFControl\n                    attachmentId={pdfId}\n                    setAttributes={setAttributes}\n                />\n            </Placeholder>\n        </div>\n    );\n};\n\nexport default edit;\n","// eslint-disable-next-line import/no-unresolved\nimport { Fragment } from '@wordpress/element';\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/** Returns a server side block callback */\nconst save = () => {\n    const blockProps = useBlockProps.save();\n    return <Fragment {...blockProps} />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Fact Sheet Collection'),\n    icon: 'format-aside',\n    description: __(\n        'Set and display a collection of Fact Sheets. Set a report PDF or label for an alternat language post.',\n    ),\n    keywords: [__('prc'), __('factsheet'), __('fact sheet'), __('collection')],\n    example: {\n        attributes: {\n            altLangPostId: 61623,\n            collectionId: 12812,\n            reportPdfUrl: '',\n        },\n    },\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.components;","module.exports = wp.i18n;","module.exports = wp.blockEditor;","module.exports = ReactDOM;","module.exports = moment;","module.exports = wp.url;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.apiFetch;"],"sourceRoot":""}