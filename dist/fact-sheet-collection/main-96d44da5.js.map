{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.htmlEntities\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/fact-sheet-collection/edit.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/fact-sheet-collection/save.js","webpack:///./src/fact-sheet-collection/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.element\"","webpack:///external \"moment\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.data\"","webpack:///external \"ReactDOM\"","webpack:///external \"lodash\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\""],"names":["module","exports","React","wp","htmlEntities","getTerms","taxonomy","perPage","Promise","resolve","data","apiFetch","path","then","terms","index","length","slug","replace","toLowerCase","id","name","parent","AltPostLabelControl","withState","termsData","excludeData","includeData","setState","exclude","include","letter","setAttributes","isSelected","loadTerms","getTermsByLetter","state","JSON","parse","includeArr","map","term","push","term_id","stringify","stateInit","useDidMount","staticData","className","href","checked","includes","label","decodeEntities","onChange","b","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin","value","l","altPostLabel","CollectionTermControl","enableFlags","useState","setTerms","editPost","useDispatch","useEffect","treeData","convertedData","Object","keys","i","filter","e","forEach","c","f","children","cT","options","noOptionLabel","selected","console","log","collection","parseFloat","selectedId","tree","PDFControl","attachmentId","title","allowedTypes","onSelect","pdf","pdfId","render","open","onClick","cursor","class","edit","attributes","blockProps","clientId","useBlockProps","useSelect","select","getEditedPostAttribute","Segment","color","inverted","isNaN","save","metadata","settings","__","icon","description","keywords","example","altLangPostId","collectionId","reportPdfUrl","registerBlockType","blockEditor","components","i18n","element","moment","ReactDOM","lodash","blocks","url"],"mappings":"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","file":"fact-sheet-collection/main-96d44da5.js","sourcesContent":["module.exports = React;","module.exports = wp.htmlEntities;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst structureTermsHierarchically = (terms) => {\n    return null;\n}\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage, termValue = 'name', sortByLabel = true ) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                \n                let value = termObj.name;\n                if ( 'termid' === termValue ) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if ( undefined !== termObj.parent && 0 !== termObj.parent ) {\n                    label = ' -- ' + label;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if ( false !== sortByLabel ) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = (taxonomy) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter( e => e.parent === 0 );\n            parentTerms.forEach( e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter( f => f.parent === e.id );\n                let children = [];\n                // Construct children array.\n                c.forEach( cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children\n                });\n            } );\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","// eslint-disable-next-line import/no-unresolved\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport { useBlockProps, MediaUpload, MediaUploadCheck, RichText, BlockControls, __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport {\n    TextControl,\n    ToggleControl,\n    TreeSelect,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport apiFetch from '@wordpress/api-fetch';\nimport { Segment } from 'semantic-ui-react';\n\nimport { getTermsAsTree } from 'shared';\n\nconst AltPostLabelControl = ({label, isSelected, setAttributes}) => {\n    return(\n        <Fragment>\n            <TextControl\n                label=\"Alt Post Label\"\n                value={ label }\n                onChange={ l => setAttributes({ altPostLabel: l }) }\n            />\n        </Fragment>\n    );\n}\n\nconst CollectionTermControl = ({termId, enableFlags, isSelected, setAttributes}) => {\n    const [terms, setTerms] = useState(false);\n    const { editPost } = useDispatch('core/editor');\n\n    useEffect(()=>{\n        getTermsAsTree('collection').then(options => {\n            setTerms(options);\n        })\n    }, []);\n\n    return(\n        <Fragment>\n            {terms !== false && (\n                <Fragment>\n                    <TreeSelect\n                        label=\"Select Collection\"\n                        noOptionLabel=\"No Collection\"\n                        onChange={ selected => {\n                            console.log(\"Collection Selected\", selected);\n                            editPost({ collection: parseFloat(selected) });\n                        } }\n                        selectedId={ termId }\n                        tree={terms}\n                    />\n                    <ToggleControl\n                        label=\"Enable Flags\"\n                        checked={ enableFlags }\n                        onChange={ () => setAttributes({enableFlags: !enableFlags}) }\n                    />\n                </Fragment>\n            )}\n        </Fragment>\n    );\n}\n\nconst PDFControl = ({attachmentId, isSelected, setAttributes}) => {\n    const ALLOWED_MEDIA_TYPES = ['application/pdf'];\n    return(\n        <Fragment>\n            <MediaUploadCheck>\n                <MediaUpload\n                    title={`Upload PDF`}\n                    allowedTypes={ALLOWED_MEDIA_TYPES}\n                    value={attachmentId}\n                    onSelect={pdf => setAttributes({pdfId: pdf.id})}\n                    render={({ open }) => {\n                        return (\n                            <Fragment>\n                                {null === attachmentId && <a onClick={open} style={{cursor: 'pointer'}}><i class=\"icon file pdf outline\"></i>Upload a PDF version of this fact sheet</a> }\n                                {null !== attachmentId && <a onClick={open} style={{cursor: 'pointer'}}><i class=\"icon file pdf outline\"></i>Change the PDF version of this fact sheet</a> }\n                            </Fragment>\n                        );\n                    }}\n                />\n            </MediaUploadCheck>\n        </Fragment>\n    );\n}\n\n/** Returns a server side block callback */\nconst edit = ({ attributes, className, setAttributes, isSelected, clientId}) => {\n    const blockProps = useBlockProps( {\n        className\n    } );\n\n    const { \n        altPostLabel,\n        enableFlags,\n        pdfId\n    } = attributes;\n\n    const { termId } = useSelect( ( select ) => {\n        return {\n            termId: select( 'core/editor' ).getEditedPostAttribute('collection'),\n        }\n    }, [] );\n\n    return(\n        <div { ...blockProps }>\n            <Segment color=\"beige\" inverted>\n                <CollectionTermControl termId={termId} enableFlags={enableFlags} isSelected={isSelected} setAttributes={setAttributes}/>\n                { ! isNaN(termId) && <AltPostLabelControl label={altPostLabel} isSelected={isSelected} setAttributes={setAttributes}/> } \n                <PDFControl attachmentId={pdfId} isSelected={isSelected} setAttributes={setAttributes}/>\n            </Segment>\n        </div>\n    );\n};\n\nexport default edit;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","// eslint-disable-next-line import/no-unresolved\nimport { Fragment } from '@wordpress/element';\n\n/** Returns a server side block callback */\nconst save = ({ attributes }) => {\n    const props = attributes;\n    return <Fragment></Fragment>;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n\ttitle: __( 'Fact Sheet Collection' ),\n\ticon: 'format-aside',\n\tdescription: __(\"Set and display a collection of Fact Sheet's. Set a report PDF or alternate language post.\"),\n\tkeywords: [__('prc'), __('factsheet'), __('fact sheet'), __('collection')],\n\texample: {\n        attributes: {\n            altLangPostId: 61623,\n            collectionId: 12812,\n            reportPdfUrl: ''\n        },\n    },\n\tedit,\n    save,\n};\n\nregisterBlockType( name, {...metadata, ...settings});","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.i18n;","module.exports = wp.element;","module.exports = moment;","module.exports = wp.apiFetch;","module.exports = wp.data;","module.exports = ReactDOM;","module.exports = lodash;","module.exports = wp.blocks;","module.exports = wp.url;"],"sourceRoot":""}