{"version":3,"sources":["webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"i18n\"]","webpack:///external \"regeneratorRuntime\"","webpack:///external [\"wp\",\"primitives\"]","webpack:///external [\"wp\",\"keycodes\"]","webpack:///external [\"wp\",\"mediaUtils\"]","webpack:///external [\"wp\",\"data\"]","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/hooks/use-window-size.js","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/components/content-search/search-item.jsx","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/components/content-picker/picked-item.jsx","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/components/content-picker/sortable-list.jsx","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/components/content-picker/index.js","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/components/list-store/reducer.js","webpack:////Users/benwormald/Projects/prc/app/public/wp-content/private/_shared/functions/index.js","webpack:///./src/fact-sheet-collection/edit.js","webpack:///./src/fact-sheet-collection/save.js","webpack:///./src/fact-sheet-collection/index.js","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"url\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"htmlEntities\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"apiFetch\"]"],"names":["module","exports","window","regeneratorRuntime","useWindowSize","styled","Button","DragHandle","sortableHandle","style","marginRight","cursor","flexShrink","width","height","xmlns","viewBox","role","aria-hidden","focusable","d","Wrapper","PickedItem","item","isOrderable","handleItemDelete","mode","type","preparedItem","useSelect","select","getEntityRecord","hasFinishedResolution","getEntityRecordParameters","id","result","console","log","newItem","title","rendered","name","url","link","uuid","useEffect","border","paddingTop","paddingBottom","paddingLeft","className","decodeEntities","filterURLForDisplay","safeDecodeURI","onClick","aria-label","__","SortableContainer","items","ChildComponent","ItemComponent","SortableElement","fontFamily","map","index","itemKey","length","key","sortIndex","totalItems","getTerms","taxonomy","perPage","Promise","resolve","data","apiFetch","path","then","terms","slug","replace","toLowerCase","parent","AltPostLabelControl","label","setAttributes","value","onChange","l","altPostLabel","CollectionTermControl","termId","enableFlags","useState","setTerms","editPost","useDispatch","treeData","convertedData","Object","keys","i","filter","e","forEach","c","f","children","cT","push","options","display","flexDirection","alignItems","flexGrow","noOptionLabel","selected","collection","parseFloat","selectedId","tree","checked","PDFControl","attachmentId","allowedTypes","onSelect","pdf","pdfId","render","open","isPrimary","isSecondary","edit","attributes","blockProps","useBlockProps","getEditedPostAttribute","isColumnLayout","isNaN","save","metadata","settings","icon","description","keywords","example","altLangPostId","collectionId","reportPdfUrl","registerBlockType"],"mappings":";;;;;;;;;;;;;;;;;2JAAcA,EAAOC,QAAUC,OAAW,GAAU,Q,iBCAtCF,EAAOC,QAAUC,OAAW,GAAQ,M,8ZCAlDF,EAAOC,QAAUE,oB,kBCAHH,EAAOC,QAAUC,OAAW,GAAc,Y,kBCA1CF,EAAOC,QAAUC,OAAW,GAAY,U,kBCAxCF,EAAOC,QAAUC,OAAW,GAAc,Y,8DCA1CF,EAAOC,QAAUC,OAAW,GAAQ,M,qLCiCnCE,I,0CCrBMC,YAAOC,SAAPD,CAAH,qZ,OCMZE,EAAaC,aAAe,kBACjC,2BACCC,MAAO,CAAEC,YAAa,MAAOC,OAAQ,OAAQC,WAAY,GACzDC,MAAM,KACNC,OAAO,KACPC,MAAM,6BACNC,QAAQ,YACRC,KAAK,MACLC,cAAY,OACZC,UAAU,SAEV,4BAAMC,EAAE,8FAIJC,EAAUhB,YAAO,MAAPA,CAAH,kRAqGEiB,EA9EI,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,KAAwD,IAAlDC,mBAAkD,SAA7BC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,KAC5DC,EAAgB,SAATD,EAAkB,WAAa,WAItCE,EAAeC,qBACpB,SAACC,GACA,MAAmDA,EAAO,QAAlDC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,sBAEnBC,EAA4B,CAACN,EAAMJ,EAAKI,KAAMJ,EAAKW,IACnDC,EAASJ,EAAe,WAAf,EAAmBE,GAElC,GAAIE,EAAQ,CACXC,QAAQC,IAAI,WAAYF,GACxB,IAAMG,EAAU,CACfC,MAAgB,SAATb,EAAkBS,EAAOI,MAAMC,SAAWL,EAAOM,KACxDC,IAAKP,EAAOQ,KACZT,GAAIC,EAAOD,IAOZ,OAJIX,EAAKqB,OACRN,EAAQM,KAAOrB,EAAKqB,MAGdN,EAGR,GAAIN,EAAsB,kBAAmBC,GAC5C,OAAO,OAKT,CAACV,EAAKW,GAAIP,IAUX,OANAkB,qBAAU,WACY,OAAjBjB,GACHH,EAAiBF,KAEhB,CAACA,EAAME,EAAkBG,IAErBA,EACN,oBAACP,EAAD,CACCZ,MAAO,CACNqC,OAAQ,kBACRC,WAAY,OACZC,cAAe,OACfC,YAAazB,EAAc,MAAQ,OAEpC0B,UAAU,oDAET1B,EAAc,oBAACjB,EAAD,MAAiB,GAChC,4BAAM2C,UAAU,iDACf,4BAAMA,UAAU,gDACdC,yBAAevB,EAAaW,QAE9B,4BAAMrB,eAAA,EAAYgC,UAAU,+CAC1BE,8BAAoBC,wBAAczB,EAAac,OAAS,KAI3D,8BACCf,KAAK,SACL2B,QAAS,WACR7B,EAAiBG,IAElB2B,aAAYC,aAAG,cAAe,0BAL/B,MAWD,iCCxHmBC,aAAkB,YAA6E,IAA1EC,EAAyE,EAAzEA,MAAOlC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,iBAAkBC,EAAmC,EAAnCA,KAAmC,IAA7BiC,sBAA6B,SAC5GC,GAAgB,IAAUD,EAAkBnC,EAAcqC,YAAgBF,GAAkBA,EAAkBnC,EAAcqC,YAAgBvC,GAAcA,EAChK,OACC,2BACCb,MAAO,CACNqD,WACC,wHAGDJ,EAAMK,KAAI,SAACxC,EAAMyC,GACjB,IAAMC,EAAU1C,EAAKqB,KAAOrB,EAAKqB,KAAOrB,EAAKW,GAC7C,OAAO,oBAAC0B,EAAD,CACNpC,eAAaA,GAAekC,EAAMQ,OAAS,IAAI1C,EAC/C2C,IAAG,eAAUF,GACbD,MAAOA,EACPvC,iBAAkBA,EAClB2C,UAAWJ,EACXzC,KAAMA,EACNG,KAAMA,EACN2C,WAAYX,EAAMQ,gBCFF7D,YAAO,MAAPA,CAAH,4L,OC3BlB,I,QCkCMiE,G,qBAAW,SAACC,GAA4B,IAAlBC,EAAiB,uDAAP,GACrC,OAAO,IAAIC,SAAQ,SAAAC,GAClB,IAAMC,EAAO,GACbC,IAAS,CACRC,KAAK,UAAD,OAAYN,EAAZ,qBAAiCC,KACnCM,MAAK,SAAAC,GACP,IAAK,IAAIf,EAAQ,EAAGA,EAAQe,EAAMb,OAAQF,IAAS,CAClD,IAAMgB,EAAOD,EAAMf,GAAOgB,KAAKC,QAAlB,UACTV,EAASW,cADA,KAEZ,IAEDP,EAAKI,EAAMf,GAAO9B,IAAM,CACvBA,GAAI6C,EAAMf,GAAO9B,GACjBO,KAAMsC,EAAMf,GAAOvB,KACnB0C,OAAQJ,EAAMf,GAAOmB,OACrBH,QAGFN,EAAQC,WCzBLS,EAAsB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAClC,OACI,oBAAC,WAAD,KACI,oBAAC,cAAD,CACID,MAAM,uBACNE,MAAOF,EACPG,SAAU,SAAAC,GAAC,OAAIH,EAAc,CAAEI,aAAcD,SAMvDE,EAAwB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,YAAaP,EAAoB,EAApBA,cAClD,EAA0BQ,oBAAS,GAAnC,mBAAOf,EAAP,KAAcgB,EAAd,KACQC,EAAaC,sBAAY,eAAzBD,SAQR,OANAnD,qBAAU,WDiDS,IAAA0B,KChDA,aDiDf,IAAIE,SAAQ,SAAAC,GAClBJ,EAASC,GAAUO,MAAK,SAAAH,GACvB,IAAMuB,EAAW,GAEXC,EAAgBC,OAAOC,KAAK1B,GAAMZ,KAAI,SAAAuC,GAAC,OAAI3B,EAAK2B,MAElCH,EAAcI,QAAO,SAAAC,GAAC,OAAI,IAAMA,EAAErB,UAC1CsB,SAAQ,SAAAD,GAEnB,IAAME,EAAIP,EAAcI,QAAO,SAAAI,GAAC,OAAIA,EAAExB,SAAWqB,EAAEtE,MAC7C0E,EAAW,GAEjBF,EAAED,SAAQ,SAAAI,GACTD,EAASE,KAAK,CACbrE,KAAMoE,EAAGpE,KACTP,GAAI2E,EAAG3E,QAITgE,EAASY,KAAK,CACbrE,KAAM+D,EAAE/D,KACRP,GAAIsE,EAAEtE,GACN0E,gBAIFlC,EAAQwB,UC3E0BpB,MAAK,SAAAiC,GAC9BhB,EAASgB,QAEd,IAGC,oBAAC,WAAD,MACK,IAAUhC,GACP,2BACItE,MAAO,CACHuG,QAAS,OACTC,cAAe,MACfC,WAAY,aAGhB,2BAAKzG,MAAO,CAAE0G,SAAU,IACpB,oBAAC,aAAD,CACI9B,MAAM,oBACN+B,cAAc,gBACd5B,SAAU,SAAA6B,GAAQ,OACdrB,EAAS,CAAEsB,WAAYC,WAAWF,MAEtCG,WAAY5B,EACZ6B,KAAM1C,KAGd,2BAAKtE,MAAO,CAAEwC,YAAa,QACvB,oBAAC,gBAAD,CACIoC,MAAM,eACNqC,QAAS7B,EACTL,SAAU,kBACNF,EAAc,CAAEO,aAAcA,WAUxD8B,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,aAActC,EAAoB,EAApBA,cAEhC,OACI,oBAAC,mBAAD,KACI,oBAAC,cAAD,CACI/C,MAAM,aACNsF,aALgB,CAAC,mBAMjBtC,MAAOqC,EACPE,SAAU,SAAAC,GAAG,OAAIzC,EAAc,CAAE0C,MAAOD,EAAI7F,MAC5C+F,OAAQ,gBAAGC,EAAH,EAAGA,KAAH,OACJ,oBAAC,cAAD,KACI,oBAAC,SAAD,CAAQC,WAAS,EAAC7E,QAAS4E,GACtB,IAAMN,EAAN,2BAEJ,IAAMA,GACH,oBAAC,SAAD,CACIQ,aAAW,EACX9E,QAAS,kBAAMgC,EAAc,CAAE0C,MAAO,MAF1C,mBAqDbK,EAvCF,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,WAAYpF,EAA+B,EAA/BA,UAAWoC,EAAoB,EAApBA,cAC7BiD,EAAaC,wBAAc,CAC7BtF,cAGIwC,EAAqC4C,EAArC5C,aAAcG,EAAuByC,EAAvBzC,YAAamC,EAAUM,EAAVN,MAE3BpC,EAAW/D,qBAAU,SAAAC,GACzB,MAAO,CACH8D,OAAQ9D,EAAO,eAAe2G,uBAAuB,iBAE1D,IAJK7C,OAMR,OACI,0BAAS2C,EACL,oBAAC,cAAD,CACIlD,MAAO7B,aAAG,mCACVkF,gBAAc,IAEZC,MAAM/C,IACJ,oBAAC,EAAD,CACIP,MAAOK,EACPJ,cAAeA,IAGvB,oBAAC,EAAD,CACIM,OAAQA,EACRC,YAAaA,EACbP,cAAeA,IAEnB,oBAAC,EAAD,CACIsC,aAAcI,EACd1C,cAAeA,OCxIpBsD,EALF,WACT,IAAML,EAAaC,gBAAcI,OACjC,OAAO,oBAAC,WAAaL,I,ykBCMzB,IAAQ9F,EAASoG,EAATpG,KAEFqG,EAAW,CACbvG,MAAOiB,aAAG,yBACVuF,KAAM,eACNC,YAAaxF,aACT,yGAEJyF,SAAU,CAACzF,aAAG,OAAQA,aAAG,aAAcA,aAAG,cAAeA,aAAG,eAC5D0F,QAAS,CACLZ,WAAY,CACRa,cAAe,MACfC,aAAc,MACdC,aAAc,KAGtBhB,OACAO,QAGJU,4BAAkB7G,EAAD,EAAC,KAAWoG,GAAaC,K,iBCjC5B9I,EAAOC,QAAUC,OAAW,GAAe,a,iBCA3CF,EAAOC,QAAUC,OAAW,GAAO,K,gBCAnCF,EAAOC,QAAUC,OAAW,GAAW,S,iBCAvCF,EAAOC,QAAUC,OAAW,GAAgB,c,gBCA5CF,EAAOC,QAAUC,OAAW,GAAc,Y,iBCA1CF,EAAOC,QAAUC,OAAW,GAAY,W","file":"fact-sheet-collection/main-dc9a659c.js","sourcesContent":["(function() { module.exports = window[\"wp\"][\"blocks\"]; }());","(function() { module.exports = window[\"wp\"][\"i18n\"]; }());","module.exports = regeneratorRuntime;","(function() { module.exports = window[\"wp\"][\"primitives\"]; }());","(function() { module.exports = window[\"wp\"][\"keycodes\"]; }());","(function() { module.exports = window[\"wp\"][\"mediaUtils\"]; }());","(function() { module.exports = window[\"wp\"][\"data\"]; }());","import { useEffect, useState } from '@wordpress/element';\n\n// adapted from:  https://usehooks.com/useWindowSize/\n// usage:   const {width, height} = useWindowSize();\nfunction useWindowSize() {\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        // Add event listener\n        window.addEventListener('resize', handleResize);\n\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n\n        // Remove event listener on cleanup\n        return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n}\n\nexport default useWindowSize;\n","/**\n * External Dependencies\n */\nimport styled from '@emotion/styled';\n\n/** \n * WordPress Dependencies\n */\nimport { safeDecodeURI, filterURLForDisplay } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { Button, TextHighlight, Tooltip } from '@wordpress/components';\n\nconst ButtonStyled = styled(Button)`\n\t&:hover {\n\t\t/* Add opacity background to support future color changes */\n\t\t/* Reduce background from #ddd to 0.05 for text contrast  */\n\t\tbackground-color: rgba(0, 0, 0, 0.05);\n\n\t\t.block-editor-link-control__search-item-type {\n\t\t\tcolor: black;\n\t\t}\n\t}\n\n\t.block-editor-link-control__search-item-type {\n\t\tbackground-color: rgba(0, 0, 0, 0.05);\n\t}\n`;\n\n/**\n * SearchItem\n *\n * @param {Object} props react props\n * @param props.suggestion\n * @param props.onClick\n * @param props.searchTerm\n * @param props.isSelected\n * @param props.id\n * @return {*} React JSX\n */\nconst SearchItem = ({ suggestion, onClick, searchTerm, isSelected, id, contentTypes }) => {\n\tconst showType = suggestion.type && contentTypes.length > 1;\n\n\treturn (\n\t\t<Tooltip text={decodeEntities(suggestion.title)}>\n\t\t\t<ButtonStyled\n\t\t\t\tid={id}\n\t\t\t\tonClick={onClick}\n\t\t\t\tclassName={`block-editor-link-control__search-item is-entity ${\n\t\t\t\t\tisSelected && 'is-selected'\n\t\t\t\t}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tborderRadius: '0',\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<span className=\"block-editor-link-control__search-item-header\">\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"block-editor-link-control__search-item-title\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tpaddingRight: !showType ? 0 : null,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextHighlight text={decodeEntities(suggestion.title)} highlight={searchTerm} />\n\t\t\t\t\t</span>\n\t\t\t\t\t<span\n\t\t\t\t\t\taria-hidden\n\t\t\t\t\t\tclassName=\"block-editor-link-control__search-item-info\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tpaddingRight: !showType ? 0 : null,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{filterURLForDisplay(safeDecodeURI(suggestion.url)) || ''}\n\t\t\t\t\t</span>\n\t\t\t\t</span>\n\t\t\t\t{showType && (\n\t\t\t\t\t<span className=\"block-editor-link-control__search-item-type\">\n\t\t\t\t\t\t{/* Rename 'post_tag' to 'tag'. Ideally, the API would return the localised CPT or taxonomy label. */}\n\t\t\t\t\t\t{suggestion.type === 'post_tag' ? 'tag' : suggestion.type}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</ButtonStyled>\n\t\t</Tooltip>\n\t);\n};\n\nexport default SearchItem;","/**\n * External Dependencies\n */\nimport styled from '@emotion/styled';\nimport { sortableHandle } from 'react-sortable-hoc';\n\n/**\n * WordPress Dependencies\n */\nimport { safeDecodeURI, filterURLForDisplay } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect } from '@wordpress/element';\n\n/**\n * SVG Drag Handle\n */\nconst DragHandle = sortableHandle(() => (\n\t<svg\n\t\tstyle={{ marginRight: '5px', cursor: 'grab', flexShrink: 0 }}\n\t\twidth=\"18\"\n\t\theight=\"18\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tviewBox=\"0 0 18 18\"\n\t\trole=\"img\"\n\t\taria-hidden=\"true\"\n\t\tfocusable=\"false\"\n\t>\n\t\t<path d=\"M5 4h2V2H5v2zm6-2v2h2V2h-2zm-6 8h2V8H5v2zm6 0h2V8h-2v2zm-6 6h2v-2H5v2zm6 0h2v-2h-2v2z\" />\n\t</svg>\n));\n\nconst Wrapper = styled('div')`\n\tbutton {\n\t\tdisplay: block;\n\t\tpadding: 2px 8px 6px 8px;\n\t\tmargin-left: auto;\n\t\tfont-size: 2em;\n\t\tcursor: pointer;\n\t\tborder: none;\n\t\tbackground-color: transparent;\n\n\t\t&:hover {\n\t\t\tbackground-color: #ccc;\n\t\t}\n\t}\n`;\n\n\n/**\n * PickedItem\n *\n * @param {Object} props react props\n * @return {*} React JSX\n */\nconst PickedItem = ({ item, isOrderable = false, handleItemDelete, mode }) => {\n\tconst type = mode === 'post' ? 'postType' : 'taxonomy';\n\n\t// This will return undefined while the item data is being fetched. If the item comes back\n\t// empty, it will return null, which is handled in the effect below.\n\tconst preparedItem = useSelect(\n\t\t(select) => {\n\t\t\tconst { getEntityRecord, hasFinishedResolution } = select('core');\n\n\t\t\tconst getEntityRecordParameters = [type, item.type, item.id];\n\t\t\tconst result = getEntityRecord(...getEntityRecordParameters);\n\n\t\t\tif (result) {\n\t\t\t\tconsole.log(\"Has Item\", result);\n\t\t\t\tconst newItem = {\n\t\t\t\t\ttitle: mode === 'post' ? result.title.rendered : result.name,\n\t\t\t\t\turl: result.link,\n\t\t\t\t\tid: result.id,\n\t\t\t\t};\n\n\t\t\t\tif (item.uuid) {\n\t\t\t\t\tnewItem.uuid = item.uuid;\n\t\t\t\t}\n\n\t\t\t\treturn newItem;\n\t\t\t}\n\n\t\t\tif (hasFinishedResolution('getEntityRecord', getEntityRecordParameters)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\t[item.id, type],\n\t);\n\n\t// If `getEntityRecord` did not return an item, pass it to the delete callback.\n\tuseEffect(() => {\n\t\tif (preparedItem === null) {\n\t\t\thandleItemDelete(item);\n\t\t}\n\t}, [item, handleItemDelete, preparedItem]);\n\n\treturn preparedItem ? (\n\t\t<Wrapper\n\t\t\tstyle={{\n\t\t\t\tborder: '2px dashed #ddd',\n\t\t\t\tpaddingTop: '10px',\n\t\t\t\tpaddingBottom: '10px',\n\t\t\t\tpaddingLeft: isOrderable ? '3px' : '8px',\n\t\t\t}}\n\t\t\tclassName=\"block-editor-link-control__search-item is-entity\"\n\t\t>\n\t\t\t{isOrderable ? <DragHandle /> : ''}\n\t\t\t<span className=\"block-editor-link-control__search-item-header\">\n\t\t\t\t<span className=\"block-editor-link-control__search-item-title\">\n\t\t\t\t\t{decodeEntities(preparedItem.title)}\n\t\t\t\t</span>\n\t\t\t\t<span aria-hidden className=\"block-editor-link-control__search-item-info\">\n\t\t\t\t\t{filterURLForDisplay(safeDecodeURI(preparedItem.url)) || ''}\n\t\t\t\t</span>\n\t\t\t</span>\n\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\thandleItemDelete(preparedItem);\n\t\t\t\t}}\n\t\t\t\taria-label={__('Delete item', '10up-block-components')}\n\t\t\t>\n\t\t\t\t&times;\n\t\t\t</button>\n\t\t</Wrapper>\n\t) : (\n\t\t<div />\n\t);\n};\n\nexport default PickedItem;","/**\n * External Dependencies\n */\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\n\n/**\n * Internal Dependencies\n */\nimport PickedItem from './picked-item';\n\nconst SortableList = SortableContainer(({ items, isOrderable, handleItemDelete, mode, ChildComponent = false }) => {\n\tconst ItemComponent = false !== ChildComponent ? (isOrderable ? SortableElement(ChildComponent) : ChildComponent) : isOrderable ? SortableElement(PickedItem) : PickedItem;\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tfontFamily:\n\t\t\t\t\t'-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif',\n\t\t\t}}\n\t\t>\n\t\t\t{items.map((item, index) => {\n\t\t\t\tconst itemKey = item.uuid ? item.uuid : item.id;\n\t\t\t\treturn <ItemComponent\n\t\t\t\t\tisOrderable={isOrderable && items.length > 1 ? isOrderable : false}\n\t\t\t\t\tkey={`item-${itemKey}`}\n\t\t\t\t\tindex={index}\n\t\t\t\t\thandleItemDelete={handleItemDelete}\n\t\t\t\t\tsortIndex={index}\n\t\t\t\t\titem={item}\n\t\t\t\t\tmode={mode}\n\t\t\t\t\ttotalItems={items.length}\n\t\t\t\t/>\n\t\t\t})}\n\t\t</div>\n\t);\n});\n\nexport default SortableList;","/**\n * External Dependencies\n */\nimport { v4 as uuidv4 } from 'uuid';\nimport arrayMove from 'array-move';\nimport styled from '@emotion/styled';\n\n/**\n * WordPress Dependencies\n */\nimport { select } from '@wordpress/data';\nimport { useState, useEffect, useMemo } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { Button, ButtonGroup, Modal } from '@wordpress/components';\n\n/**\n * Internal Dependencies\n */\nimport { ContentSearch } from '../content-search';\nimport SortableList from './sortable-list';\n\nconst NAMESPACE = 'prc-content-picker';\n\n/**\n * Unfortunately, we had to use !important because on PickedItem we couldn't @emotion/styled css\n * as it was breaking sortability from react-sortable-hoc\n */\nconst StyleWrapper = styled('div')`\n\t& .block-editor-link-control__search-item {\n\t\tborder: none !important;\n\t\tcursor: default;\n\n\t\t&:hover {\n\t\t\tbackground: transparent;\n\t\t}\n\t}\n`;\n\n/**\n * Content Picker\n */\nconst ContentPicker = ({\n\tlabel,\n\tplaceholder,\n\tmode = 'post',\n\tcontentTypes = ['post', 'page'],\n\tonPickChange = (ids) => {\n        console.log('Content picker list change', ids); // eslint-disable-line no-console\n    },\n\tmaxContentItems = 1,\n\tisOrderable = false,\n\tsinglePickedLabel = __('You have selected the following item:', 'prc-block-components'),\n\tmultiPickedLabel = __('You have selected the following items:', 'prc-block-components'),\n\tvalue = [],\n\tuniqueContentItems = true,\n\texcludeCurrentPost = true,\n\tperPage = 50,\n\tPickedItemChild = false,\n\tsearchStyle = 'search',\n}) => {\n\tconst [content, setContent] = useState(value);\n\n\tconst currentPostId = select('core/editor')?.getCurrentPostId();\n\n\tuseEffect(()=> {\n\t\tconsole.log(\"Init content state\", value);\n\t}, []);\n\n\t// Run onPickChange callback when content changes.\n\tuseEffect(() => {\n\t\tif ( content !== value && content.length !== 0 ) {\n\t\t\tconsole.log(\"useEffect onPickChange->\", content); // eslint-disable-line no-console\n\t\t\tonPickChange(content);\n\t\t}\n\t}, [content]);\n\n\tconst handleSelect = (item, isUrl = false) => {\n\t\tconsole.log(\"handleSelect->\", item, isUrl); // eslint-disable-line no-console\n\t\tif ( true === isUrl ) {\n\t\t\tsetContent((previousContent) => [\n\t\t\t\t{\n\t\t\t\t\tuuid: uuidv4(),\n\t\t\t\t\ttype: 'subtype' in item ? item.subtype : item.type,\n\t\t\t\t\turl: item.url,\n\t\t\t\t},\n\t\t\t\t...previousContent,\n\t\t\t]);\n\t\t} else {\n\t\t\tsetContent((previousContent) => [\n\t\t\t\t{\n\t\t\t\t\tid: item.id,\n\t\t\t\t\tuuid: uuidv4(),\n\t\t\t\t\ttype: 'subtype' in item ? item.subtype : item.type,\n\t\t\t\t\turl: item.url,\n\t\t\t\t},\n\t\t\t\t...previousContent,\n\t\t\t]);\n\t\t}\n\t};\n\n\tconst onDeleteItem = (deletedItem) => {\n\t\tsetContent((previousContent) => {\n\t\t\treturn previousContent.filter(({ id, uuid }) => {\n\t\t\t\tif (deletedItem.uuid) {\n\t\t\t\t\treturn uuid !== deletedItem.uuid;\n\t\t\t\t} else {\n\t\t\t\t\treturn id !== deletedItem.id;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\tconst excludeItems = useMemo(() => {\n\t\tconst items = uniqueContentItems ? [...content] : [];\n\n\t\tif (excludeCurrentPost && currentPostId) {\n\t\t\titems.push({\n\t\t\t\tid: currentPostId\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}, [content, currentPostId, excludeCurrentPost, uniqueContentItems]);\n\n\treturn (\n\t\t<div className={`${NAMESPACE}`}>\n\t\t\t{(!content.length || (content.length && content.length < maxContentItems)) && (\n\t\t\t\t<ContentSearch\n\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\texcludeItems={excludeItems}\n\t\t\t\t\tonSelectItem={handleSelect}\n\t\t\t\t\tcontentTypes={contentTypes}\n\t\t\t\t\tmode={mode}\n\t\t\t\t\tperPage={perPage}\n\t\t\t\t\tstyle={searchStyle}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{Boolean(content?.length) > 0 && (\n\t\t\t\t<StyleWrapper>\n\t\t\t\t\t<span\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmarginTop: '15px',\n\t\t\t\t\t\t\tmarginBottom: '2px',\n\t\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{content.length > 1 ? multiPickedLabel : singlePickedLabel}\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<SortableList\n\t\t\t\t\t\titems={content}\n\t\t\t\t\t\tuseDragHandle\n\t\t\t\t\t\thandleItemDelete={onDeleteItem}\n\t\t\t\t\t\tisOrderable={isOrderable}\n\t\t\t\t\t\tmode={mode}\n\t\t\t\t\t\tonSortEnd={({ oldIndex, newIndex }) => {\n\t\t\t\t\t\t\tconst newContent = [...arrayMove(content, oldIndex, newIndex)];\n\t\t\t\t\t\t\tconsole.log(\"newContent?\", newContent);\n\t\t\t\t\t\t\tsetContent(newContent);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tChildComponent={PickedItemChild}\n\t\t\t\t\t/>\n\t\t\t\t</StyleWrapper>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport { ContentPicker };\n","const DEFAULT_STATE = [];\n\nconst reducer = (state = DEFAULT_STATE, action) => {\n    // Cloned is used in reorder, setItem, and setItemProp:\n    const cloned = [...state];\n    // eslint-disable-next-line default-case\n    switch (action.type) {\n        case 'SEED':\n            return [...action.items];\n        case 'APPEND':\n            return [...state, ...action.items];\n        case 'PREPEND':\n            return [...action.items, ...state];\n        case 'INSERT':\n            return [\n                ...state.slice(0, action.index),\n                ...action.items,\n                ...state.slice(action.index),\n            ];\n        case 'APPLY':\n            return state.map((item, index) => action.fn(item, index));\n        case 'REMOVE':\n            return state.filter((_, index) => !action.indexes.includes(index));\n        case 'REORDER':\n            // eslint-disable-next-line no-case-declarations\n            const item = state[action.from];\n\n            cloned.splice(action.from, 1);\n            cloned.splice(action.to, 0, item);\n\n            return cloned;\n        case 'SET_ITEM':\n            cloned[action.index] = action.item;\n            return cloned;\n        case 'SET_ITEM_PROP':\n            cloned[action.index] = {\n                ...cloned[action.index],\n                [action.prop]: action.value,\n            };\n            return cloned;\n    }\n\n    return state;\n};\n\nexport default reducer;\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ifMatchSetAttribute = (\n    needle,\n    haystack,\n    attrKey,\n    attrValue,\n    setAttributes,\n) => {\n    if (needle === haystack) {\n        setAttributes({ [attrKey]: attrValue });\n    }\n};\n\nconst randomId = () => {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return `_${Math.random().toString(36).substr(2, 9)}`;\n};\n\nconst getTermsByLetter = (taxonomy, letter) => {\n\treturn new Promise(resolve => {\n\t\tapiFetch({\n\t\t\tpath: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n\t\t}).then(terms => {\n\t\t\tresolve(terms);\n\t\t});\n\t});\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n\treturn new Promise(resolve => {\n\t\tconst data = {};\n\t\tapiFetch({\n\t\t\tpath: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n\t\t}).then(terms => {\n\t\t\tfor (let index = 0; index < terms.length; index++) {\n\t\t\t\tconst slug = terms[index].slug.replace(\n\t\t\t\t\t`${taxonomy.toLowerCase()}_`,\n\t\t\t\t\t'',\n\t\t\t\t);\n\t\t\t\tdata[terms[index].id] = {\n\t\t\t\t\tid: terms[index].id,\n\t\t\t\t\tname: terms[index].name,\n\t\t\t\t\tparent: terms[index].parent,\n\t\t\t\t\tslug,\n\t\t\t\t};\n\t\t\t}\n\t\t\tresolve(data);\n\t\t});\n\t});\n};\n\nconst getTermsAsOptions = (\n\ttaxonomy,\n\tperPage,\n\ttermValue = 'slug',\n\tsortByLabel = true,\n) => {\n\treturn new Promise(resolve => {\n\t\tgetTerms(taxonomy, perPage).then(data => {\n\t\t\tconst labelOptions = [];\n\n\t\t\tObject.keys(data).forEach(key => {\n\t\t\t\tconst termObj = data[key];\n\n\t\t\t\tlet value = termObj[termValue];\n\n\t\t\t\tlet label = termObj.name;\n\t\t\t\tif (undefined !== termObj.parent && 0 !== termObj.parent) {\n\t\t\t\t\tlabel = ` -- ${label}`;\n\t\t\t\t}\n\n\t\t\t\tlabelOptions.push({\n\t\t\t\t\tvalue,\n\t\t\t\t\tlabel,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (false !== sortByLabel) {\n\t\t\t\tlabelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\t\t\t}\n\n\t\t\tresolve(labelOptions);\n\t\t});\n\t});\n};\n\nconst getTermsAsTree = taxonomy => {\n\treturn new Promise(resolve => {\n\t\tgetTerms(taxonomy).then(data => {\n\t\t\tconst treeData = [];\n\t\t\t// Convert data from object of objects to array of objects.\n\t\t\tconst convertedData = Object.keys(data).map(i => data[i]);\n\t\t\t// Filter out the parent terms first\n\t\t\tconst parentTerms = convertedData.filter(e => 0 === e.parent);\n\t\t\tparentTerms.forEach(e => {\n\t\t\t\t// Get children by filtering for terms with parent matching this id in loop.\n\t\t\t\tconst c = convertedData.filter(f => f.parent === e.id);\n\t\t\t\tconst children = [];\n\t\t\t\t// Construct children array.\n\t\t\t\tc.forEach(cT => {\n\t\t\t\t\tchildren.push({\n\t\t\t\t\t\tname: cT.name,\n\t\t\t\t\t\tid: cT.id,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t// Finally, push the fully structured parent -> child relationship to the tree data.\n\t\t\t\ttreeData.push({\n\t\t\t\t\tname: e.name,\n\t\t\t\t\tid: e.id,\n\t\t\t\t\tchildren,\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tresolve(treeData);\n\t\t});\n\t});\n};\n\n\nexport {\n\tgetTerms,\n\tgetTermsByLetter,\n\tgetTermsAsOptions,\n\tgetTermsAsTree,\n\tifMatchSetAttribute,\n\trandomId,\n};\n","/* eslint-disable no-restricted-globals */\n// eslint-disable-next-line import/no-unresolved\n/**\n * External Dependencies\n */\nimport { getTermsAsTree } from '@prc-app/shared';\n\n/**\n * WordPress Dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport {\n    useBlockProps,\n    MediaUpload,\n    MediaUploadCheck,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    ButtonGroup,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    TreeSelect,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\nconst AltPostLabelControl = ({ label, setAttributes }) => {\n    return (\n        <Fragment>\n            <TextControl\n                label=\"Alternate Post Label\"\n                value={label}\n                onChange={l => setAttributes({ altPostLabel: l })}\n            />\n        </Fragment>\n    );\n};\n\nconst CollectionTermControl = ({ termId, enableFlags, setAttributes }) => {\n    const [terms, setTerms] = useState(false);\n    const { editPost } = useDispatch('core/editor');\n\n    useEffect(() => {\n        getTermsAsTree('collection').then(options => {\n            setTerms(options);\n        });\n    }, []);\n\n    return (\n        <Fragment>\n            {false !== terms && (\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'flex-end',\n                    }}\n                >\n                    <div style={{ flexGrow: 1 }}>\n                        <TreeSelect\n                            label=\"Select Collection\"\n                            noOptionLabel=\"No Collection\"\n                            onChange={selected =>\n                                editPost({ collection: parseFloat(selected) })\n                            }\n                            selectedId={termId}\n                            tree={terms}\n                        />\n                    </div>\n                    <div style={{ paddingLeft: '1em' }}>\n                        <ToggleControl\n                            label=\"Enable Flags\"\n                            checked={enableFlags}\n                            onChange={() =>\n                                setAttributes({ enableFlags: !enableFlags })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n        </Fragment>\n    );\n};\n\nconst PDFControl = ({ attachmentId, setAttributes }) => {\n    const ALLOWED_MEDIA_TYPES = ['application/pdf'];\n    return (\n        <MediaUploadCheck>\n            <MediaUpload\n                title=\"Upload PDF\"\n                allowedTypes={ALLOWED_MEDIA_TYPES}\n                value={attachmentId}\n                onSelect={pdf => setAttributes({ pdfId: pdf.id })}\n                render={({ open }) => (\n                    <ButtonGroup>\n                        <Button isPrimary onClick={open}>\n                            {0 === attachmentId ? `Upload PDF` : `Change PDF`}\n                        </Button>\n                        {0 !== attachmentId && (\n                            <Button\n                                isSecondary\n                                onClick={() => setAttributes({ pdfId: 0 })}\n                            >\n                                Clear PDF\n                            </Button>\n                        )}\n                    </ButtonGroup>\n                )}\n            />\n        </MediaUploadCheck>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes }) => {\n    const blockProps = useBlockProps({\n        className,\n    });\n\n    const { altPostLabel, enableFlags, pdfId } = attributes;\n\n    const { termId } = useSelect(select => {\n        return {\n            termId: select('core/editor').getEditedPostAttribute('collection'),\n        };\n    }, []);\n\n    return (\n        <div {...blockProps}>\n            <Placeholder\n                label={__('Configure Fact Sheet Collection')}\n                isColumnLayout\n            >\n                {!isNaN(termId) && (\n                    <AltPostLabelControl\n                        label={altPostLabel}\n                        setAttributes={setAttributes}\n                    />\n                )}\n                <CollectionTermControl\n                    termId={termId}\n                    enableFlags={enableFlags}\n                    setAttributes={setAttributes}\n                />\n                <PDFControl\n                    attachmentId={pdfId}\n                    setAttributes={setAttributes}\n                />\n            </Placeholder>\n        </div>\n    );\n};\n\nexport default edit;\n","// eslint-disable-next-line import/no-unresolved\nimport { Fragment } from '@wordpress/element';\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/** Returns a server side block callback */\nconst save = () => {\n    const blockProps = useBlockProps.save();\n    return <Fragment {...blockProps} />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Fact Sheet Collection'),\n    icon: 'format-aside',\n    description: __(\n        'Set and display a collection of Fact Sheets. Set a report PDF or label for an alternat language post.',\n    ),\n    keywords: [__('prc'), __('factsheet'), __('fact sheet'), __('collection')],\n    example: {\n        attributes: {\n            altLangPostId: 61623,\n            collectionId: 12812,\n            reportPdfUrl: '',\n        },\n    },\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","(function() { module.exports = window[\"wp\"][\"blockEditor\"]; }());","(function() { module.exports = window[\"wp\"][\"url\"]; }());","(function() { module.exports = window[\"wp\"][\"element\"]; }());","(function() { module.exports = window[\"wp\"][\"htmlEntities\"]; }());","(function() { module.exports = window[\"wp\"][\"components\"]; }());","(function() { module.exports = window[\"wp\"][\"apiFetch\"]; }());"],"sourceRoot":""}