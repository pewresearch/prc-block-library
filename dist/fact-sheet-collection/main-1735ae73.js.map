{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.htmlEntities\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/fact-sheet-collection/edit.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/fact-sheet-collection/save.js","webpack:///./src/fact-sheet-collection/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.i18n\"","webpack:///external \"moment\"","webpack:///external \"wp.element\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.data\"","webpack:///external \"ReactDOM\"","webpack:///external \"lodash\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\""],"names":["module","exports","React","wp","htmlEntities","getTerms","taxonomy","Promise","resolve","data","apiFetch","path","then","terms","index","length","slug","replace","toLowerCase","id","name","parent","AltPostIdControl","withState","termsData","excludeData","includeData","setState","exclude","include","letter","setAttributes","isSelected","loadTerms","getTermsByLetter","state","JSON","parse","includeArr","map","term","push","term_id","stringify","stateInit","useDidMount","staticData","className","href","checked","includes","label","decodeEntities","onChange","b","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin","url","useState","isLinkOpen","setIsLinkOpen","aria-expanded","aria-haspopup","__","icon","onClick","showTooltip","position","onClose","value","showInitialSuggestions","suggestionsQuery","type","subtype","p","altPostUrl","settings","AltLangPostControl","l","altPostLabel","CollectionTermControl","setTerms","useSelect","select","getEditedPostAttribute","editPost","useDispatch","useEffect","treeData","convertedData","Object","keys","i","filter","e","forEach","c","f","children","cT","options","noOptionLabel","selected","console","log","collection","parseFloat","selectedId","tree","PDFControl","attachmentId","title","allowedTypes","onSelect","pdf","pdfId","render","open","class","edit","attributes","blockProps","clientId","useBlockProps","collectionType","Segment","color","inverted","save","metadata","description","keywords","example","altLangPostId","collectionId","reportPdfUrl","registerBlockType","blockEditor","components","i18n","moment","element","ReactDOM","lodash","blocks"],"mappings":"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","file":"fact-sheet-collection/main-1735ae73.js","sourcesContent":["module.exports = React;","module.exports = wp.htmlEntities;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst structureTermsHierarchically = (terms) => {\n    return null;\n}\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage, termValue = 'name', sortByLabel = true ) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                \n                let value = termObj.name;\n                if ( 'termid' === termValue ) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if ( undefined !== termObj.parent && 0 !== termObj.parent ) {\n                    label = ' -- ' + label;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if ( false !== sortByLabel ) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = (taxonomy) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter( e => e.parent === 0 );\n            parentTerms.forEach( e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter( f => f.parent === e.id );\n                let children = [];\n                // Construct children array.\n                c.forEach( cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children\n                });\n            } );\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","// eslint-disable-next-line import/no-unresolved\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport { useBlockProps, MediaUpload, MediaUploadCheck, RichText, BlockControls, __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport {\n    ToolbarButton, \n    ToolbarGroup, \n    Popover,\n    TextControl,\n    TreeSelect,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport apiFetch from '@wordpress/api-fetch';\nimport { Segment } from 'semantic-ui-react';\n\nimport { getTermsAsTree } from 'shared';\n\nconst AltPostIdControl = ({url, setAttributes}) => {\n    const [ isLinkOpen, setIsLinkOpen ] = useState( false );\n    return(\n        <BlockControls>\n            <ToolbarGroup>\n                <ToolbarButton\n                    aria-expanded={isLinkOpen}\n                    aria-haspopup=\"true\"\n                    label={__('Set Link')}\n                    icon=\"admin-links\"\n                    onClick={()=>setIsLinkOpen(!isLinkOpen)}\n                    showTooltip\n                />\n                {true === isLinkOpen && (\n                    <Popover\n                        position=\"bottom center\"\n                        onClose={ () => setIsLinkOpen( false ) }\n                    >\n                        <LinkControl\n                            className=\"wp-block-navigation-link__inline-link-input\"\n                            value={{ url }}\n                            showInitialSuggestions={ true }\n                            suggestionsQuery={ { type: 'post', subtype: 'fact-sheets' } }\n                            onChange={(p) => {\n                                setAttributes({altPostUrl: p.url});\n                            }}\n                            settings={[]}\n                        />\n                    </Popover>\n                )}\n            </ToolbarGroup>\n        </BlockControls>\n    );\n}\n\nconst AltLangPostControl = ({url, label, isSelected, setAttributes}) => {\n    return(\n        <Fragment>\n            <TextControl\n                label=\"Alt Post Label\"\n                value={ label }\n                onChange={ l => setAttributes({ altPostLabel: l }) }\n            />\n            <AltPostIdControl url={url} setAttributes={setAttributes}/>\n        </Fragment>\n    );\n}\n\nconst CollectionTermControl = ({type, isSelected, setAttributes}) => {\n    const [terms, setTerms] = useState(false);\n\n    const { termId } = useSelect( ( select ) => {\n        return {\n            termId: select( 'core/editor' ).getEditedPostAttribute('collection'),\n        }\n    }, [] );\n    \n    const { editPost } = useDispatch('core/editor');\n\n    useEffect(()=>{\n        getTermsAsTree('collection').then(options => {\n            setTerms(options);\n        })\n    }, []);\n\n    return(\n        <Fragment>\n            {terms !== false && (\n                <TreeSelect\n                    label=\"Select Collection\"\n                    noOptionLabel=\"No Collection\"\n                    onChange={ selected => {\n                        console.log(\"Collection Selected\", selected);\n                        editPost({ collection: parseFloat(selected) });\n                    } }\n                    selectedId={ termId }\n                    tree={terms}\n                />\n            )}\n        </Fragment>\n    );\n}\n\nconst PDFControl = ({attachmentId, isSelected, setAttributes}) => {\n    const ALLOWED_MEDIA_TYPES = ['application/pdf', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.ms-powerpoint', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    return(\n        <Fragment>\n            <MediaUploadCheck>\n                <MediaUpload\n                    title={`Upload PDF`}\n                    allowedTypes={ALLOWED_MEDIA_TYPES}\n                    value={attachmentId}\n                    onSelect={pdf => setAttributes({pdfId: pdf.id})}\n                    render={({ open }) => {\n                        return (\n                            <Fragment>\n                                {null === attachmentId && <a onClick={open}><i class=\"icon file pdf outline\"></i>Upload a PDF version of this fact sheet</a> }\n                                {null !== attachmentId && <a onClick={open}><i class=\"icon file pdf outline\"></i>Change the PDF version of this fact sheet</a> }\n                            </Fragment>\n                        );\n                    }}\n                />\n            </MediaUploadCheck>\n        </Fragment>\n    );\n}\n\n/** Returns a server side block callback */\nconst edit = ({ attributes, className, setAttributes, isSelected, clientId}) => {\n    const blockProps = useBlockProps( {\n        className\n    } );\n    const { \n        altPostUrl,\n        altPostLabel,\n        collectionType,\n        pdfId\n    } = attributes;\n    return(\n        <div { ...blockProps }>\n            <Segment color=\"beige\" inverted>\n                <AltLangPostControl url={altPostUrl} label={altPostLabel} isSelected={isSelected} setAttributes={setAttributes}/>\n                <CollectionTermControl type={collectionType} isSelected={isSelected} setAttributes={setAttributes}/>\n                <PDFControl attachmentId={pdfId} isSelected={isSelected} setAttributes={setAttributes}/>\n            </Segment>\n        </div>\n    );\n};\n\nexport default edit;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","// eslint-disable-next-line import/no-unresolved\nimport { Fragment } from '@wordpress/element';\n\n/** Returns a server side block callback */\nconst save = ({ attributes }) => {\n    const props = attributes;\n    return <Fragment></Fragment>;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n\ttitle: __( 'Fact Sheet Collection' ),\n\ticon: 'format-aside',\n\tdescription: __(\"Set and display a collection of Fact Sheet's. Set a report PDF or alternate language post.\"),\n\tkeywords: [__('prc'), __('factsheet'), __('fact sheet'), __('collection')],\n\texample: {\n        attributes: {\n            altLangPostId: 61623,\n            collectionId: 12812,\n            reportPdfUrl: ''\n        },\n    },\n\tedit,\n    save,\n};\n\nregisterBlockType( name, {...metadata, ...settings});","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.i18n;","module.exports = moment;","module.exports = wp.element;","module.exports = wp.apiFetch;","module.exports = wp.data;","module.exports = ReactDOM;","module.exports = lodash;","module.exports = wp.blocks;","module.exports = wp.url;"],"sourceRoot":""}