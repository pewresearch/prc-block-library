{"version":3,"sources":["webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"apiFetch\"]","webpack:///external [\"wp\",\"keycodes\"]","webpack:///external \"moment\"","webpack:///./src/fact-sheet-collection/edit.js","webpack:///./src/fact-sheet-collection/save.js","webpack:///./src/fact-sheet-collection/index.js","webpack:///external [\"wp\",\"i18n\"]","webpack:///external [\"wp\",\"data\"]","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"url\"]","webpack:///external [\"wp\",\"blocks\"]"],"names":["module","exports","window","moment","AltPostLabelControl","label","setAttributes","value","onChange","l","altPostLabel","CollectionTermControl","termId","enableFlags","useState","terms","setTerms","editPost","useDispatch","useEffect","getTermsAsTree","then","options","style","display","flexDirection","alignItems","flexGrow","noOptionLabel","selected","collection","parseFloat","selectedId","tree","paddingLeft","checked","PDFControl","attachmentId","title","allowedTypes","onSelect","pdf","pdfId","id","render","open","isPrimary","onClick","isSecondary","edit","attributes","className","blockProps","useBlockProps","useSelect","select","getEditedPostAttribute","__","isColumnLayout","isNaN","save","name","metadata","settings","icon","description","keywords","example","altLangPostId","collectionId","reportPdfUrl","registerBlockType"],"mappings":"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","file":"fact-sheet-collection/main-4e19c980.js","sourcesContent":["(function() { module.exports = window[\"wp\"][\"components\"]; }());","(function() { module.exports = window[\"wp\"][\"apiFetch\"]; }());","(function() { module.exports = window[\"wp\"][\"keycodes\"]; }());","module.exports = moment;","/* eslint-disable no-restricted-globals */\n// eslint-disable-next-line import/no-unresolved\n/**\n * External Dependencies\n */\nimport { getTermsAsTree } from '@pewresearch/app-components';\n\n/**\n * WordPress Dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport {\n    useBlockProps,\n    MediaUpload,\n    MediaUploadCheck,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    ButtonGroup,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    TreeSelect,\n} from '@wordpress/components';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\nconst AltPostLabelControl = ({ label, setAttributes }) => {\n    return (\n        <Fragment>\n            <TextControl\n                label=\"Alternate Post Label\"\n                value={label}\n                onChange={l => setAttributes({ altPostLabel: l })}\n            />\n        </Fragment>\n    );\n};\n\nconst CollectionTermControl = ({ termId, enableFlags, setAttributes }) => {\n    const [terms, setTerms] = useState(false);\n    const { editPost } = useDispatch('core/editor');\n\n    useEffect(() => {\n        getTermsAsTree('collection').then(options => {\n            setTerms(options);\n        });\n    }, []);\n\n    return (\n        <Fragment>\n            {false !== terms && (\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'flex-end',\n                    }}\n                >\n                    <div style={{ flexGrow: 1 }}>\n                        <TreeSelect\n                            label=\"Select Collection\"\n                            noOptionLabel=\"No Collection\"\n                            onChange={selected =>\n                                editPost({ collection: parseFloat(selected) })\n                            }\n                            selectedId={termId}\n                            tree={terms}\n                        />\n                    </div>\n                    <div style={{ paddingLeft: '1em' }}>\n                        <ToggleControl\n                            label=\"Enable Flags\"\n                            checked={enableFlags}\n                            onChange={() =>\n                                setAttributes({ enableFlags: !enableFlags })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n        </Fragment>\n    );\n};\n\nconst PDFControl = ({ attachmentId, setAttributes }) => {\n    const ALLOWED_MEDIA_TYPES = ['application/pdf'];\n    return (\n        <MediaUploadCheck>\n            <MediaUpload\n                title=\"Upload PDF\"\n                allowedTypes={ALLOWED_MEDIA_TYPES}\n                value={attachmentId}\n                onSelect={pdf => setAttributes({ pdfId: pdf.id })}\n                render={({ open }) => (\n                    <ButtonGroup>\n                        <Button isPrimary onClick={open}>\n                            {0 === attachmentId ? `Upload PDF` : `Change PDF`}\n                        </Button>\n                        {0 !== attachmentId && (\n                            <Button\n                                isSecondary\n                                onClick={() => setAttributes({ pdfId: 0 })}\n                            >\n                                Clear PDF\n                            </Button>\n                        )}\n                    </ButtonGroup>\n                )}\n            />\n        </MediaUploadCheck>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes }) => {\n    const blockProps = useBlockProps({\n        className,\n    });\n\n    const { altPostLabel, enableFlags, pdfId } = attributes;\n\n    const { termId } = useSelect(select => {\n        return {\n            termId: select('core/editor').getEditedPostAttribute('collection'),\n        };\n    }, []);\n\n    return (\n        <div {...blockProps}>\n            <Placeholder\n                label={__('Configure Fact Sheet Collection')}\n                isColumnLayout\n            >\n                {!isNaN(termId) && (\n                    <AltPostLabelControl\n                        label={altPostLabel}\n                        setAttributes={setAttributes}\n                    />\n                )}\n                <CollectionTermControl\n                    termId={termId}\n                    enableFlags={enableFlags}\n                    setAttributes={setAttributes}\n                />\n                <PDFControl\n                    attachmentId={pdfId}\n                    setAttributes={setAttributes}\n                />\n            </Placeholder>\n        </div>\n    );\n};\n\nexport default edit;\n","// eslint-disable-next-line import/no-unresolved\nimport { Fragment } from '@wordpress/element';\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/** Returns a server side block callback */\nconst save = () => {\n    const blockProps = useBlockProps.save();\n    return <Fragment {...blockProps} />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Fact Sheet Collection'),\n    icon: 'format-aside',\n    description: __(\n        'Set and display a collection of Fact Sheets. Set a report PDF or label for an alternat language post.',\n    ),\n    keywords: [__('prc'), __('factsheet'), __('fact sheet'), __('collection')],\n    example: {\n        attributes: {\n            altLangPostId: 61623,\n            collectionId: 12812,\n            reportPdfUrl: '',\n        },\n    },\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","(function() { module.exports = window[\"wp\"][\"i18n\"]; }());","(function() { module.exports = window[\"wp\"][\"data\"]; }());","(function() { module.exports = window[\"wp\"][\"blockEditor\"]; }());","(function() { module.exports = window[\"wp\"][\"element\"]; }());","(function() { module.exports = window[\"wp\"][\"url\"]; }());","(function() { module.exports = window[\"wp\"][\"blocks\"]; }());"],"sourceRoot":""}