{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.domReady\"","webpack:///external \"wp.element\"","webpack:///./src/mailchimp-form/frontend.js","webpack:///external \"ReactDOM\"","webpack:///./src/mailchimp-form/component.js","webpack:///external \"wp.apiFetch\""],"names":["module","exports","React","wp","domReady","element","document","querySelector","querySelectorAll","forEach","elm","props","display","interest","getAttribute","className","render","ReactDOM","MailchimpForm","useState","error","toggleError","loading","toggleLoading","emailAddress","setEmail","dimmerActive","toggleDimmer","dimmerMessage","setDimmerMessage","reset","enableDimmer","Dimmable","as","id","dimmed","onSubmit","e","preventDefault","email","setTimeout","apiFetch","path","method","then","res","console","log","info","catch","code","Field","Input","placeholder","type","data-validate","required","onChange","target","value","Button","secondary","content","active","onClickOutside"],"mappings":";;;;;;;;;;;;;;;;;2IAAAA,EAAOC,QAAUC,O,kBCAjBF,EAAOC,QAAUE,GAAGC,U,iBCApBJ,EAAOC,QAAUE,GAAGE,S,8ECApB,6CAMAD,KAAS,WACDE,SAASC,cAAc,6BACVD,SAASE,iBAAiB,4BAClCC,SAAQ,SAAAC,GACT,IAAMC,EAAQ,CACVC,SAAS,EACTC,SAAUH,EAAII,aAAa,mBAC3BC,UAAWL,EAAII,aAAa,eAEhCE,iBAAO,oBAAC,IAAkBL,GAAWD,U,iBCfjDV,EAAOC,QAAUgB,U,2FCyGFC,IAnGO,SAAC,GAAsC,IAApCN,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,UAAgB,EAC3BI,oBAAS,GADkB,mBACjDC,EADiD,KAC1CC,EAD0C,OAEvBF,oBAAS,GAFc,mBAEjDG,EAFiD,KAExCC,EAFwC,OAGvBJ,mBAAS,IAHc,mBAGjDK,EAHiD,KAGnCC,EAHmC,OAInBN,oBAAS,GAJU,mBAIjDO,EAJiD,KAInCC,EAJmC,OAKdR,mBAAS,OALK,mBAKjDS,EALiD,KAKlCC,EALkC,KAOlDC,EAAQ,SAAAC,GACVV,GAAY,GACZE,GAAc,GACdE,EAAS,KACL,IAASM,IACTJ,GAAa,GACbE,EAAiB,MA+CzB,OACI,oBAAC,IAAOG,SAAR,CACIC,GAAG,MACHC,GAAG,oBACHC,OAAQT,EACRX,UAAWA,GAEX,oBAAC,IAAD,CAAMA,UAAU,YAAYK,MAAOA,EAAOgB,SAlD5B,SAAAC,GAGlB,GAFAA,EAAEC,kBAEE,IAAS1B,EAAb,CAIA,IAAM2B,EAAQf,EAEdD,GAAc,GAEdiB,YAAW,WACPC,IAAS,CACLC,KAAK,0CAAD,OAA4CH,EAA5C,sBAA+D1B,GACnE8B,OAAQ,SAEPC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZC,QAAQE,KAAK,0BACbnB,EACI,uDAEJF,GAAa,MAEhBiB,MAAK,WACFd,GAAM,MAETmB,OAAM,SAAAZ,GACHhB,GAAY,GACR,qBAAuBgB,EAAEa,KACzBrB,EACI,gEAGJA,EACI,qGAGRF,GAAa,QAEtB,QAWK,oBAAC,IAAKwB,MAAN,KACI,oBAAC,IAAKC,MAAN,CACIC,YAAY,gBACZC,KAAK,QACLC,gBAAc,WACdC,UAAQ,EACRC,SAAU,SAAApB,GACNZ,EAASY,EAAEqB,OAAOC,QAEtBA,MAAOnC,IAEX,oBAAC,IAAKoC,OAAN,CACIC,WAAS,EACTvC,QAASA,EACTwC,QAAQ,cAKpB,oBAAC,IAAD,CACIC,OAAQrC,EACRsC,eAAgB,WACZlC,MAGJ,yBAAGf,UAAU,cAAca,EAA3B,yB,iBCnGhB5B,EAAOC,QAAUE,GAAGsC,U","file":"mailchimp-form/frontend-78cdc052.js","sourcesContent":["module.exports = React;","module.exports = wp.domReady;","module.exports = wp.element;","import { render } from '@wordpress/element';\nimport domReady from '@wordpress/dom-ready';\n\nimport MailchimpForm from './component';\n\n// When the document is fully loaded load the mailchimp-form.\ndomReady(() => {\n    if (document.querySelector('.js-react-mailchimp-form')) {\n        const elms = document.querySelectorAll('.js-react-mailchimp-form');\n        elms.forEach(elm => {\n            const props = {\n                display: true,\n                interest: elm.getAttribute('data-segment-id'),\n                className: elm.getAttribute('data-style'),\n            };\n            render(<MailchimpForm {...props} />, elm);\n        });\n    }\n});\n","module.exports = ReactDOM;","import { useState } from '@wordpress/element';\nimport apiFetch from '@wordpress/api-fetch';\nimport { Form, Dimmer } from 'semantic-ui-react';\n\nimport './style.scss';\n\nconst MailchimpForm = ({ display, interest, className }) => {\n    const [error, toggleError] = useState(false);\n    const [loading, toggleLoading] = useState(false);\n    const [emailAddress, setEmail] = useState('');\n    const [dimmerActive, toggleDimmer] = useState(false);\n    const [dimmerMessage, setDimmerMessage] = useState('n/a');\n\n    const reset = enableDimmer => {\n        toggleError(false);\n        toggleLoading(false);\n        setEmail('');\n        if (true !== enableDimmer) {\n            toggleDimmer(false);\n            setDimmerMessage('');\n        }\n    };\n\n    const submitHandler = e => {\n        e.preventDefault();\n\n        if (true !== display) {\n            return; // Never allow running this from inside Gutenberg.\n        }\n\n        const email = emailAddress;\n\n        toggleLoading(true);\n\n        setTimeout(() => {\n            apiFetch({\n                path: `/prc-api/v2/mailchimp/subscribe/?email=${email}&interests=${interest}`,\n                method: 'POST',\n            })\n                .then(res => {\n                    console.log(res);\n                    console.info('Succesfully subscribed');\n                    setDimmerMessage(\n                        'You have succesfully subscribed to this newsletter.',\n                    );\n                    toggleDimmer(true);\n                })\n                .then(() => {\n                    reset(true);\n                })\n                .catch(e => {\n                    toggleError(true);\n                    if ('add-member-error' === e.code) {\n                        setDimmerMessage(\n                            'This email address is already subscribed to this newsletter.',\n                        );\n                    } else {\n                        setDimmerMessage(\n                            'Unfortunatley we could not subscribe you to this newsletter at this time, please try again later.',\n                        );\n                    }\n                    toggleDimmer(true);\n                });\n        }, 2000);\n    };\n\n    return (\n        <Dimmer.Dimmable\n            as=\"div\"\n            id=\"js-mailchimp-form\"\n            dimmed={dimmerActive}\n            className={className}\n        >\n            <Form className=\"mailchimp\" error={error} onSubmit={submitHandler}>\n                <Form.Field>\n                    <Form.Input\n                        placeholder=\"Email address\"\n                        type=\"email\"\n                        data-validate=\"mc-email\"\n                        required\n                        onChange={e => {\n                            setEmail(e.target.value);\n                        }}\n                        value={emailAddress}\n                    />\n                    <Form.Button\n                        secondary\n                        loading={loading}\n                        content=\"SIGN UP\"\n                    />\n                </Form.Field>\n            </Form>\n\n            <Dimmer\n                active={dimmerActive}\n                onClickOutside={() => {\n                    reset();\n                }}\n            >\n                <p className=\"sans-serif\">{dimmerMessage} (Click to close)</p>\n            </Dimmer>\n        </Dimmer.Dimmable>\n    );\n};\n\nexport default MailchimpForm;\n","module.exports = wp.apiFetch;"],"sourceRoot":""}