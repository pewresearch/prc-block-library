{"version":3,"sources":["webpack:///external [\"wp\",\"domReady\"]","webpack:///external [\"wp\",\"url\"]","webpack:///./node_modules/@wpackio/entrypoint/lib/index.js","webpack:///./src/popup/controller/frontend.js"],"names":["module","exports","window","path","replace","concat","Vimeo","hasOwnProperty","show","modal","args","jQuery","domReady","location","href","controllers","document","querySelectorAll","length","forEach","controller","id","getAttribute","querySelector","trigger","initArgs","setAttribute","transition","isVideo","classList","contains","player","iframe","console","log","Player","inverted","addEventListener","ready","then","onVisible","history","pushState","play","catch","error","name","onHidden","back","unload","on","hash","setTimeout","e","preventDefault","startController"],"mappings":";;;;;;;;;;;;;;;;;2HAAcA,EAAOC,QAAUC,OAAW,GAAY,U,iBCAxCF,EAAOC,QAAUC,OAAW,GAAO,K,mBCSjC,IAAIC,EAAK,uBAA6CC,QAAQ,kBAAkB,IAChG,IAAwBF,OAAO,YAAYG,OAAOF,K,6ECVlD,4BAMMG,GANN,QAMcJ,OAAOK,eAAe,UAAWL,OAAOI,OAEhDE,EAAO,SAACC,GAAmC,IAA5BD,IAA2B,yDAAdE,EAAc,uDAAP,IACnC,IAASF,EACbG,OAAOF,GAAOA,MAAM,QAEpBE,OAAOF,GAAOA,MAAMC,IAyItBE,KAAS,YArIe,WACHV,OAAOW,SAASC,KAApC,IACMC,EAAcC,SAASC,iBAAiB,wCAC1CF,EAAYG,QACfH,EAAYI,SAAQ,SAAAC,GAEnB,IAAMC,EAAKD,EAAWE,aAAa,MAC/Bb,EAAQW,EAAWG,cAAX,mCACNC,EAAUJ,EAAWG,cAAc,qCACnCE,EAAW,GAGjBhB,EAAMiB,aAAa,kBAAmBL,IACtCZ,EAAQO,SAASO,cAAT,2DAA2EF,EAA3E,QAEGC,aAAa,qBACvBG,EAASE,WAAalB,EAAMa,aAAa,oBAG1C,IAAMM,EAAUnB,EAAMoB,UAAUC,SAAS,kBAGrCC,GAAS,EACTC,GAAS,GACR,IAASJ,IAAW,IAAUtB,GAASA,EAAMC,eAAe,YAChEyB,EAASvB,EAAMc,cAAc,UAC7BU,QAAQC,IAAI,mBAAoBF,GAC3B,OAASA,IACbA,EAAON,aAAa,QAAS,YAC7BK,EAAS,IAAIzB,EAAM6B,OAAOH,KAOvB,GAAQvB,EAAMa,aAAa,mBAC/BG,EAASW,UAAW,IAIhB,IAAUL,GAEdP,EAAQa,iBAAiB,cAAc,WACtCN,EAAOO,QAAQC,MAAK,WAEnBN,QAAQC,IAAI,6BAKdT,EAASe,UAAY,WACpBtC,OAAOuC,QAAQC,UAAU,QAAS,QAAlC,WAA+CrB,IAE/CU,EAAOY,OAAOJ,MAAK,WAClBN,QAAQC,IAAI,2BACVU,OAAM,SAASC,GACjBZ,QAAQC,IAAI,WAAYW,GAChBA,EAAMC,SAkBhBrB,EAASsB,SAAW,WACnB7C,OAAOuC,QAAQO,OAEfjB,EAAOkB,SAASV,MAAK,WACpBN,QAAQC,IAAI,6BACVU,OAAM,SAACC,GACDA,EAAMC,SAkBhBf,EAAOmB,GAAG,QAAQ,WACjBjB,QAAQC,IAAI,0BAIbT,EAASe,UAAY,WACpBtC,OAAOuC,QAAQC,UAAU,QAAS,QAAlC,WAA+CrB,KAEhDI,EAASsB,SAAW,WACnB7C,OAAOuC,QAAQO,SAKjBxC,EAAKC,GAAO,EAAOgB,GAGdvB,OAAOW,SAASsC,OAAhB,WAA6B9B,KACjCY,QAAQC,IAAI,gBACZkB,YAAW,WACV5C,EAAKC,KACH,MAIJE,OAAOa,GAAS0B,GAAG,SAAS,SAACG,GAC5BA,EAAEC,iBACF9C,EAAKC,SAOR8C,Q","file":"frontend/popup-controller-d9cb9478.js","sourcesContent":["(function() { module.exports = window[\"wp\"][\"domReady\"]; }());","(function() { module.exports = window[\"wp\"][\"url\"]; }());","/* eslint-disable camelcase */ /* eslint-disable babel/camelcase */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/* global __webpack_public_path__ */ // eslint-disable-next-line spaced-comment\n///<reference types=\"webpack-env\" />\n// We expect __webpack_public_path__ to be present, thanks to webpack\n// We are not using DOM in the typescript library, so let's just hack our way\n// through window\n// tslint:disable-next-line:no-any\n// We would override __webpack_public_path__ only if __WPACKIO__ webpack plugin is set\nif(__WPACKIO__){var path=(__WPACKIO__.appName+__WPACKIO__.outputPath).replace(/[^a-zA-Z0-9_-]/g,'');// eslint-disable-next-line no-global-assign\n__webpack_public_path__=window[\"__wpackIo\".concat(path)];}","/**\n * WordPress Dependencies\n */\nimport domReady from '@wordpress/dom-ready';\nimport { getQueryArg, addQueryArgs, removeQueryArgs } from '@wordpress/url';\n// This script gets included automatically by the vimeo/create block. We can use it as we would importing it.\nconst Vimeo = window.hasOwnProperty('Vimeo') ? window.Vimeo : false;\n\nconst show = (modal, show = true, args = {}) => {\n\tif ( true === show ) {\n\t\tjQuery(modal).modal('show');\n\t} else {\n\t\tjQuery(modal).modal(args);\n\t}\n}\n\nconst startController = () => {\n\tconst originalUrl = window.location.href;\n\tconst controllers = document.querySelectorAll('.wp-block-prc-block-popup-controller');\n\tif (controllers.length) {\n\t\tcontrollers.forEach(controller => {\n\t\t\t// Setup the controller block.\n\t\t\tconst id = controller.getAttribute('id');\n\t\t\tlet modal = controller.querySelector(`.wp-block-prc-block-popup-modal`);\n\t\t\tconst trigger = controller.querySelector('.wp-block-prc-block-popup-content');\n\t\t\tconst initArgs = {};\n\n\t\t\t// Give the modal an attribute to identify its controller abd set the variable to it. This will work as the modal travereses the DOM.\n\t\t\tmodal.setAttribute('data-trigger-id', id);\n\t\t\tmodal = document.querySelector(`.wp-block-prc-block-popup-modal[data-trigger-id=\"${id}\"]`);\n\n\t\t\tif ( modal.getAttribute('data-transition') ) {\n\t\t\t\tinitArgs.transition = modal.getAttribute('data-transition');\n\t\t\t}\n\n\t\t\tconst isVideo = modal.classList.contains('is-style-video');\n\n\t\t\t// Determine if the modal has a Vimeo iframe and if so set player accordingly.\n\t\t\tlet player = false;\n\t\t\tlet iframe = false;\n\t\t\tif ( true === isVideo && false !== Vimeo && Vimeo.hasOwnProperty('Player') ) {\n\t\t\t\tiframe = modal.querySelector('iframe');\n\t\t\t\tconsole.log(\"iframes found...\", iframe);\n\t\t\t\tif ( null !== iframe ) {\n\t\t\t\t\tiframe.setAttribute('allow', 'autoplay');\n\t\t\t\t\tplayer = new Vimeo.Player(iframe);\n\t\t\t\t\t// May need to reload the iframe to allow autoplay.\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the modal is set to have a whtie background then set the modal to be inverted.\n\t\t\tif ( true == modal.getAttribute('data-inverted') ) {\n\t\t\t\tinitArgs.inverted = true;\n\t\t\t}\n\n\t\t\t// If the modal has a Vimeo player, set it up.\n\t\t\tif ( false !== player ) {\n\t\t\t\t// When mouse enters the trigger zone console.log('mouseenter');\n\t\t\t\ttrigger.addEventListener('mouseenter', () => {\n\t\t\t\t\tplayer.ready().then(() =>{\n\t\t\t\t\t\t// the player is ready\n\t\t\t\t\t\tconsole.log('the player is ready');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// When the modal is shown, start the video.\n\t\t\t\tinitArgs.onVisible = () => {\n\t\t\t\t\twindow.history.pushState('modal', 'Modal', `#${id}`);\n\n\t\t\t\t\tplayer.play().then(() =>{\n\t\t\t\t\t\tconsole.log('the video was played');\n\t\t\t\t\t}).catch(function(error) {\n\t\t\t\t\t\tconsole.log('error...', error);\n\t\t\t\t\t\tswitch (error.name) {\n\t\t\t\t\t\t\tcase 'PasswordError':\n\t\t\t\t\t\t\t\t// the video is password-protected and the viewer needs to enter the\n\t\t\t\t\t\t\t\t// password first\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'PrivacyError':\n\t\t\t\t\t\t\t\t// the video is private\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// some other error occurred\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// When the modal is hidden, reset the video to its original state.\n\t\t\t\tinitArgs.onHidden = () => {\n\t\t\t\t\twindow.history.back()\n\n\t\t\t\t\tplayer.unload().then(() => {\n\t\t\t\t\t\tconsole.log('the video was unloaded');\n\t\t\t\t\t}).catch((error) => {\n\t\t\t\t\t\tswitch (error.name) {\n\t\t\t\t\t\t\tcase 'PasswordError':\n\t\t\t\t\t\t\t\t// the video is password-protected and the viewer needs to enter the\n\t\t\t\t\t\t\t\t// password first\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'PrivacyError':\n\t\t\t\t\t\t\t\t// the video is private\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// some other error occurred\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Here we can do some analytic actions?\n\t\t\t\tplayer.on('play', () => {\n\t\t\t\t\tconsole.log('played the video!');\n\t\t\t\t\t// Send some event to GA?\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinitArgs.onVisible = () => {\n\t\t\t\t\twindow.history.pushState('modal', 'Modal', `#${id}`);\n\t\t\t\t};\n\t\t\t\tinitArgs.onHidden = () => {\n\t\t\t\t\twindow.history.back()\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Initialize modals.\n\t\t\tshow(modal, false, initArgs);\n\n\t\t\t// If the end of the url is a hash and that hash matches the id then show the modal.\n\t\t\tif ( window.location.hash === `#${id}` ) {\n\t\t\t\tconsole.log(\"Auto hash...\");\n\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\tshow(modal);\n\t\t\t\t}, 500);\n\t\t\t}\n\n\t\t\t// When the trigger is clicked, show the modal.\n\t\t\tjQuery(trigger).on('click', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tshow(modal);\n\t\t\t});\n\t\t});\n\t}\n}\n\ndomReady(() => {\n\tstartController();\n});\n"],"sourceRoot":""}