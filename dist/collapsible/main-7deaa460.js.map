{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.i18n\"","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./src/collapsible/edit.js","webpack:///./src/collapsible/save.js","webpack:///./src/collapsible/settings.js","webpack:///./src/collapsible/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./src/collapsible/component.js","webpack:///external \"wp.blocks\"","webpack:///external \"wp.element\""],"names":["module","exports","React","wp","blockEditor","i18n","arr","edit","attributes","setAttributes","title","className","console","log","defaultOpen","save","data-title","data-style","Content","settings","__","description","category","keywords","_","supports","html","align","styles","name","label","isDefault","type","default","transforms","to","blocks","transform","innerBlocks","createBlock","registerBlockType","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ALLOWED_BLOCKS","AccordionBlock","children","useState","open","setState","icon","Title","onClick","tagName","value","onChange","t","placeholder","formattingControls","keepPlaceholderOnFocus","style","display","marginLeft","allowedBlocks","styled","active","index","element"],"mappings":";;;;;;;;;;;;;;;;;+HAAAA,EAAOC,QAAUC,O,6DCAjBF,EAAOC,QAAUE,GAAGC,a,uCCApBJ,EAAOC,QAAUE,GAAGE,M,oECIuBC,E,wBCO5BC,EARF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cACfC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAEf,OADAC,QAAQC,IAAIF,GAER,oBAAC,IAAD,CAAgBD,MAAOA,EAAOC,UAAWA,EAAWG,aAAa,EAAML,cAAeA,K,QCI/EM,EATF,SAAC,GAAkB,IAAjBP,EAAgB,EAAhBA,WACHE,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UACf,OACI,2BAAKA,UAAU,uBAAuBK,aAAYN,EAAOO,aAAYN,GACjE,oBAAC,cAAYO,QAAb,QC8CGC,EA9CE,CACb,wBACA,CACIT,MAAOU,aAAG,mBACVC,YAAaD,aACT,4DAEJE,SAAU,SACVC,SAAU,CAACH,aAAG,eAAgBA,aAAG,aAAcI,EAAE,oBACjDC,SAAU,CACNC,MAAM,EACNC,OAAO,GAEXC,OAAQ,CACJ,CACIC,KAAM,UACNC,MAAOV,aAAG,WACVW,WAAW,GAEf,CACIF,KAAM,YACNC,MAAOV,aAAG,eAGlBZ,WAAY,CACRE,MAAO,CACHsB,KAAM,SACNC,QAAS,oBAGjBC,WAAY,CACRC,GAAI,CACA,CACIH,KAAM,QACNI,OAAQ,CAAE,qBACVC,UAAW,SAAU7B,EAAY8B,GAC7B,OAAOC,sBAAa,oBAAqB/B,EAAY8B,OAKrE/B,OACAQ,S,OC5CRyB,oBAAiB,WAAjB,ECHe,SAA4BlC,GACzC,GAAImC,MAAMC,QAAQpC,GAAM,OAAO,OAAAqC,EAAA,GAAiBrC,GLGzC,CADkCA,EIAtBa,IEJN,SAA0ByB,GACvC,GAAsB,oBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GNIvD,CAAgBtC,IAAQ,OAAA2C,EAAA,GAA2B3C,IOLvE,WACb,MAAM,IAAI4C,UAAU,wIPIwE,K,2EQDxFC,EAAiB,CAAC,iBAAkB,eAAgB,YAAa,oBAgFxDC,IA9EQ,SAAC,GAA8E,IAA7E1C,EAA4E,EAA5EA,MAAOC,EAAqE,EAArEA,UAAW0C,EAA0D,EAA1DA,SAA0D,IAAhD5C,qBAAgD,aAAzBK,mBAAyB,WACtEwC,mBAASxC,GAD6D,mBACzFyC,EADyF,KACnFC,EADmF,KAG7FC,EAAOF,EAAO,aAAe,cAC5B,uBAAyB5C,IAC1B8C,EAAOF,EAAO,QAAU,QAG5B,IAAMG,EAAQ,WACV,OACI,oBAAC,WAAD,KACM,uBAAyB/C,GACvB,oBAAC,IAAD,CAAMkB,KAAM4B,EAAME,QAAU,YACnB,IAAUlD,GACX+C,GAAYD,OAItB,IAAU9C,GACR,oBAAC,WAAD,CACImD,QAAQ,MACRC,MAAOnD,EACPoD,SAAU,SAAAC,GAAC,OAAItD,EAAc,CAAEC,MAAOqD,KACtCC,YAAY,kBACZC,mBAAoB,GACpBC,wBAAsB,EACtBC,MAAO,CACHC,QAAS,mBAInB,IAAU3D,GACR,gCAAOC,GAET,uBAAyBC,GACvB,oBAAC,IAAD,CAAMkB,KAAM4B,EAAMU,MAAO,CAACE,WAAY,SAAUV,QAAU,YACjD,IAAUlD,GACX+C,GAAYD,QAQ9BrC,EAAU,WACZ,OACI,oBAAC,WAAD,MACM,IAAUT,GACR,oBAAC,cAAD,CAAa6D,cAAenB,KAE9B,IAAU1C,GACR,oBAAC,UAAD,KAAU4C,KAM1B,OACI,oBAAC,IAAD,CAAWkB,QAAM,GACb,oBAAC,IAAUb,MAAX,CACAc,QAAiB,IAATjB,EACRkB,MAAO,EACPd,QAAU,YACD,IAAUlD,GACX+C,GAAYD,KAIjB,oBAACG,EAAD,OAEH,oBAAC,IAAUxC,QAAX,CAAmBsD,QAAkB,IAATjB,GACxB,oBAACrC,EAAD,U,iBC9EhBlB,EAAOC,QAAUE,GAAGiC,Q,gBCApBpC,EAAOC,QAAUE,GAAGuE,U","file":"collapsible/main-7deaa460.js","sourcesContent":["module.exports = React;","module.exports = wp.blockEditor;","module.exports = wp.i18n;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","\nimport AccordionBlock from './component';\n\nconst edit = ({attributes, setAttributes}) => {\n    const { title, className } = attributes;\n    console.log(className);\n    return( \n        <AccordionBlock title={title} className={className} defaultOpen={true} setAttributes={setAttributes}/>\n    );\n}\n\nexport default edit;","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({attributes}) => {\n    const { title, className } = attributes;\n    return( \n        <div className=\"js-react-collapsible\" data-title={title} data-style={className}>\n            <InnerBlocks.Content/>\n        </div>\n    );\n}\n\nexport default save;","\nimport { __ } from '@wordpress/i18n';\nimport { createBlock } from '@wordpress/blocks';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/collapsible',\n    {\n        title: __('PRC Collapsible'),\n        description: __(\n            'Add a block that displays content in a single accordion.'\n        ),\n        category: 'layout',\n        keywords: [__('Collapsible'), __('Accordion'), _('How we did this')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        styles: [\n            {\n                name: 'default',\n                label: __('Default'),\n                isDefault: true,\n            },\n            {\n                name: 'alternate',\n                label: __('Plus Icon'),\n            }\n        ],\n        attributes: {\n            title: {\n                type: 'string',\n                default: 'How we did this',\n            }\n        },\n        transforms: {\n            to: [\n                {\n                    type: 'block',\n                    blocks: [ 'prc-block/callout' ],\n                    transform: function( attributes, innerBlocks ) {\n                        return createBlock( 'prc-block/callout', attributes, innerBlocks );\n                    },\n                },\n            ],\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './style.scss';\n\nregisterBlockType(...settings);\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { InnerBlocks, RichText } from '@wordpress/block-editor';\nimport { useState, Fragment, RawHTML } from '@wordpress/element';\nimport { Accordion, Icon } from 'semantic-ui-react';\n\nconst ALLOWED_BLOCKS = ['core/paragraph', 'core/heading', 'core/list', 'prc-block/button'];\n\nconst AccordionBlock = ({title, className, children, setAttributes = false, defaultOpen = false}) => {\n    const [ open, setState ] = useState(defaultOpen);\n\n    let icon = open ? 'caret down' : 'caret right';\n    if ( 'is-style-alternate' === className ) {\n        icon = open ? 'minus' : 'plus';\n    }\n\n    const Title = () => {\n        return(\n            <Fragment>\n                { 'is-style-alternate' !== className && (\n                    <Icon name={icon} onClick={ () => {\n                        if ( false !== setAttributes ) {\n                            setState( ! open );\n                        }\n                    } }/>\n                ) }\n                { false !== setAttributes && (\n                    <RichText\n                        tagName=\"div\" // The tag here is the element output and editable in the admin\n                        value={title} // Any existing content, either from the database or an attribute default\n                        onChange={t => setAttributes({ title: t })} // Store updated content as a block attribute\n                        placeholder=\"How we did this\" // Display this text before any content has been added by the user\n                        formattingControls={[]}\n                        keepPlaceholderOnFocus\n                        style={{\n                            display: 'inline-block'\n                        }}\n                    />\n                ) }\n                { false === setAttributes  && (\n                    <span>{title}</span>\n                ) }\n                { 'is-style-alternate' === className && (\n                    <Icon name={icon} style={{marginLeft: '0.5em'}} onClick={ () => {\n                        if ( false !== setAttributes ) {\n                            setState( ! open );\n                        }\n                    } }/>\n                ) }\n            </Fragment>\n        );\n    }\n\n    const Content = () => {\n        return(\n            <Fragment>\n                { false !== setAttributes && (\n                    <InnerBlocks allowedBlocks={ALLOWED_BLOCKS}/>\n                ) }\n                { false === setAttributes && (\n                    <RawHTML>{children}</RawHTML>\n                ) }\n            </Fragment>\n        );\n    }\n\n    return( \n        <Accordion styled>\n            <Accordion.Title\n            active={open === true}\n            index={0}\n            onClick={ () => {\n                if ( false === setAttributes ) {\n                    setState( ! open );\n                }\n            } }\n            >\n               <Title/>\n            </Accordion.Title>\n            <Accordion.Content active={ open === true }>\n                <Content/>\n            </Accordion.Content>\n        </Accordion>\n    );\n}\n\nexport default AccordionBlock;","module.exports = wp.blocks;","module.exports = wp.element;"],"sourceRoot":""}