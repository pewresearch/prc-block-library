{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///./src/collapsible/component.js","webpack:///external \"wp.domReady\"","webpack:///./src/collapsible/frontend.js"],"names":["module","exports","React","wp","element","blockEditor","ALLOWED_BLOCKS","template","AccordionBlock","title","className","children","setAttributes","defaultOpen","useState","isOpen","setOpen","icon","styled","Title","active","index","onClick","name","tagName","value","onChange","t","placeholder","formattingControls","keepPlaceholderOnFocus","style","display","marginLeft","Content","allowedBlocks","domReady","console","log","document","querySelector","querySelectorAll","forEach","elm","innerHTML","getAttribute","render"],"mappings":";;;;;;;;;;;;;;;;;+HAAAA,EAAOC,QAAUC,O,iBCAjBF,EAAOC,QAAUE,GAAGC,S,iBCApBJ,EAAOC,QAAUE,GAAGE,a,4ECIdC,EAAiB,CACnB,iBACA,eACA,aACA,aACA,YACA,uBAGEC,EAAW,CAAC,CAAC,iBAAkB,KA8EtBC,IA5EQ,SAAC,GAMjB,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,SAGE,IAFFC,qBAEE,aADFC,mBACE,WACwBC,mBAASD,GADjC,mBACKE,EADL,KACaC,EADb,KAGEC,EAAOF,EAAS,aAAe,cAKnC,MAJI,uBAAyBL,IACzBO,EAAOF,EAAS,QAAU,QAI1B,oBAAC,IAAD,CAAWG,QAAM,GACb,oBAAC,IAAUC,MAAX,CACIC,QAAQ,IAASL,EACjBM,MAAO,EACPC,QAAS,YACD,IAAUV,GACVI,GAASD,KAIjB,oBAAC,WAAD,KACK,uBAAyBL,GACtB,oBAAC,IAAD,CACIa,KAAMN,EACNK,QAAS,YACD,IAAUV,GACVI,GAASD,OAKxB,IAAUH,GACP,oBAAC,WAAD,CACIY,QAAQ,MACRC,MAAOhB,EACPiB,SAAU,SAAAC,GAAC,OAAIf,EAAc,CAAEH,MAAOkB,KACtCC,YAAY,kBACZC,mBAAoB,GACpBC,wBAAsB,EACtBC,MAAO,CACHC,QAAS,mBAIpB,IAAUpB,GAAiB,gCAAOH,GAClC,uBAAyBC,GACtB,oBAAC,IAAD,CACIa,KAAMN,EACNc,MAAO,CAAEE,WAAY,SACrBX,QAAS,YACD,IAAUV,GACVI,GAASD,QAOjC,oBAAC,IAAUmB,QAAX,CAAmBd,QAAQ,IAASL,IAC/B,IAAUH,GACP,oBAAC,cAAD,CACIuB,cAAe7B,EACfC,SAAUA,KAGjB,IAAUK,GAAiB,oBAAC,UAAD,KAAUD,O,iBCrFtDX,EAAOC,QAAUE,GAAGiC,U,0ECApB,4CAIAA,KAAS,YACLC,QAAQC,IACJ,eACAC,SAASC,cAAc,0BAEvBD,SAASC,cAAc,2BACVD,SAASE,iBAAiB,yBAClCC,SAAQ,SAAAC,GACTN,QAAQC,IAAIK,GACZ,IAAMhC,EAAWgC,EAAIC,UACfnC,EAAQkC,EAAIE,aAAa,cACzBnC,EAAYiC,EAAIE,aAAa,cACnCC,iBACI,oBAAC,IAAD,CACIrC,MAAOA,EACPC,UAAWA,EACXE,eAAe,GAEdD,GAELgC,W","file":"collapsible/frontend-1ef6e3b6.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.blockEditor;","import { InnerBlocks, RichText } from '@wordpress/block-editor';\nimport { useState, Fragment, RawHTML } from '@wordpress/element';\nimport { Accordion, Icon } from 'semantic-ui-react';\n\nconst ALLOWED_BLOCKS = [\n    'core/paragraph',\n    'core/heading',\n    'core/image',\n    'core/table',\n    'core/list',\n    'prc-block/menu-link',\n];\n\nconst template = [['core/paragraph', {}]];\n\nconst AccordionBlock = ({\n    title,\n    className,\n    children,\n    setAttributes = false,\n    defaultOpen = false,\n}) => {\n    const [isOpen, setOpen] = useState(defaultOpen);\n\n    let icon = isOpen ? 'caret down' : 'caret right';\n    if ('is-style-alternate' === className) {\n        icon = isOpen ? 'minus' : 'plus';\n    }\n\n    return (\n        <Accordion styled>\n            <Accordion.Title\n                active={true === isOpen}\n                index={0}\n                onClick={() => {\n                    if (false === setAttributes) {\n                        setOpen(!isOpen);\n                    }\n                }}\n            >\n                <Fragment>\n                    {'is-style-alternate' !== className && (\n                        <Icon\n                            name={icon}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                    {false !== setAttributes && (\n                        <RichText\n                            tagName=\"div\" // The tag here is the element output and editable in the admin\n                            value={title} // Any existing content, either from the database or an attribute default\n                            onChange={t => setAttributes({ title: t })} // Store updated content as a block attribute\n                            placeholder=\"How we did this\" // Display this text before any content has been added by the user\n                            formattingControls={[]}\n                            keepPlaceholderOnFocus\n                            style={{\n                                display: 'inline-block',\n                            }}\n                        />\n                    )}\n                    {false === setAttributes && <span>{title}</span>}\n                    {'is-style-alternate' === className && (\n                        <Icon\n                            name={icon}\n                            style={{ marginLeft: '0.5em' }}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                </Fragment>\n            </Accordion.Title>\n            <Accordion.Content active={true === isOpen}>\n                {false !== setAttributes && (\n                    <InnerBlocks\n                        allowedBlocks={ALLOWED_BLOCKS}\n                        template={template}\n                    />\n                )}\n                {false === setAttributes && <RawHTML>{children}</RawHTML>}\n            </Accordion.Content>\n        </Accordion>\n    );\n};\n\nexport default AccordionBlock;\n","module.exports = wp.domReady;","import { render } from '@wordpress/element';\nimport domReady from '@wordpress/dom-ready';\nimport AccordionBlock from './component';\n\ndomReady(() => {\n    console.log(\n        'Collapsible?',\n        document.querySelector('.js-react-collapsible'),\n    );\n    if (document.querySelector('.js-react-collapsible')) {\n        const elms = document.querySelectorAll('.js-react-collapsible');\n        elms.forEach(elm => {\n            console.log(elm);\n            const children = elm.innerHTML;\n            const title = elm.getAttribute('data-title');\n            const className = elm.getAttribute('data-style');\n            render(\n                <AccordionBlock\n                    title={title}\n                    className={className}\n                    setAttributes={false}\n                >\n                    {children}\n                </AccordionBlock>,\n                elm,\n            );\n        });\n    }\n});\n"],"sourceRoot":""}