{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.i18n\"","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./src/collapsible/edit.js","webpack:///./src/collapsible/save.js","webpack:///./src/collapsible/settings.js","webpack:///./src/collapsible/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./src/collapsible/component.js","webpack:///external \"wp.blocks\"","webpack:///external \"wp.element\""],"names":["module","exports","React","wp","blockEditor","i18n","arr","edit","attributes","setAttributes","title","className","defaultOpen","save","data-title","data-style","Content","settings","__","description","category","keywords","_","supports","html","align","styles","name","label","isDefault","type","default","transforms","to","blocks","transform","innerBlocks","createBlock","registerBlockType","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ALLOWED_BLOCKS","template","AccordionBlock","children","useState","isOpen","setOpen","icon","styled","Title","active","index","onClick","tagName","value","onChange","t","placeholder","formattingControls","keepPlaceholderOnFocus","style","display","marginLeft","allowedBlocks","element"],"mappings":"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","file":"collapsible/main-9a522df4.js","sourcesContent":["module.exports = React;","module.exports = wp.blockEditor;","module.exports = wp.i18n;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import AccordionBlock from './component';\n\nconst edit = ({ attributes, setAttributes }) => {\n    const { title, className } = attributes;\n    return (\n        <AccordionBlock\n            title={title}\n            className={className}\n            defaultOpen\n            setAttributes={setAttributes}\n        />\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ attributes }) => {\n    const { title, className } = attributes;\n    return (\n        <div\n            className=\"js-react-collapsible\"\n            data-title={title}\n            data-style={className}\n        >\n            <InnerBlocks.Content />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport { createBlock } from '@wordpress/blocks';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/collapsible',\n    {\n        title: __('PRC Collapsible'),\n        description: __(\n            'Add a block that displays content in a single accordion.',\n        ),\n        category: 'layout',\n        keywords: [__('Collapsible'), __('Accordion'), _('How we did this')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        styles: [\n            {\n                name: 'default',\n                label: __('Default'),\n                isDefault: true,\n            },\n            {\n                name: 'alternate',\n                label: __('Plus Icon'),\n            },\n        ],\n        attributes: {\n            title: {\n                type: 'string',\n                default: 'How we did this',\n            },\n        },\n        transforms: {\n            to: [\n                {\n                    type: 'block',\n                    blocks: ['prc-block/callout'],\n                    transform(attributes, innerBlocks) {\n                        return createBlock(\n                            'prc-block/callout',\n                            attributes,\n                            innerBlocks,\n                        );\n                    },\n                },\n            ],\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './style.scss';\n\nregisterBlockType(...settings);\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { InnerBlocks, RichText } from '@wordpress/block-editor';\nimport { useState, Fragment, RawHTML } from '@wordpress/element';\nimport { Accordion, Icon } from 'semantic-ui-react';\n\nconst ALLOWED_BLOCKS = [\n    'core/paragraph',\n    'core/heading',\n    'core/list',\n    'prc-block/button',\n];\n\nconst template = [['core/paragraph', {}]];\n\nconst AccordionBlock = ({\n    title,\n    className,\n    children,\n    setAttributes = false,\n    defaultOpen = false,\n}) => {\n    const [isOpen, setOpen] = useState(defaultOpen);\n\n    let icon = isOpen ? 'caret down' : 'caret right';\n    if ('is-style-alternate' === className) {\n        icon = isOpen ? 'minus' : 'plus';\n    }\n\n    return (\n        <Accordion styled>\n            <Accordion.Title\n                active={true === isOpen}\n                index={0}\n                onClick={() => {\n                    if (false === setAttributes) {\n                        setOpen(!isOpen);\n                    }\n                }}\n            >\n                <Fragment>\n                    {'is-style-alternate' !== className && (\n                        <Icon\n                            name={icon}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                    {false !== setAttributes && (\n                        <RichText\n                            tagName=\"div\" // The tag here is the element output and editable in the admin\n                            value={title} // Any existing content, either from the database or an attribute default\n                            onChange={t => setAttributes({ title: t })} // Store updated content as a block attribute\n                            placeholder=\"How we did this\" // Display this text before any content has been added by the user\n                            formattingControls={[]}\n                            keepPlaceholderOnFocus\n                            style={{\n                                display: 'inline-block',\n                            }}\n                        />\n                    )}\n                    {false === setAttributes && <span>{title}</span>}\n                    {'is-style-alternate' === className && (\n                        <Icon\n                            name={icon}\n                            style={{ marginLeft: '0.5em' }}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                </Fragment>\n            </Accordion.Title>\n            <Accordion.Content active={true === isOpen}>\n                {false !== setAttributes && (\n                    <InnerBlocks\n                        allowedBlocks={ALLOWED_BLOCKS}\n                        template={template}\n                    />\n                )}\n                {false === setAttributes && <RawHTML>{children}</RawHTML>}\n            </Accordion.Content>\n        </Accordion>\n    );\n};\n\nexport default AccordionBlock;\n","module.exports = wp.blocks;","module.exports = wp.element;"],"sourceRoot":""}