{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.i18n\"","webpack:///./src/collapsible/component.js","webpack:///external \"wp.blocks\"","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./src/collapsible/edit.js","webpack:///./src/collapsible/save.js","webpack:///./src/collapsible/settings.js","webpack:///./src/collapsible/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["module","exports","React","wp","element","blockEditor","i18n","ALLOWED_BLOCKS","template","AccordionBlock","title","className","children","setAttributes","defaultOpen","useState","isOpen","setOpen","icon","styled","Title","active","index","onClick","name","tagName","value","onChange","t","placeholder","formattingControls","keepPlaceholderOnFocus","style","display","marginLeft","Content","allowedBlocks","blocks","arr","edit","attributes","save","data-title","data-style","settings","__","description","category","keywords","supports","html","align","styles","label","isDefault","type","default","transforms","to","transform","innerBlocks","createBlock","registerBlockType","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":";;;;;;;;;;;;;;;;;+HAAAA,EAAOC,QAAUC,O,iBCAjBF,EAAOC,QAAUE,GAAGC,S,iBCApBJ,EAAOC,QAAUE,GAAGE,a,iBCApBL,EAAOC,QAAUE,GAAGG,M,4ECIdC,EAAiB,CACnB,iBACA,eACA,aACA,aACA,YACA,uBAGEC,EAAW,CAAC,CAAC,iBAAkB,KA8EtBC,IA5EQ,SAAC,GAMjB,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,SAGE,IAFFC,qBAEE,aADFC,mBACE,WACwBC,mBAASD,GADjC,mBACKE,EADL,KACaC,EADb,KAGEC,EAAOF,EAAS,aAAe,cAKnC,MAJI,uBAAyBL,IACzBO,EAAOF,EAAS,QAAU,QAI1B,oBAAC,IAAD,CAAWG,QAAM,GACb,oBAAC,IAAUC,MAAX,CACIC,QAAQ,IAASL,EACjBM,MAAO,EACPC,QAAS,YACD,IAAUV,GACVI,GAASD,KAIjB,oBAAC,WAAD,KACK,uBAAyBL,GACtB,oBAAC,IAAD,CACIa,KAAMN,EACNK,QAAS,YACD,IAAUV,GACVI,GAASD,OAKxB,IAAUH,GACP,oBAAC,WAAD,CACIY,QAAQ,MACRC,MAAOhB,EACPiB,SAAU,SAAAC,GAAC,OAAIf,EAAc,CAAEH,MAAOkB,KACtCC,YAAY,kBACZC,mBAAoB,GACpBC,wBAAsB,EACtBC,MAAO,CACHC,QAAS,mBAIpB,IAAUpB,GAAiB,gCAAOH,GAClC,uBAAyBC,GACtB,oBAAC,IAAD,CACIa,KAAMN,EACNc,MAAO,CAAEE,WAAY,SACrBX,QAAS,YACD,IAAUV,GACVI,GAASD,QAOjC,oBAAC,IAAUmB,QAAX,CAAmBd,QAAQ,IAASL,IAC/B,IAAUH,GACP,oBAAC,cAAD,CACIuB,cAAe7B,EACfC,SAAUA,KAGjB,IAAUK,GAAiB,oBAAC,UAAD,KAAUD,O,iBCrFtDZ,EAAOC,QAAUE,GAAGkC,Q,kICIuBC,E,wBCU5BC,EAZF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAY3B,EAAoB,EAApBA,cAChBH,EAAqB8B,EAArB9B,MAAOC,EAAc6B,EAAd7B,UACf,OACI,oBAAC,IAAD,CACID,MAAOA,EACPC,UAAWA,EACXG,aAAW,EACXD,cAAeA,K,QCMZ4B,EAbF,SAAC,GAAoB,IAAlBD,EAAiB,EAAjBA,WACJ9B,EAAqB8B,EAArB9B,MAAOC,EAAc6B,EAAd7B,UACf,OACI,2BACIA,UAAU,uBACV+B,aAAYhC,EACZiC,aAAYhC,GAEZ,oBAAC,cAAYwB,QAAb,QC6CGS,EAlDE,CACb,wBACA,CACIlC,MAAOmC,aAAG,mBACVC,YAAaD,aACT,4DAEJE,SAAU,SACVC,SAAU,CAACH,aAAG,eAAgBA,aAAG,aAAcA,aAAG,oBAClDI,SAAU,CACNC,MAAM,EACNC,OAAO,GAEXC,OAAQ,CACJ,CACI5B,KAAM,UACN6B,MAAOR,aAAG,WACVS,WAAW,GAEf,CACI9B,KAAM,YACN6B,MAAOR,aAAG,eAGlBL,WAAY,CACR9B,MAAO,CACH6C,KAAM,SACNC,QAAS,oBAGjBC,WAAY,CACRC,GAAI,CACA,CACIH,KAAM,QACNlB,OAAQ,CAAC,qBACTsB,UAHJ,SAGcnB,EAAYoB,GAClB,OAAOC,sBACH,oBACArB,EACAoB,OAMpBrB,OACAE,S,MC/CRqB,oBAAiB,WAAjB,ECHe,SAA4BxB,GACzC,GAAIyB,MAAMC,QAAQ1B,GAAM,OAAO,OAAA2B,EAAA,GAAiB3B,GLGzC,CADkCA,EIAtBM,IEJN,SAA0BsB,GACvC,GAAsB,oBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GNIvD,CAAgB5B,IAAQ,OAAAiC,EAAA,GAA2BjC,IOLvE,WACb,MAAM,IAAIkC,UAAU,wIPIwE,M","file":"collapsible/main-0e6c418c.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.blockEditor;","module.exports = wp.i18n;","import { InnerBlocks, RichText } from '@wordpress/block-editor';\nimport { useState, Fragment, RawHTML } from '@wordpress/element';\nimport { Accordion, Icon } from 'semantic-ui-react';\n\nconst ALLOWED_BLOCKS = [\n    'core/paragraph',\n    'core/heading',\n    'core/image',\n    'core/table',\n    'core/list',\n    'prc-block/menu-link',\n];\n\nconst template = [['core/paragraph', {}]];\n\nconst AccordionBlock = ({\n    title,\n    className,\n    children,\n    setAttributes = false,\n    defaultOpen = false,\n}) => {\n    const [isOpen, setOpen] = useState(defaultOpen);\n\n    let icon = isOpen ? 'caret down' : 'caret right';\n    if ('is-style-alternate' === className) {\n        icon = isOpen ? 'minus' : 'plus';\n    }\n\n    return (\n        <Accordion styled>\n            <Accordion.Title\n                active={true === isOpen}\n                index={0}\n                onClick={() => {\n                    if (false === setAttributes) {\n                        setOpen(!isOpen);\n                    }\n                }}\n            >\n                <Fragment>\n                    {'is-style-alternate' !== className && (\n                        <Icon\n                            name={icon}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                    {false !== setAttributes && (\n                        <RichText\n                            tagName=\"div\" // The tag here is the element output and editable in the admin\n                            value={title} // Any existing content, either from the database or an attribute default\n                            onChange={t => setAttributes({ title: t })} // Store updated content as a block attribute\n                            placeholder=\"How we did this\" // Display this text before any content has been added by the user\n                            formattingControls={[]}\n                            keepPlaceholderOnFocus\n                            style={{\n                                display: 'inline-block',\n                            }}\n                        />\n                    )}\n                    {false === setAttributes && <span>{title}</span>}\n                    {'is-style-alternate' === className && (\n                        <Icon\n                            name={icon}\n                            style={{ marginLeft: '0.5em' }}\n                            onClick={() => {\n                                if (false !== setAttributes) {\n                                    setOpen(!isOpen);\n                                }\n                            }}\n                        />\n                    )}\n                </Fragment>\n            </Accordion.Title>\n            <Accordion.Content active={true === isOpen}>\n                {false !== setAttributes && (\n                    <InnerBlocks\n                        allowedBlocks={ALLOWED_BLOCKS}\n                        template={template}\n                    />\n                )}\n                {false === setAttributes && <RawHTML>{children}</RawHTML>}\n            </Accordion.Content>\n        </Accordion>\n    );\n};\n\nexport default AccordionBlock;\n","module.exports = wp.blocks;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import AccordionBlock from './component';\n\nconst edit = ({ attributes, setAttributes }) => {\n    const { title, className } = attributes;\n    return (\n        <AccordionBlock\n            title={title}\n            className={className}\n            defaultOpen\n            setAttributes={setAttributes}\n        />\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ attributes }) => {\n    const { title, className } = attributes;\n    return (\n        <div\n            className=\"js-react-collapsible\"\n            data-title={title}\n            data-style={className}\n        >\n            <InnerBlocks.Content />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport { createBlock } from '@wordpress/blocks';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/collapsible',\n    {\n        title: __('PRC Collapsible'),\n        description: __(\n            'Add a block that displays content in a single accordion.',\n        ),\n        category: 'layout',\n        keywords: [__('Collapsible'), __('Accordion'), __('How we did this')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        styles: [\n            {\n                name: 'default',\n                label: __('Default'),\n                isDefault: true,\n            },\n            {\n                name: 'alternate',\n                label: __('Plus Icon'),\n            },\n        ],\n        attributes: {\n            title: {\n                type: 'string',\n                default: 'How we did this',\n            },\n        },\n        transforms: {\n            to: [\n                {\n                    type: 'block',\n                    blocks: ['prc-block/callout'],\n                    transform(attributes, innerBlocks) {\n                        return createBlock(\n                            'prc-block/callout',\n                            attributes,\n                            innerBlocks,\n                        );\n                    },\n                },\n            ],\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\nimport './style.scss';\n\nregisterBlockType(...settings);\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}