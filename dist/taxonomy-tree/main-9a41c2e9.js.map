{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"wp.components\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/story-item/kicker/edit.js","webpack:///./src/_shared/components/collapsible-list/index.js","webpack:///./src/taxonomy-tree/edit.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/taxonomy-tree/save.js","webpack:///./src/taxonomy-tree/settings.js","webpack:///./src/taxonomy-tree/index.js","webpack:///external \"moment\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.i18n\"","webpack:///external \"lodash\""],"names":["module","exports","React","wp","element","blockEditor","blocks","url","htmlEntities","components","getTerms","taxonomy","perPage","letter","undefined","collection","api","collections","Promise","resolve","apiFetch","path","then","terms","data","fetch","hide_empty","per_page","index","length","slug","replace","toLowerCase","id","name","withState","labelOptions","label","date","setAttributes","setState","useEffect","Object","keys","forEach","key","termObj","push","value","sort","a","b","getTermsAsOptions","options","style","display","alignItems","onChange","l","marginBottom","className","d","CollapsibleList","heading","chevron","placeholder","children","Icon","tagName","h","formattingControls","keepPlaceholderOnFocus","Content","size","ALLOWED_BLOCKS","termsData","excludeData","includeData","exclude","include","isSelected","loadTerms","state","JSON","parse","includeArr","map","term","term_id","stringify","stateInit","useDidMount","staticData","href","checked","includes","decodeEntities","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","height","marginTop","fontSize","margin","edit","attributes","allowedBlocks","save","settings","title","__","description","category","icon","keywords","supports","html","align","type","source","selector","default","registerBlockType","moment","ReactDOM","i18n","lodash"],"mappings":";;;;;;;;;;;;;;;;;yIAAAA,EAAOC,QAAUC,O,gBCAjBF,EAAOC,QAAUE,GAAGC,S,iBCApBJ,EAAOC,QAAUE,GAAGE,a,kBCApBL,EAAOC,QAAUE,GAAGG,Q,kBCApBN,EAAOC,QAAUE,GAAGI,K,kBCApBP,EAAOC,QAAUE,GAAGK,c,oFCApBR,EAAOC,QAAUE,GAAGM,Y,mKCGdC,EAAW,SAACC,EAAUC,EAASC,QAC7BC,IAAcF,IACdA,EAAU,IAEd,IAAMG,EAAa,IAAIZ,GAAGa,IAAIC,YAAYN,GAC1C,YAAIG,IAAcD,EACP,IAAIK,SAAQ,SAAAC,GAEfC,IAAS,CACLC,KAAK,4EAAD,OAA8ER,KACnFS,MAAK,SAAAC,GACJJ,EAAQI,cAIhBT,IAAcC,GACP,IAAIG,SAAQ,SAAAC,GACf,IAAMK,EAAO,GACbT,EACKU,MAAM,CACHD,KAAM,CAAEE,YAAY,EAAOC,SAAUf,KAExCU,MAAK,SAAAC,GACF,IAAK,IAAIK,EAAQ,EAAGA,EAAQL,EAAMM,OAAQD,IAAS,CAC/C,IAAME,EAAOP,EAAMK,GAAOE,KAAKC,QAAlB,UACNpB,EAASqB,cADH,KAET,IAEJR,EAAKD,EAAMK,GAAOK,IAAM,CACpBA,GAAIV,EAAMK,GAAOK,GACjBC,KAAMX,EAAMK,GAAOM,KACnBJ,QAGRX,EAAQK,U,mEChCPW,YAAU,CAC3BC,aAAc,IADGD,EAElB,YAAuE,IAApEE,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,KAAM3B,EAAsD,EAAtDA,SAAU4B,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,SAAUJ,EAAmB,EAAnBA,aAQlD,OANAK,qBAAU,YDmCY,SAAC9B,EAAUC,GACjC,OAAO,IAAIM,SAAQ,SAAAC,GACfT,EAASC,EAAUC,GAASU,MAAK,SAAAE,GAC7B,IAAMY,EAAe,GAErBM,OAAOC,KAAKnB,GAAMoB,SAAQ,SAAAC,GACtB,IAAMC,EAAUtB,EAAKqB,GACrBT,EAAaW,KAAK,CACdC,MAAOF,EAAQZ,KACfG,MAAOS,EAAQZ,UAIvBE,EAAaa,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEb,MAAQc,EAAEd,MAAQ,GAAK,KAEtDlB,EAAQiB,UCjDZgB,CAAkBzC,GAAUW,MAAK,SAAA+B,GAC7Bb,EAAS,CAAEJ,aAAciB,SAE9B,CAAC1C,IAGA,2BAAK2C,MAAO,CAAEC,QAAS,OAAQC,WAAY,WACvC,+BACI,oBAAC,gBAAD,CACIR,MAAOX,EACPgB,QAASjB,EACTqB,SAAU,SAAAC,GACNnB,EAAc,CAAEF,MAAOqB,KAE3BJ,MAAO,CAAEK,aAAc,OACvBC,UAAU,wBAGlB,sCACA,+BACI,oBAAC,cAAD,CACIZ,MAAOV,EACPmB,SAAU,SAAAI,GACNtB,EAAc,CAAED,KAAMuB,KAE1BP,MAAO,CAAEK,aAAc,OACvBC,UAAU,4B,qBCUfE,EA1CS,SAAC,GAMlB,IALHC,EAKE,EALFA,QACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,YACA1B,EAEE,EAFFA,cACA2B,EACE,EADFA,SAEA,OACI,2BAAKN,UAAU,wBACX,2BAAKA,UAAU,SACX,+BACI,oBAACO,EAAA,EAAD,CAAMjC,KAAK,iBAEd,IAAUK,GACP,oBAAC,WAAD,CACI6B,QAAQ,KACRpB,MAAOe,EACPN,SAAU,SAAAY,GAAC,OAAI9B,EAAc,CAAEwB,QAASM,KACxCJ,YAAaA,EACbK,mBAAoB,CAAC,QACrBC,wBAAsB,EACtBX,UAAU,gBAGjB,IAAUrB,GACP,oBAAC,WAASiC,QAAV,CACIJ,QAAQ,KACRpB,MAAOe,EACPH,UAAU,gBAGjB,IAASI,GACN,+BACI,oBAACG,EAAA,EAAD,CAAMjC,KAAK,gBAAgBuC,KAAK,YAI5C,2BAAKb,UAAU,WAAWM,K,kBCrChCQ,GCGqBvC,YAAU,CACjCwC,UAAW,GACXC,YAAa,GACbC,YAAa,IAHU1C,EAKvB,YAWO,IAVHwC,EAUE,EAVFA,UACAC,EASE,EATFA,YACAC,EAQE,EARFA,YACArC,EAOE,EAPFA,SACAsC,EAME,EANFA,QACAC,EAKE,EALFA,QACAlE,EAIE,EAJFA,OACAF,EAGE,EAHFA,SACA4B,EAEE,EAFFA,cACAyC,EACE,EADFA,WAqCMC,EAAY,WACdvE,EAASC,EAAU,IAAKE,GAAQS,MAAK,SAAAC,GACjCiB,EAAS,CAAEmC,UAAWpD,IArCZ,SAAAA,GACd,IAAM2D,EAAQ,GAQd,GALI,IAAM3D,EAAMM,QAAU,IAAMiD,EAAQjD,SACpCqD,EAAMN,YAAcO,KAAKC,MAAMN,IAI/B,IAAMvD,EAAMM,QAAU,IAAMkD,EAAQlD,OAAQ,CAC5C,IAAMwD,EAAa,GACnB9D,EAAM+D,KAAI,SAAAC,GACNF,EAAWtC,KAAK,CACZd,GAAIsD,EAAKC,QACTtD,KAAMqD,EAAKrD,KACXJ,KAAMyD,EAAKzD,UAInBS,EAAc,CAAEwC,QAASI,KAAKM,UAAUJ,KACxCH,EAAML,YAAcQ,OACb,IAAM9D,EAAMM,QAAU,IAAMkD,EAAQlD,SAC3CqD,EAAML,YAAcM,KAAKC,MAAML,IAGnCvC,EAAS0C,GAaLQ,CAAUnE,QAKd,IAAUgB,GACVoD,aAAY,WACJ,IAAMhB,EAAU9C,QAChBoD,OAKZ,IAqCMW,EA3DE,IAAMb,EAAQlD,SAAU,IAAUU,GAC3B4C,KAAKC,MAAML,GA2D1B,OACI,2BAAKnB,UAAU,iBACV,IAAUgC,GACP,oBAAC,WAAD,KACKA,EAAWN,KAAI,SAAAC,GACZ,OACI,yBACI3B,UAAU,OACViC,KAAI,WAAMlF,EAASqB,cAAf,YACAuD,EAAKzD,OAGRyD,EAAKrD,WAMzB,IAAUK,GACP,oBAAC,WAAD,KACKoC,EAAUW,KAAI,SAAAC,GACX,IAAMO,EAAUhB,EAAQiB,SAASR,EAAKC,SAWtC,OACI,2BAAK5B,UAAU,QACX,oBAAC,kBAAD,CACIvB,MAAO2D,yBAAeT,EAAKrD,MAC3B4D,QAASA,EACTrC,SAdK,SAAAN,GA7Df,IAAC8C,EAAMC,EAAQC,EAAUC,EAKjCxE,EAJJyE,EACAC,EAFaL,EA+DK9C,EA/DC+C,EAgEDX,EAAKC,QAhEIW,EAiETZ,EAAKrD,KAjEckE,EAkEnBb,EAAKzD,KAjEvBuE,EAAezB,EACf0B,EAAezB,GAYjB,IAASoB,GAETI,EAAatD,KAAKmD,IAVb,KADCtE,EAAQ0E,EAAaC,WAAU,SAAAC,GAAC,OAAIA,EAAEvE,KAAOiE,OACjCI,EAAaG,OAAO7E,EAAO,KAe7C0E,EAAavD,KAAK,CACdd,GAAIiE,EACJhE,KAAMiE,EACNrE,KAAMsE,IAfY,WACtB,IAAMxE,EAAQyE,EAAaK,QAAQR,IAC9B,IAAMtE,GAAOyE,EAAaI,OAAO7E,EAAO,GAgB7C+E,IAIJpE,EAAc,CACVuC,QAASK,KAAKM,UAAUY,GACxBtB,QAASI,KAAKM,UAAUa,MA2CAM,cAAarB,EAAKC,QAClBqB,YAAWtB,EAAKrD,OAEpB,2BACIoB,MAAO,CACHwD,OAAQ,OACRC,UAAW,UAGd,IAAS/B,GACN,2BACI1B,MAAO,CACH0D,SAAU,OACVC,OAAQ,IAHhB,IAMM1B,EAAKzD,KANX,eD7JrB,CAAC,iCAeToF,EAbF,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,WAAYvD,EAA+B,EAA/BA,UAAWrB,EAAoB,EAApBA,cAC3BwB,EAAYoD,EAAZpD,QACR,OACI,2BAAKH,UAAWA,GACZ,oBAAC,EAAD,CAAiBG,QAASA,EAASE,YAAY,WAAWD,SAAS,EAAMzB,cAAeA,GACpF,oBAAC,cAAD,CACI6E,cAAe1C,OEGpB2C,EAXF,SAAC,GAA+B,IAA7BF,EAA4B,EAA5BA,WAAYvD,EAAgB,EAAhBA,UAChBG,EAAYoD,EAAZpD,QACR,OACI,2BAAKH,UAAWA,GACZ,oBAAC,EAAD,CAAiBG,QAASA,EAASC,SAAS,EAAMzB,eAAe,GAC7D,oBAAC,cAAYiC,QAAb,SCoBD8C,EAzBE,CACb,0BACA,CACIC,MAAOC,aAAG,aACVC,YAAa,oCACbC,SAAU,SACVC,KAAM,aACNC,SAAU,CAACJ,aAAG,iBAAkBA,aAAG,cAAeA,aAAG,SACrDK,SAAU,CACNC,MAAM,EACNC,OAAO,GAEXZ,WAAY,CACRpD,QAAS,CACLiE,KAAM,SACNC,OAAQ,OACRC,SAAU,KACVC,QAAS,KAGjBjB,OACAG,SCrBRe,oBAAiB,WAAjB,cAAqBd,K,iBCJrBtH,EAAOC,QAAUoI,Q,iBCAjBrI,EAAOC,QAAUE,GAAGiB,U,iBCApBpB,EAAOC,QAAUqI,U,iBCAjBtI,EAAOC,QAAUE,GAAGoI,M,iBCApBvI,EAAOC,QAAUuI,S","file":"taxonomy-tree/main-9a41c2e9.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.blockEditor;","module.exports = wp.blocks;","module.exports = wp.url;","module.exports = wp.htmlEntities;","module.exports = wp.components;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTerms = (taxonomy, perPage, letter) => {\n    if (undefined === perPage) {\n        perPage = 25;\n    }\n    const collection = new wp.api.collections[taxonomy]();\n    if (undefined !== letter) {\n        return new Promise(resolve => {\n            const data = {};\n            apiFetch({\n                path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=topic&letter=${letter}`,\n            }).then(terms => {\n                resolve(terms);\n            });\n        });\n    }\n    if (undefined !== collection) {\n        return new Promise(resolve => {\n            const data = {};\n            collection\n                .fetch({\n                    data: { hide_empty: false, per_page: perPage },\n                })\n                .then(terms => {\n                    for (let index = 0; index < terms.length; index++) {\n                        const slug = terms[index].slug.replace(\n                            `${taxonomy.toLowerCase()}_`,\n                            '',\n                        );\n                        data[terms[index].id] = {\n                            id: terms[index].id,\n                            name: terms[index].name,\n                            slug,\n                        };\n                    }\n                    resolve(data);\n                });\n        });\n    }\n    return false;\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsAsOptions };\n","import { useEffect } from '@wordpress/element';\nimport { withState } from '@wordpress/compose';\nimport { SelectControl, TextControl } from '@wordpress/components';\nimport { getTermsAsOptions } from 'shared';\n\nconst KickerEditor = withState({\n    labelOptions: [],\n})(({ label, date, taxonomy, setAttributes, setState, labelOptions }) => {\n    // On initial load & taxonomy change:\n    useEffect(() => {\n        getTermsAsOptions(taxonomy).then(options => {\n            setState({ labelOptions: options });\n        });\n    }, [taxonomy]);\n\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div>\n                <SelectControl\n                    value={label}\n                    options={labelOptions}\n                    onChange={l => {\n                        setAttributes({ label: l });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n            <div>&nbsp;|&nbsp;</div>\n            <div>\n                <TextControl\n                    value={date}\n                    onChange={d => {\n                        setAttributes({ date: d });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default KickerEditor;\n","import './style.scss';\nimport { RichText } from '@wordpress/block-editor';\nimport { Icon } from 'semantic-ui-react';\n\nconst CollapsibleList = ({\n    heading,\n    chevron,\n    placeholder,\n    setAttributes,\n    children,\n}) => {\n    return (\n        <div className=\"prc-collapsible-list\">\n            <div className=\"title\">\n                <div>\n                    <Icon name=\"caret down\" />\n                </div>\n                {false !== setAttributes && (\n                    <RichText\n                        tagName=\"h2\"\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder={placeholder}\n                        formattingControls={['link']}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                )}\n                {false === setAttributes && (\n                    <RichText.Content\n                        tagName=\"h2\"\n                        value={heading}\n                        className=\"sans-serif\"\n                    />\n                )}\n                {true === chevron && (\n                    <div>\n                        <Icon name=\"chevron right\" size=\"large\" />\n                    </div>\n                )}\n            </div>\n            <div className=\"content\">{children}</div>\n        </div>\n    );\n};\n\nexport default CollapsibleList;\n","import { Fragment } from '@wordpress/element';\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { CollapsibleList } from 'shared';\n\nconst ALLOWED_BLOCKS = ['prc-block/taxonomy-tree-list'];\n\nconst edit = ({ attributes, className, setAttributes }) => {\n    const { heading } = attributes;\n    return (\n        <div className={className}>\n            <CollapsibleList heading={heading} placeholder=\"Politics\" chevron={true} setAttributes={setAttributes}>\n                <InnerBlocks\n                    allowedBlocks={ALLOWED_BLOCKS}\n                />\n            </CollapsibleList>\n        </div>\n    );\n};\n\nexport default edit;\n","import { getTerms } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTerms(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","import { Fragment } from '@wordpress/element';\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { CollapsibleList } from 'shared';\n\nconst save = ({ attributes, className }) => {\n    const { heading } = attributes;\n    return (\n        <div className={className}>\n            <CollapsibleList heading={heading} chevron={true} setAttributes={false}>\n                <InnerBlocks.Content />\n            </CollapsibleList>\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/taxonomy-tree',\n    {\n        title: __('Tree List'),\n        description: 'A tree list that can be expanded.',\n        category: 'layout',\n        icon: 'networking',\n        keywords: [__('Taxonomy Tree'), __('Taxonomies'), __('Tree')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        attributes: {\n            heading: {\n                type: 'string',\n                source: 'html',\n                selector: 'h2',\n                default: '',\n            },\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import './style.scss';\nimport { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = moment;","module.exports = wp.apiFetch;","module.exports = ReactDOM;","module.exports = wp.i18n;","module.exports = lodash;"],"sourceRoot":""}