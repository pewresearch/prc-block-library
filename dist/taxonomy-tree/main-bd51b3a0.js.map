{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.element\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/taxonomy-tree/tree.js","webpack:///./src/taxonomy-tree/edit.js","webpack:///./src/taxonomy-tree/save.js","webpack:///./src/taxonomy-tree/settings.js","webpack:///./src/taxonomy-tree/index.js","webpack:///external \"ReactDOM\"","webpack:///external \"wp.i18n\"","webpack:///external \"moment\"","webpack:///external \"wp.components\"","webpack:///external \"lodash\""],"names":["module","exports","React","wp","blocks","blockEditor","element","getTerms","taxonomy","perPage","undefined","collection","api","collections","Promise","resolve","data","fetch","hide_empty","per_page","then","terms","index","length","slug","replace","toLowerCase","id","name","TreeItem","url","termID","editMode","termsSelected","setData","checked","includes","Checkbox","label","defaultChecked","onChange","e","console","log","t","push","href","Tree","term","maxHeight","overflowY","useEffect","List","Item","Header","style","edit","withState","attributes","setAttributes","isSelected","setState","labelOptions","Object","keys","forEach","key","termObj","value","sort","a","b","getTermsAsOptions","options","SelectTaxonomy","tx","v","SelectTerm","tm","save","props","settings","title","__","description","category","icon","keywords","supports","html","align","type","default","registerBlockType","ReactDOM","i18n","moment","components","lodash"],"mappings":"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","file":"taxonomy-tree/main-bd51b3a0.js","sourcesContent":["module.exports = React;","module.exports = wp.blocks;","module.exports = wp.blockEditor;","module.exports = wp.element;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nconst getTerms = (taxonomy, perPage) => {\n    if (undefined === perPage) {\n        perPage = 25;\n    }\n    const collection = new wp.api.collections[taxonomy]();\n    if (undefined === collection) {\n        return false;\n    }\n    return new Promise(resolve => {\n        const data = {};\n        collection\n            .fetch({\n                data: { hide_empty: false, per_page: perPage },\n            })\n            .then(terms => {\n                for (let index = 0; index < terms.length; index++) {\n                    const slug = terms[index].slug.replace(\n                        `${taxonomy.toLowerCase()}_`,\n                        '',\n                    );\n                    data[terms[index].id] = {\n                        id: terms[index].id,\n                        name: terms[index].name,\n                        slug,\n                    };\n                }\n                resolve(data);\n            });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsAsOptions };\n","import { useEffect, Fragment } from '@wordpress/element';\nimport { List, Checkbox } from 'semantic-ui-react';\nimport { getTermsAsOptions } from '../_shared/helpers';\n\n// additional state: termsSelected (default), moreTermsSelected\n// On first init its a list of checkboxes all filling out the \"viewable\" terms. They will be listed alphabetically. Then if you select view more that will add that term to a moreTermsSelected array or object. moreTermsSelected gets put into an accordion list of of \"VIew MOre\"import { Animate } from '@wordpress/components';\n// Now how do we get the termsSelected and moreTermsSelected fed up to a total list of termsToExclude whenever we're calling this tree. SO after the key topics tree is built and we add additional sub headers those trees would be called with terms to exclude and when it received that it would pre-remove the terms to exclude that matched its termsSelected or moreTermsSelected...\n// Maybe we could use the block context api so that this tree could become a block and provide context up higher? then in the main tree view we would have a master termsToExclude data attribute.\n\nconst TreeItem = ({ name, url, termID, editMode, termsSelected, setData }) => {\n    let checked = false;\n    if (undefined !== termsSelected && termsSelected.includes(termID)) {\n        checked = true;\n    }\n    return (\n        <Fragment>\n            {true === editMode && (\n                <Checkbox\n                    label={name}\n                    defaultChecked={checked}\n                    onChange={e => {\n                        console.log(`Clicked ${termID}`);\n                        console.log('Existing Selected Terms:');\n                        console.log(termsSelected);\n\n                        let t = termsSelected;\n                        if (undefined !== termsSelected) {\n                            t.push(termID);\n                        } else {\n                            t = [termID];\n                        }\n                        setData({ termsSelected: t });\n                    }}\n                />\n            )}\n            {false === editMode && <a href={url}>{name}</a>}\n        </Fragment>\n    );\n};\n\nconst Tree = ({ label, term, taxonomy, termsSelected, editMode, setData }) => {\n    let maxHeight = '100%';\n    let overflowY = 'auto';\n    if (true === editMode) {\n        maxHeight = '7.15em';\n        overflowY = 'scroll';\n    }\n\n    useEffect(() => {\n        console.log('Term Change');\n        // getTermsAsOptions(taxonomy).then(options => console.log(options));\n    }, [term]);\n\n    // get\n    return (\n        <Fragment>\n            <List>\n                <List.Item>\n                    <List.Header>{label}</List.Header>\n                </List.Item>\n                <List.Item>\n                    <List style={{ maxHeight, overflowY }}>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 1\"\n                                url=\"#\"\n                                termID={1000}\n                                editMode={editMode}\n                                termsSelected={termsSelected}\n                                setData={setData}\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 2\"\n                                url=\"#\"\n                                termID={10001}\n                                editMode={editMode}\n                                termsSelected={termsSelected}\n                                setData={setData}\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 3\"\n                                url=\"#\"\n                                termID={1000}\n                                editMode={editMode}\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 4\"\n                                url=\"#\"\n                                termID={1000}\n                                editMode={editMode}\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 5\"\n                                url=\"#\"\n                                termID={1000}\n                                editMode={editMode}\n                            />\n                        </List.Item>\n                        <List.Item>\n                            <TreeItem\n                                name=\"Term 6\"\n                                url=\"#\"\n                                termID={1000}\n                                editMode={editMode}\n                            />\n                        </List.Item>\n                    </List>\n                </List.Item>\n            </List>\n        </Fragment>\n    );\n};\n\nexport default Tree;\n\n// We give you the taxonomy and term... if you also p ass in selected which would be an array of term ids already selected then we will show this list with those selected. When you update it we will remove it.\n{\n    /* <Tree taxonomy={} term={} termsToExclude={} termsSelected={} moreTermsSelected={} setAttribute/> */\n}\n","import { useEffect, Fragment } from '@wordpress/element';\nimport { withState } from '@wordpress/compose';\n// import { InspectorControls } from '@wordpress/block-editor';\nimport { SelectControl } from '@wordpress/components';\nimport { RichText, InnerBlocks } from '@wordpress/block-editor';\nimport { getTermsAsOptions } from '../_shared/helpers';\n\nimport Tree from './tree';\n\nconst edit = withState({\n    terms: [],\n})(({ terms, attributes, setAttributes, isSelected, setState }) => {\n    const { taxonomy, term, termsSelected } = attributes;\n    // On initial load & taxonomy change:\n\n    // Watch for initial change on taxonomy... once that AND the term are set these should be locked, if you want to undo then you should delete and start over I say.\n    useEffect(() => {\n        console.log('Taxonomy Change');\n        if (false !== taxonomy) {\n            // eslint-disable-next-line prettier/prettier\n            getTermsAsOptions(taxonomy, 50).then(options =>\n                    // eslint-disable-next-line function-paren-newline\n                    setState({ terms: options }),\n                // eslint-disable-next-line function-paren-newline\n            );\n        }\n    }, [taxonomy]);\n\n    const SelectTaxonomy = ({ tx }) => (\n        <SelectControl\n            value={tx}\n            options={[\n                { label: 'Topics', value: 'Topics' },\n                { label: 'Topic', value: 'Topic' },\n            ]}\n            onChange={v => {\n                setAttributes({ taxonomy: v });\n            }}\n        />\n    );\n\n    const SelectTerm = ({ tm }) => (\n        <SelectControl\n            value={tm}\n            options={terms}\n            onChange={v => {\n                setAttributes({ term: v });\n            }}\n        />\n    );\n\n    console.log(taxonomy);\n\n    return (\n        <Fragment>\n            {false === term && <SelectTaxonomy tx={taxonomy} />}\n            {false !== taxonomy && false === term && <SelectTerm tm={term} />}\n            {false !== term && <h2>{term}</h2>}\n            {false !== taxonomy && false !== term && (\n                <Fragment>\n                    <Tree\n                        label=\"Key Topics\"\n                        taxonomy={taxonomy}\n                        term={term}\n                        editMode={isSelected}\n                        termsSelected={termsSelected}\n                        setData={setAttributes}\n                    />\n                    <InnerBlocks />\n                </Fragment>\n            )}\n        </Fragment>\n    );\n});\n\nexport default edit;\n\n// Select taxonomy\n// Select parent term...\n// A richtext area for you type in \"Key Topics\"\n// A tree view of 2nd and 3rd and 4th level topics... what it should return however is a flat semantic list.\n","import { Component, Fragment } from '@wordpress/element';\n\nconst save = props => {\n    console.log('Save Mode:');\n    console.log(props);\n    return <div>Hello World</div>;\n};\n\nexport default save;\n","\nimport { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/taxonomy-tree',\n    {\n        title: __('Taxonomy Tree'),\n        description: 'A tree view of a selected taxonomy and term.',\n        category: 'layout',\n        icon: 'networking',\n        keywords: [__('Taxonomy Tree'), __('Taxonomies')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        attributes: {\n            taxonomy: {\n                type: 'string',\n                default: false,\n            },\n            term: {\n                type: 'string',\n                default: false,\n            },\n            termsSelected: {\n                type: 'array',\n            },\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = ReactDOM;","module.exports = wp.i18n;","module.exports = moment;","module.exports = wp.components;","module.exports = lodash;"],"sourceRoot":""}