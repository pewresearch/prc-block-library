{"version":3,"sources":["webpack:///external \"lodash\"","webpack:///external \"wp.data\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.blockEditor\"","webpack:///./src/pullquote/shared.js","webpack:///./src/pullquote/edit.js","webpack:///./src/pullquote/figure.js","webpack:///./src/pullquote/blockquote.js","webpack:///./src/pullquote/transforms.js","webpack:///./src/pullquote/settings.js","webpack:///./src/pullquote/save.js","webpack:///./src/pullquote/index.js"],"names":["module","exports","lodash","wp","data","element","blocks","i18n","blockEditor","SOLID_COLOR_CLASS","PullQuoteEdit","props","wasTextColorAutomaticallyComputed","pullQuoteMainColorSetter","bind","pullQuoteTextColorSetter","prevProps","this","attributes","className","mainColor","setAttributes","includes","undefined","customMainColor","color","colorValue","colorUtils","textColor","setTextColor","setMainColor","isSolidColorStyle","needTextColor","shouldSetTextColor","getMostReadableColor","isSelected","insertBlocksAfter","value","citation","figureStyles","figureClasses","classnames","blockquoteStyles","blockquoteClasses","class","style","identifier","multiline","onChange","nextValue","placeholder","__","textAlign","RichText","isEmpty","nextCitation","__unstableMobileNoFocusOnMount","__unstableOnSplitAtEnd","createBlock","title","colorSettings","label","Component","withColors","transforms","from","type","isMultiBlock","transform","toHTMLString","join","map","content","create","html","multilineTag","anchor","to","paragraphs","push","split","piece","length","attrs","pieces","headingBlock","quotePieces","slice","name","metadata","category","supports","settings","description","icon","example","styles","_x","isDefault","edit","save","customTextColor","blockquoteTextColorClass","getColorClassName","Content","tagName","registerBlockType"],"mappings":"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","file":"pullquote/main-5a539a03.js","sourcesContent":["module.exports = lodash;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.blocks;","module.exports = wp.i18n;","module.exports = wp.blockEditor;","export const SOLID_COLOR_STYLE_NAME = 'solid-color';\nexport const SOLID_COLOR_CLASS = `is-style-${ SOLID_COLOR_STYLE_NAME }`;\n","/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport {\n    RichText,\n    InspectorControls,\n    withColors,\n    PanelColorSettings,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { Figure } from './figure';\nimport { BlockQuote } from './blockquote';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nclass PullQuoteEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.wasTextColorAutomaticallyComputed = false;\n        this.pullQuoteMainColorSetter = this.pullQuoteMainColorSetter.bind(\n            this,\n        );\n        this.pullQuoteTextColorSetter = this.pullQuoteTextColorSetter.bind(\n            this,\n        );\n    }\n\n    componentDidUpdate(prevProps) {\n        const { attributes, className, mainColor, setAttributes } = this.props;\n        // If the block includes a named color and we switched from the\n        // solid color style to the default style.\n        if (\n            attributes.mainColor &&\n            !includes(className, SOLID_COLOR_CLASS) &&\n            includes(prevProps.className, SOLID_COLOR_CLASS)\n        ) {\n            // Remove the named color, and set the color as a custom color.\n            // This is done because named colors use classes, in the default style we use a border color,\n            // and themes don't set classes for border colors.\n            setAttributes({\n                mainColor: undefined,\n                customMainColor: mainColor.color,\n            });\n        }\n    }\n\n    pullQuoteMainColorSetter(colorValue) {\n        const {\n            colorUtils,\n            textColor,\n            setAttributes,\n            setTextColor,\n            setMainColor,\n            className,\n        } = this.props;\n        const isSolidColorStyle = includes(className, SOLID_COLOR_CLASS);\n        const needTextColor =\n            !textColor.color || this.wasTextColorAutomaticallyComputed;\n        const shouldSetTextColor = isSolidColorStyle && needTextColor;\n\n        if (isSolidColorStyle) {\n            // If we use the solid color style, set the color using the normal mechanism.\n            setMainColor(colorValue);\n        } else {\n            // If we use the default style, set the color as a custom color to force the usage of an inline style.\n            // Default style uses a border color for which classes are not available.\n            setAttributes({ customMainColor: colorValue });\n        }\n\n        if (shouldSetTextColor) {\n            if (colorValue) {\n                this.wasTextColorAutomaticallyComputed = true;\n                setTextColor(colorUtils.getMostReadableColor(colorValue));\n            } else if (this.wasTextColorAutomaticallyComputed) {\n                // We have to unset our previously computed text color on unsetting the main color.\n                this.wasTextColorAutomaticallyComputed = false;\n                setTextColor();\n            }\n        }\n    }\n\n    pullQuoteTextColorSetter(colorValue) {\n        const { setTextColor } = this.props;\n        setTextColor(colorValue);\n        this.wasTextColorAutomaticallyComputed = false;\n    }\n\n    render() {\n        const {\n            attributes,\n            mainColor,\n            textColor,\n            setAttributes,\n            isSelected,\n            className,\n            insertBlocksAfter,\n        } = this.props;\n\n        const { value, citation } = attributes;\n\n        const figureStyles = { '--mark-color': mainColor.color };\n\n        const figureClasses = classnames(className);\n\n        const blockquoteStyles = {\n            color: textColor.color,\n        };\n\n        const blockquoteClasses =\n            textColor.color &&\n            classnames('has-text-color', {\n                [textColor.class]: textColor.class,\n            });\n\n        return (\n            <>\n                <Figure style={figureStyles} className={figureClasses}>\n                    <BlockQuote\n                        style={blockquoteStyles}\n                        className={blockquoteClasses}\n                    >\n                        <RichText\n                            identifier=\"value\"\n                            multiline\n                            value={value}\n                            onChange={nextValue =>\n                                setAttributes({\n                                    value: nextValue,\n                                })\n                            }\n                            placeholder={\n                                // translators: placeholder text used for the quote\n                                __('Write quote…')\n                            }\n                            textAlign=\"center\"\n                        />\n                        {(!RichText.isEmpty(citation) || isSelected) && (\n                            <RichText\n                                identifier=\"citation\"\n                                value={citation}\n                                placeholder={\n                                    // translators: placeholder text used for the citation\n                                    __('Write citation…')\n                                }\n                                onChange={nextCitation =>\n                                    setAttributes({\n                                        citation: nextCitation,\n                                    })\n                                }\n                                __unstableMobileNoFocusOnMount\n                                textAlign=\"center\"\n                                __unstableOnSplitAtEnd={() =>\n                                    insertBlocksAfter(\n                                        createBlock('core/paragraph'),\n                                    )\n                                }\n                            />\n                        )}\n                    </BlockQuote>\n                </Figure>\n                <InspectorControls>\n                    <PanelColorSettings\n                        title={__('Color settings')}\n                        colorSettings={[\n                            {\n                                value: mainColor.color,\n                                onChange: this.pullQuoteMainColorSetter,\n                                label: __('Mark color'),\n                            },\n                            {\n                                value: textColor.color,\n                                onChange: this.pullQuoteTextColorSetter,\n                                label: __('Text color'),\n                            },\n                        ]}\n                    />\n                </InspectorControls>\n            </>\n        );\n    }\n}\n\nexport default withColors({\n    mainColor: '--mark-color',\n    textColor: 'color',\n})(PullQuoteEdit);\n","export const Figure = 'figure';\n","export const BlockQuote = 'blockquote';\n","/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\nimport { create, join, split, toHTMLString } from '@wordpress/rich-text';\n\nconst transforms = {\n    from: [\n        {\n            type: 'block',\n            isMultiBlock: true,\n            blocks: ['core/paragraph'],\n            transform: attributes => {\n                return createBlock('prc-block/pullquote', {\n                    value: toHTMLString({\n                        value: join(\n                            attributes.map(({ content }) =>\n                                create({ html: content })),\n                            '\\u2028',\n                        ),\n                        multilineTag: 'p',\n                    }),\n                    anchor: attributes.anchor,\n                });\n            },\n        },\n        {\n            type: 'block',\n            blocks: ['core/heading'],\n            transform: ({ content, anchor }) => {\n                return createBlock('prc-block/pullquote', {\n                    value: `<p>${content}</p>`,\n                    anchor,\n                });\n            },\n        },\n    ],\n    to: [\n        {\n            type: 'block',\n            blocks: ['core/paragraph'],\n            transform: ({ value, citation }) => {\n                const paragraphs = [];\n                if (value && '<p></p>' !== value) {\n                    paragraphs.push(\n                        ...split(\n                            create({ html: value, multilineTag: 'p' }),\n                            '\\u2028',\n                        ).map(piece =>\n                            createBlock('core/paragraph', {\n                                content: toHTMLString({ value: piece }),\n                            })),\n                    );\n                }\n                if (citation && '<p></p>' !== citation) {\n                    paragraphs.push(\n                        createBlock('core/paragraph', {\n                            content: citation,\n                        }),\n                    );\n                }\n                if (0 === paragraphs.length) {\n                    return createBlock('core/paragraph', {\n                        content: '',\n                    });\n                }\n                return paragraphs;\n            },\n        },\n        {\n            type: 'block',\n            blocks: ['core/heading'],\n            transform: ({ value, citation, ...attrs }) => {\n                // If there is no pullquote content, use the citation as the\n                // content of the resulting heading. A nonexistent citation\n                // will result in an empty heading.\n                if ('<p></p>' === value) {\n                    return createBlock('core/heading', {\n                        content: citation,\n                    });\n                }\n                const pieces = split(\n                    create({ html: value, multilineTag: 'p' }),\n                    '\\u2028',\n                );\n                const headingBlock = createBlock('core/heading', {\n                    content: toHTMLString({ value: pieces[0] }),\n                });\n                if (!citation && 1 === pieces.length) {\n                    return headingBlock;\n                }\n                const quotePieces = pieces.slice(1);\n                const pullquoteBlock = createBlock('prc-block/pullquote', {\n                    ...attrs,\n                    citation,\n                    value: toHTMLString({\n                        value: quotePieces.length\n                            ? join(pieces.slice(1), '\\u2028')\n                            : create(),\n                        multilineTag: 'p',\n                    }),\n                });\n                return [headingBlock, pullquoteBlock];\n            },\n        },\n    ],\n};\n\nexport default transforms;\n","import { __, _x } from '@wordpress/i18n';\nimport { pullquote as icon } from '@wordpress/icons';\n\n/**\n * Internal dependencies\n */\nimport edit from './edit';\nimport metadata from './block.json';\nimport save from './save';\nimport transforms from './transforms';\n\nconst { name, category, attributes, supports } = metadata;\n\nconst settings = [\n    name,\n    {\n        title: __('Pullquote'),\n        description: __(\n            'Give special visual emphasis to a quote from your text.',\n        ),\n        icon,\n        category,\n        attributes,\n        supports,\n        example: {\n            attributes: {\n                value: `<p>${__(\n                    'One of the hardest things to do in technology is disrupt yourself.',\n                )}</p>`,\n                citation: __('Matt Mullenweg'),\n            },\n        },\n        styles: [\n            {\n                name: 'has-marks',\n                label: _x('Has Marks', 'block style'),\n                isDefault: true,\n            },\n            { name: 'no-marks', label: __('No Marks') },\n        ],\n        transforms,\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { getColorClassName, RichText } from '@wordpress/block-editor';\n\nexport default function save({ attributes }) {\n    const {\n        customMainColor,\n        textColor,\n        customTextColor,\n        value,\n        citation,\n        className,\n    } = attributes;\n\n    let figureClasses;\n    const figureStyles = { '--mark-color': customMainColor };\n\n    const blockquoteTextColorClass = getColorClassName('color', textColor);\n    const blockquoteClasses =\n        (textColor || customTextColor) &&\n        classnames('has-text-color', {\n            [blockquoteTextColorClass]: blockquoteTextColorClass,\n        });\n\n    const blockquoteStyles = blockquoteTextColorClass\n        ? undefined\n        : { color: customTextColor };\n\n    return (\n        <figure className={figureClasses} style={figureStyles}>\n            <blockquote className={blockquoteClasses} style={blockquoteStyles}>\n                <RichText.Content value={value} multiline />\n                {!RichText.isEmpty(citation) && (\n                    <RichText.Content tagName=\"cite\" value={citation} />\n                )}\n            </blockquote>\n        </figure>\n    );\n}\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n"],"sourceRoot":""}