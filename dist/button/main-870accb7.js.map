{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"moment\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\"","webpack:///external \"wp.data\"","webpack:///./src/button/colors.js","webpack:///./src/_shared/helpers/get-color-name/index.js","webpack:///./src/button/edit.js","webpack:///./src/button/save.js","webpack:///./src/button/settings.js","webpack:///./src/button/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.components\""],"names":["module","exports","React","moment","ReactDOM","wp","apiFetch","element","blocks","url","data","colors","name","color","getColorName","undefined","colorOption","findIndex","c","index","SidebarControls","setAttributes","title","__","value","onChange","disableCustomColors","label","u","edit","attributes","className","isSelected","classes","classNames","tagName","t","placeholder","formattingControls","Content","href","settings","icon","category","keywords","supports","html","type","default","save","registerBlockType","blockEditor","i18n","components"],"mappings":";;;;;;;;;;;;;;;;;qHAAAA,EAAOC,QAAUC,O,iBCAjBF,EAAOC,QAAUE,Q,iBCAjBH,EAAOC,QAAUG,U,iBCAjBJ,EAAOC,QAAUI,GAAGC,U,gBCApBN,EAAOC,QAAUI,GAAGE,S,iBCApBP,EAAOC,QAAUI,GAAGG,Q,iBCApBR,EAAOC,QAAUI,GAAGI,K,iBCApBT,EAAOC,QAAUI,GAAGK,M,iJCMLC,EANA,CACX,CAAEC,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,YAAaC,MAAO,QAC5B,CAAED,KAAM,UAAWC,MAAO,YCgBfC,G,YAnBM,SAACD,EAAOF,GACzB,GACI,KAAOE,QACPE,IAAcF,QACdE,IAAcJ,GACd,KAAOA,EAEP,OAAO,KAGX,IAAMK,EAAcL,EAAOM,WAAU,SAACC,EAAGC,GACrC,GAAIN,GAASK,EAAEL,MACX,OAAO,KAIf,OAAOF,EAAOK,GAAaJ,OCRzBQ,G,oCAAkB,SAAC,GAAmC,IAAjCP,EAAgC,EAAhCA,MAAOJ,EAAyB,EAAzBA,IAAKY,EAAoB,EAApBA,cACnC,OACI,oBAAC,oBAAD,KACI,oBAAC,YAAD,CAAWC,MAAOC,aAAG,0BACjB,+BACI,6BACI,6CAEJ,oBAAC,eAAD,CACIZ,OAAQA,EACRa,MAAOX,EACPY,SAAU,SAAAP,GACNG,EAAc,CAAER,MAAOK,KAE3BQ,qBAAmB,KAG3B,+BACI,oBAAC,cAAD,CACIC,MAAM,MACNH,MAAOf,EACPgB,SAAU,SAAAG,GAAC,OAAIP,EAAc,CAAEZ,IAAKmB,YAsC7CC,EA9BF,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,UAAWV,EAAgC,EAAhCA,cAC3BR,GAD2D,EAAjBmB,WACpBF,EAAtBjB,OAAOc,EAAeG,EAAfH,MAAOlB,EAAQqB,EAARrB,IAEhBwB,EAAUC,IACZH,EACAjB,EAAaD,EAAOF,GACpB,KACA,UAGJ,OACI,oBAAC,WAAD,KACI,oBAAC,EAAD,CACIE,MAAOA,EACPJ,IAAKA,EACLY,cAAeA,IAEnB,2BAAKU,UAAWE,GACZ,oBAAC,WAAD,CACIE,QAAQ,MACRX,MAAOG,EACPF,SAAU,SAAAW,GAAC,OAAIf,EAAc,CAAEM,MAAOS,KACtCC,YAAY,SACZC,mBAAoB,QCrCzBT,EAlBF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAChBlB,EAAsBiB,EAAtBjB,MAAOc,EAAeG,EAAfH,MAAOlB,EAAQqB,EAARrB,IAChBwB,EAAUC,IACZH,EACAjB,EAAaD,EAAOF,GACpB,KACA,UAEJ,OACI,oBAAC,WAAS4B,QAAV,CACIJ,QAAQ,IACRX,MAAOG,EACPI,UAAWE,EACXO,KAAM/B,KCoBHgC,EAlCE,CACb,mBACA,CAEInB,MAAOC,aAAG,UACVmB,KAAM,mBACNC,SAAU,SACVC,SAAU,CAACrB,aAAG,OAAQA,aAAG,WACzBsB,SAAU,CACNC,MAAM,GAGVhB,WAAY,CACRjB,MAAO,CACHkC,KAAM,SACNC,QAAS,IAEbrB,MAAO,CACHoB,KAAM,SAGNC,QAAS,IAEbvC,IAAK,CACDsC,KAAM,SACNC,QAAS,KAIjBnB,OACAoB,SC/BRC,oBAAiB,WAAjB,cAAqBT,K,gBCHrBzC,EAAOC,QAAUI,GAAG8C,a,gBCApBnD,EAAOC,QAAUI,GAAG+C,M,gBCApBpD,EAAOC,QAAUI,GAAGgD,a","file":"button/main-870accb7.js","sourcesContent":["module.exports = React;","module.exports = moment;","module.exports = ReactDOM;","module.exports = wp.apiFetch;","module.exports = wp.element;","module.exports = wp.blocks;","module.exports = wp.url;","module.exports = wp.data;","const colors = [\n    { name: 'primary', color: '#2185d0' },\n    { name: 'secondary', color: '#000' },\n    { name: 'mustard', color: '#d3aa20' },\n];\n\nexport default colors;","const getColorName = (color, colors) => {\n    if (\n        '' === color ||\n        undefined === color ||\n        undefined === colors ||\n        '' === colors\n    ) {\n        return null;\n    }\n\n    const colorOption = colors.findIndex((c, index) => {\n        if (color == c.color) {\n            return true;\n        }\n    });\n\n    return colors[colorOption].name;\n};\n\nexport default getColorName;\n","import { __ } from '@wordpress/i18n';\nimport { InspectorControls, RichText } from '@wordpress/block-editor';\nimport { PanelBody, ColorPalette, TextControl } from '@wordpress/components';\nimport { Fragment } from '@wordpress/element';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst SidebarControls = ({ color, url, setAttributes }) => {\n    return (\n        <InspectorControls>\n            <PanelBody title={__('Button Design Options')}>\n                <div>\n                    <p>\n                        <strong>Color:</strong>\n                    </p>\n                    <ColorPalette\n                        colors={colors}\n                        value={color}\n                        onChange={c => {\n                            setAttributes({ color: c });\n                        }}\n                        disableCustomColors\n                    />\n                </div>\n                <div>\n                    <TextControl\n                        label=\"URL\"\n                        value={url}\n                        onChange={u => setAttributes({ url: u })}\n                    />\n                </div>\n            </PanelBody>\n        </InspectorControls>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes, isSelected }) => {\n    const { color, label, url } = attributes;\n\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n\n    return (\n        <Fragment>\n            <SidebarControls\n                color={color}\n                url={url}\n                setAttributes={setAttributes}\n            />\n            <div className={classes}>\n                <RichText\n                    tagName=\"div\" // The tag here is the element output and editable in the admin\n                    value={label} // Any existing content, either from the database or an attribute default\n                    onChange={t => setAttributes({ label: t })} // Store updated content as a block attribute\n                    placeholder=\"Button\" // Display this text before any content has been added by the user\n                    formattingControls={[]}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nexport default edit;\n","import { RichText } from '@wordpress/block-editor';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst edit = ({ attributes, className }) => {\n    const { color, label, url } = attributes;\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n    return (\n        <RichText.Content\n            tagName=\"a\" // The tag here is the element output and editable in the admin\n            value={label} // Any existing content, either from the database or an attribute default\n            className={classes}\n            href={url}\n        />\n    );\n};\n\nexport default edit;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/button',\n    {\n        // Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n        title: __('Button'), // Block title.\n        icon: 'admin-appearance', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n        category: 'layout', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n        keywords: [__('prc'), __('button')],\n        supports: {\n            html: false, // We do not want to give people the ability to edit the raw html of this block.\n        },\n        // Attributes are really react props.\n        attributes: {\n            color: {\n                type: 'string',\n                default: '',\n            },\n            label: {\n                type: 'string',\n                // source: 'html',\n                // selector: '.ui.button',\n                default: '',\n            },\n            url: {\n                type: 'string',\n                default: '',\n            },\n        },\n\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.blockEditor;","module.exports = wp.i18n;","module.exports = wp.components;"],"sourceRoot":""}