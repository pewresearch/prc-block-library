{"version":3,"sources":["webpack:///external \"React\"","webpack:///./src/button/colors.js","webpack:///./src/_shared/helpers/get-color-name/index.js","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/button/edit.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/button/save.js","webpack:///./src/button/settings.js","webpack:///./src/button/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.i18n\"","webpack:///external \"moment\"","webpack:///external \"wp.element\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"lodash\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"wp.data\""],"names":["module","exports","React","colors","name","color","getColorName","window","wp","undefined","colorOption","findIndex","c","index","SidebarControls","withState","termsData","excludeData","includeData","setState","exclude","include","taxonomy","letter","setAttributes","isSelected","loadTerms","Promise","resolve","apiFetch","path","then","terms","getTermsByLetter","state","length","JSON","parse","includeArr","map","term","push","id","term_id","slug","stringify","stateInit","useDidMount","staticData","className","href","toLowerCase","checked","includes","label","decodeEntities","onChange","b","bool","termId","termName","termSlug","excludeState","includeState","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin","url","title","__","value","disableCustomColors","u","edit","attributes","classes","classNames","tagName","t","placeholder","formattingControls","Content","settings","icon","category","keywords","supports","html","type","default","save","registerBlockType","blockEditor","components","i18n","moment","element","ReactDOM","lodash","blocks","htmlEntities","data"],"mappings":"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","file":"button/main-7440d0c1.js","sourcesContent":["module.exports = React;","const colors = [\n    { name: 'primary', color: '#2185d0' },\n    { name: 'secondary', color: '#000' },\n    { name: 'mustard', color: '#d3aa20' },\n];\n\nexport default colors;","const getColorName = (color, colors) => {\n    if (\n        '' === color ||\n        undefined === color ||\n        undefined === colors ||\n        '' === colors\n    ) {\n        return null;\n    }\n\n    const colorOption = colors.findIndex((c, index) => {\n        if (color == c.color) {\n            return true;\n        }\n    });\n\n    return colors[colorOption].name;\n};\n\nexport default getColorName;\n","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst { wp } = window;\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    const taxSlug = taxonomy;\n    // strip dashes out of ataxonomy\n    const collection = new wp.api.collections[taxSlug]();\n\n    if (undefined !== collection) {\n        return new Promise(resolve => {\n            const data = {};\n            collection\n                .fetch({\n                    data: { hide_empty: false, per_page: perPage },\n                })\n                .then(terms => {\n                    for (let index = 0; index < terms.length; index++) {\n                        const slug = terms[index].slug.replace(\n                            `${taxSlug.toLowerCase()}_`,\n                            '',\n                        );\n                        data[terms[index].id] = {\n                            id: terms[index].id,\n                            name: terms[index].name,\n                            slug,\n                        };\n                    }\n                    resolve(data);\n                });\n        });\n    }\n\n    return false;\n};\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n\n    return false;\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions };\n","import { __ } from '@wordpress/i18n';\nimport { InspectorControls, RichText } from '@wordpress/block-editor';\nimport { PanelBody, ColorPalette, TextControl } from '@wordpress/components';\nimport { Fragment } from '@wordpress/element';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst SidebarControls = ({ color, url, setAttributes }) => {\n    return (\n        <InspectorControls>\n            <PanelBody title={__('Button Design Options')}>\n                <div>\n                    <p>\n                        <strong>Color:</strong>\n                    </p>\n                    <ColorPalette\n                        colors={colors}\n                        value={color}\n                        onChange={c => {\n                            setAttributes({ color: c });\n                        }}\n                        disableCustomColors\n                    />\n                </div>\n                <div>\n                    <TextControl\n                        label=\"URL\"\n                        value={url}\n                        onChange={u => setAttributes({ url: u })}\n                    />\n                </div>\n            </PanelBody>\n        </InspectorControls>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes, isSelected }) => {\n    const { color, label, url } = attributes;\n\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n\n    return (\n        <Fragment>\n            <SidebarControls\n                color={color}\n                url={url}\n                setAttributes={setAttributes}\n            />\n            <div className={classes}>\n                <RichText\n                    tagName=\"div\" // The tag here is the element output and editable in the admin\n                    value={label} // Any existing content, either from the database or an attribute default\n                    onChange={t => setAttributes({ label: t })} // Store updated content as a block attribute\n                    placeholder=\"Button\" // Display this text before any content has been added by the user\n                    formattingControls={[]}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nexport default edit;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","import { RichText } from '@wordpress/block-editor';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst edit = ({ attributes, className }) => {\n    const { color, label, url } = attributes;\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n    return (\n        <RichText.Content\n            tagName=\"a\" // The tag here is the element output and editable in the admin\n            value={label} // Any existing content, either from the database or an attribute default\n            className={classes}\n            href={url}\n        />\n    );\n};\n\nexport default edit;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/button',\n    {\n        // Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n        title: __('Button'), // Block title.\n        icon: 'admin-appearance', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n        category: 'layout', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n        keywords: [__('prc'), __('button')],\n        supports: {\n            html: false, // We do not want to give people the ability to edit the raw html of this block.\n        },\n        // Attributes are really react props.\n        attributes: {\n            color: {\n                type: 'string',\n                default: '',\n            },\n            label: {\n                type: 'string',\n                // source: 'html',\n                // selector: '.ui.button',\n                default: '',\n            },\n            url: {\n                type: 'string',\n                default: '',\n            },\n        },\n\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.i18n;","module.exports = moment;","module.exports = wp.element;","module.exports = ReactDOM;","module.exports = wp.apiFetch;","module.exports = lodash;","module.exports = wp.blocks;","module.exports = wp.url;","module.exports = wp.htmlEntities;","module.exports = wp.data;"],"sourceRoot":""}