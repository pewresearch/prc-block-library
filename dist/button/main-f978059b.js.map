{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///./src/button/colors.js","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/helpers/get-color-name/index.js","webpack:///./src/_shared/components/story-item/kicker/edit.js","webpack:///./src/button/edit.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/button/save.js","webpack:///./src/button/settings.js","webpack:///./src/button/index.js","webpack:///external \"wp.i18n\"","webpack:///external \"moment\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"ReactDOM\"","webpack:///external \"lodash\""],"names":["module","exports","React","wp","element","blockEditor","components","blocks","url","htmlEntities","colors","name","color","getTerms","taxonomy","perPage","letter","undefined","collection","api","collections","Promise","resolve","apiFetch","path","then","terms","data","fetch","hide_empty","per_page","index","length","slug","replace","toLowerCase","id","getColorName","colorOption","findIndex","c","withState","labelOptions","label","date","setAttributes","setState","useEffect","Object","keys","forEach","key","termObj","push","value","sort","a","b","getTermsAsOptions","options","style","display","alignItems","onChange","l","marginBottom","className","d","SidebarControls","termsData","excludeData","includeData","exclude","include","isSelected","loadTerms","state","JSON","parse","includeArr","map","term","term_id","stringify","stateInit","useDidMount","staticData","href","checked","includes","decodeEntities","bool","termId","termName","termSlug","excludeState","includeState","x","splice","indexOf","removeFromExclude","data-termid","data-term","height","marginTop","fontSize","margin","title","__","disableCustomColors","u","edit","attributes","classes","classNames","tagName","t","placeholder","formattingControls","Content","settings","icon","category","keywords","supports","html","type","default","save","registerBlockType","i18n","moment","ReactDOM","lodash"],"mappings":"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","file":"button/main-f978059b.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = wp.url;","module.exports = wp.htmlEntities;","const colors = [\n    { name: 'primary', color: '#2185d0' },\n    { name: 'secondary', color: '#000' },\n    { name: 'mustard', color: '#d3aa20' },\n];\n\nexport default colors;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTerms = (taxonomy, perPage, letter) => {\n    if (undefined === perPage) {\n        perPage = 25;\n    }\n    const collection = new wp.api.collections[taxonomy]();\n    if (undefined !== letter) {\n        return new Promise(resolve => {\n            const data = {};\n            apiFetch({\n                path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=topic&letter=${letter}`,\n            }).then(terms => {\n                resolve(terms);\n            });\n        });\n    }\n    if (undefined !== collection) {\n        return new Promise(resolve => {\n            const data = {};\n            collection\n                .fetch({\n                    data: { hide_empty: false, per_page: perPage },\n                })\n                .then(terms => {\n                    for (let index = 0; index < terms.length; index++) {\n                        const slug = terms[index].slug.replace(\n                            `${taxonomy.toLowerCase()}_`,\n                            '',\n                        );\n                        data[terms[index].id] = {\n                            id: terms[index].id,\n                            name: terms[index].name,\n                            slug,\n                        };\n                    }\n                    resolve(data);\n                });\n        });\n    }\n    return false;\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsAsOptions };\n","const getColorName = (color, colors) => {\n    if (\n        '' === color ||\n        undefined === color ||\n        undefined === colors ||\n        '' === colors\n    ) {\n        return null;\n    }\n\n    const colorOption = colors.findIndex((c, index) => {\n        if (color == c.color) {\n            return true;\n        }\n    });\n\n    return colors[colorOption].name;\n};\n\nexport default getColorName;\n","import { useEffect } from '@wordpress/element';\nimport { withState } from '@wordpress/compose';\nimport { SelectControl, TextControl } from '@wordpress/components';\nimport { getTermsAsOptions } from 'shared';\n\nconst KickerEditor = withState({\n    labelOptions: [],\n})(({ label, date, taxonomy, setAttributes, setState, labelOptions }) => {\n    // On initial load & taxonomy change:\n    useEffect(() => {\n        getTermsAsOptions(taxonomy).then(options => {\n            setState({ labelOptions: options });\n        });\n    }, [taxonomy]);\n\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div>\n                <SelectControl\n                    value={label}\n                    options={labelOptions}\n                    onChange={l => {\n                        setAttributes({ label: l });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n            <div>&nbsp;|&nbsp;</div>\n            <div>\n                <TextControl\n                    value={date}\n                    onChange={d => {\n                        setAttributes({ date: d });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default KickerEditor;\n","import { __ } from '@wordpress/i18n';\nimport { InspectorControls, RichText } from '@wordpress/block-editor';\nimport { PanelBody, ColorPalette, TextControl } from '@wordpress/components';\nimport { Fragment } from '@wordpress/element';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst SidebarControls = ({ color, url, setAttributes }) => {\n    return (\n        <InspectorControls>\n            <PanelBody title={__('Button Design Options')}>\n                <div>\n                    <p>\n                        <strong>Color:</strong>\n                    </p>\n                    <ColorPalette\n                        colors={colors}\n                        value={color}\n                        onChange={c => {\n                            setAttributes({ color: c });\n                        }}\n                        disableCustomColors\n                    />\n                </div>\n                <div>\n                    <TextControl\n                        label=\"URL\"\n                        value={url}\n                        onChange={u => setAttributes({ url: u })}\n                    />\n                </div>\n            </PanelBody>\n        </InspectorControls>\n    );\n};\n\nconst edit = ({ attributes, className, setAttributes, isSelected }) => {\n    const { color, label, url } = attributes;\n\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n\n    return (\n        <Fragment>\n            <SidebarControls\n                color={color}\n                url={url}\n                setAttributes={setAttributes}\n            />\n            <div className={classes}>\n                <RichText\n                    tagName=\"div\" // The tag here is the element output and editable in the admin\n                    value={label} // Any existing content, either from the database or an attribute default\n                    onChange={t => setAttributes({ label: t })} // Store updated content as a block attribute\n                    placeholder=\"Button\" // Display this text before any content has been added by the user\n                    formattingControls={[]}\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nexport default edit;\n","import { getTerms } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTerms(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","import { RichText } from '@wordpress/block-editor';\nimport classNames from 'classnames/bind';\nimport colors from './colors';\nimport { getColorName } from '../_shared';\n\nconst edit = ({ attributes, className }) => {\n    const { color, label, url } = attributes;\n    const classes = classNames(\n        className,\n        getColorName(color, colors),\n        'ui',\n        'button',\n    );\n    return (\n        <RichText.Content\n            tagName=\"a\" // The tag here is the element output and editable in the admin\n            value={label} // Any existing content, either from the database or an attribute default\n            className={classes}\n            href={url}\n        />\n    );\n};\n\nexport default edit;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/button',\n    {\n        // Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n        title: __('Button'), // Block title.\n        icon: 'admin-appearance', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n        category: 'layout', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n        keywords: [__('prc'), __('button')],\n        supports: {\n            html: false, // We do not want to give people the ability to edit the raw html of this block.\n        },\n        // Attributes are really react props.\n        attributes: {\n            color: {\n                type: 'string',\n                default: '',\n            },\n            label: {\n                type: 'string',\n                // source: 'html',\n                // selector: '.ui.button',\n                default: '',\n            },\n            url: {\n                type: 'string',\n                default: '',\n            },\n        },\n\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.i18n;","module.exports = moment;","module.exports = wp.apiFetch;","module.exports = ReactDOM;","module.exports = lodash;"],"sourceRoot":""}