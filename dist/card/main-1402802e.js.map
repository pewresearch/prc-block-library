{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.element\"","webpack:///./src/card/component.js","webpack:///./src/card/index.js","webpack:///external \"wp.i18n\"","webpack:///external \"wp.blockEditor\""],"names":["module","exports","React","ReactDOM","wp","components","blocks","element","allowedBlocks","Card","props","className","isDisplay","setAttributes","link","label","title","classes","classNames","basic","fluid","Header","tagName","value","onChange","t","placeholder","href","Content","registerBlockType","__","icon","category","keywords","styles","name","isDefault","supports","html","attributes","type","default","deprecated","image","excerpt","migrate","innerBlocks","omit","window","lodash","createBlock","url","sizeSlug","content","save","data","edit","isSelected","style","maxWidth","i18n","blockEditor"],"mappings":"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","file":"card/main-1402802e.js","sourcesContent":["module.exports = React;","module.exports = ReactDOM;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = wp.element;","import './card.scss';\n\nimport classNames from 'classnames/bind';\n\n// WordPress Import:\nimport { Fragment } from '@wordpress/element';\nimport { RichText, InnerBlocks } from '@wordpress/block-editor';\n\n// Components\nimport { Card as SemanticCard } from 'semantic-ui-react';\n\nconst allowedBlocks = [\n    'core/paragraph',\n    'core/heading',\n    'core/list',\n    'core/image',\n    'core/separator',\n    'prc-block/staff',\n    'prc-block/story-item',\n    'prc-block/wp-query',\n    'prc-block/menu',\n    'prc-block/mailchimp-form',\n    'prc-block/taxonomy-tree',\n    'prc-block/menu-link',\n];\n\nconst Card = props => {\n    const { className, isDisplay, setAttributes, link, label, title } = props;\n    const classes = classNames(className, {\n        basic: 'is-style-borderless' === className,\n    });\n    return (\n        <SemanticCard fluid className={classes}>\n            <SemanticCard.Header>\n                <Fragment>\n                    {false === isDisplay && (\n                        <RichText\n                            tagName=\"div\" // The tag here is the element output and editable in the admin\n                            value={title} // Any existing content, either from the database or an attribute default\n                            onChange={t => setAttributes({ title: t })} // Store updated content as a block attribute\n                            placeholder=\"Card Title\" // Display this text before any content has been added by the user\n                        />\n                    )}\n                    {true === isDisplay && '' === link && <span>{title}</span>}\n                    {true === isDisplay && '' !== link && (\n                        <a href={link}>{title}</a>\n                    )}\n                </Fragment>\n            </SemanticCard.Header>\n\n            <SemanticCard.Content>\n                {false !== setAttributes && (\n                    <InnerBlocks allowedBlocks={allowedBlocks} />\n                    // State where isDisplay is false but alsoe set attribute is false. Internal save mode. But what we ultimately need is a flag \"hasInnerBlocks\n                )}\n                {false === setAttributes && true === isDisplay && (\n                    <InnerBlocks.Content />\n                )}\n                {'' !== label && '' !== link && (\n                    <p className=\"relaxed\">\n                        <a href={link} className=\"read-more\">\n                            {label}\n                        </a>\n                    </p>\n                )}\n            </SemanticCard.Content>\n        </SemanticCard>\n    );\n};\n\nexport default Card;\n","import { __ } from '@wordpress/i18n';\nimport { box as icon } from '@wordpress/icons';\nimport { Fragment } from '@wordpress/element';\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, TextControl } from '@wordpress/components';\n\nimport Card from './component';\n\n/**\n * Register: aa Gutenberg Block.\n *\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made editor as an option to any\n * editor interface where blocks are implemented.\n *\n * @link https://wordpress.org/gutenberg/handbook/block-api/\n * @param  {string}   name     Block name.\n * @param  {Object}   settings Block settings.\n * @return {?WPBlock}          The block, if it has been successfully\n *                             registered; otherwise `undefined`.\n */\nregisterBlockType('prc-block/card', {\n    // Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n    title: __('Card'), // Block title.\n    icon, // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n    category: 'widgets', // Block category — Group blocks together based on common traits E.g. common, formatting, layout, widgets, embed.\n    keywords: [__('prc'), __('card'), __('baseball card'), __('packaged card')],\n    styles: [\n        {\n            name: 'default',\n            label: 'Basic (Baseball Card)',\n            isDefault: true,\n        },\n        {\n            name: 'borderless',\n            label: 'Basic Borderless',\n        },\n        {\n            name: 'beige',\n            label: 'Beige (Borderless)',\n        },\n        {\n            name: 'oatmeal',\n            label: 'Oatmeal (Borderless)',\n        },\n    ],\n    supports: {\n        html: false, // We do not want to give people the ability to edit the raw html of this block.\n    },\n    // Attributes are really react props.\n    attributes: {\n        link: {\n            type: 'string',\n            default: 'https://www.pewresearch.org/',\n        },\n        label: {\n            type: 'string',\n            default: 'Read More',\n        },\n        //\n        title: {\n            type: 'string',\n            default: 'Card Title',\n        },\n    },\n    deprecated: [\n        {\n            attributes: {\n                link: {\n                    type: 'string',\n                },\n                label: {\n                    type: 'string',\n                },\n                title: {\n                    type: 'string',\n                },\n                // Legacy\n                image: {\n                    type: 'string',\n                },\n                excerpt: {\n                    type: 'string',\n                },\n            },\n\n            migrate(attributes, innerBlocks) {\n                const { omit } = window.lodash;\n                return [\n                    omit(attributes, ['excerpt', 'image']),\n                    [\n                        createBlock('core/image', {\n                            url: attributes.image,\n                            sizeSlug: 'large',\n                        }),\n                        createBlock('core/paragraph', {\n                            content: attributes.excerpt,\n                        }),\n                        ...innerBlocks,\n                    ],\n                ];\n            },\n\n            save(props) {\n                const { attributes } = props;\n                const data = attributes;\n                data.isDisplay = true;\n                data.setAttributes = false;\n                return <Card {...data} />;\n            },\n        },\n    ],\n\n    /**\n     * The edit function describes the structure of your block in the context of the editor.\n     * This represents what the editor will render when the block is used.\n     *\n     * The \"edit\" property must be a valid function.\n     *\n     * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n     *\n     * @param {Object} props Props.\n     * @returns {Mixed} JSX Component.\n     */\n    edit: props => {\n        const { attributes, setAttributes, isSelected } = props;\n        const data = attributes;\n        data.setAttributes = setAttributes;\n        data.isDisplay = true;\n        if (true === isSelected) {\n            data.isDisplay = false;\n        }\n\n        return (\n            <Fragment>\n                {true === isSelected && (\n                    <InspectorControls>\n                        <PanelBody title={__('Card Options')}>\n                            <div>\n                                <TextControl\n                                    label=\"Link\"\n                                    value={attributes.link}\n                                    onChange={value =>\n                                        setAttributes({ link: value })\n                                    }\n                                />\n                            </div>\n                            <div>\n                                <TextControl\n                                    label=\"Read More Text\"\n                                    value={attributes.label}\n                                    onChange={value =>\n                                        setAttributes({ label: value })\n                                    }\n                                />\n                            </div>\n                        </PanelBody>\n                    </InspectorControls>\n                )}\n                <div style={{ maxWidth: '400px' }}>\n                    <Card {...data} />\n                </div>\n            </Fragment>\n        );\n    },\n\n    // Seth Learning Note: SO save literally only transforms on post_content filter. You won't see this result inside the gutenberg editor, you will however see it if you look at code view.\n    /**\n     * The save function defines the way in which the different attributes should be combined\n     * into the final markup, which is then serialized by Gutenberg into post_content.\n     *\n     * The \"save\" property must be specified and must be a valid function.\n     *\n     * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n     *\n     * @param {Object} props Props.\n     * @returns {Mixed} JSX Frontend HTML.\n     */\n    save: props => {\n        const { attributes } = props;\n        const data = attributes;\n        data.isDisplay = true;\n        data.setAttributes = false;\n        return <Card {...data} />;\n    },\n});\n","module.exports = wp.i18n;","module.exports = wp.blockEditor;"],"sourceRoot":""}