{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.apiFetch\"","webpack:///./src/follow-us/component.js","webpack:///./src/follow-us/index.js","webpack:///external \"ReactDOM\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.element\""],"names":["module","exports","React","wp","blocks","blockEditor","components","apiFetch","FollowUs","props","isBasic","className","classes","classNames","basic","fluid","Header","Content","state","email","setState","bind","Component","registerBlockType","title","__","icon","category","keywords","supports","html","attributes","edit","save","ReactDOM","i18n","element"],"mappings":";;;;;;;;;;;;;;;;;iIAAAA,EAAOC,QAAUC,O,kBCAjBF,EAAOC,QAAUE,GAAGC,Q,+DCApBJ,EAAOC,QAAUE,GAAGE,a,kBCApBL,EAAOC,QAAUE,GAAGG,Y,kBCApBN,EAAOC,QAAUE,GAAGI,U,yKCqCLC,E,YA/Bd,WAAYC,GAAQ,IAAD,6BAClB,4CAAMA,IADY,4CAQH,eARG,qCAYV,WACR,IAAIC,GAAU,EACT,wBAA0B,EAAKD,MAAME,YACzCD,GAAU,GAEX,IAAIE,EAAUC,IAAW,EAAKJ,MAAME,UAAW,CAAEG,MAAOJ,IACxD,OACC,oBAAC,IAAD,CAAcK,OAAK,EAACJ,UAAWC,GAC9B,oBAAC,IAAaI,OAAd,kBAEA,oBAAC,IAAaC,QAAd,+BApBF,EAAKC,MAAQ,CACZC,OAAO,GAER,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALE,E,2BADGC,aCuBvBC,4BAAmB,sBAAuB,CAEzCC,MAAOC,aAAI,aACXC,KAAM,eACNC,SAAU,UACVC,SAAU,CACTH,aAAI,OACJA,aAAI,cACJA,aAAI,cAELI,SAAU,CACTC,MAAM,GAGPC,WAAY,GAeZC,KAAM,SAAEvB,GACP,OACC,oBAAC,EAAaA,IAgBhBwB,KAAM,SAAExB,GACP,OACC,oBAAC,EAAaA,O,iBC7EjBT,EAAOC,QAAUiC,U,iBCAjBlC,EAAOC,QAAUE,GAAGgC,M,iBCApBnC,EAAOC,QAAUE,GAAGiC,U","file":"follow-us/main-800824df.js","sourcesContent":["module.exports = React;","module.exports = wp.blocks;","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.apiFetch;","import { Component, Fragment } from '@wordpress/element';\nimport { Card as SemanticCard, Image as SemanticImage } from 'semantic-ui-react';\nimport apiFetch from '@wordpress/api-fetch';\nimport classNames from 'classnames/bind';\n\nclass FollowUs extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\temail: false,\n\t\t}\n\t\tthis.setState = this.setState.bind(this);\n\t}\n\n\tsubmitHandler = () => {\n\n\t}\n\n\trender = () => {\n\t\tlet isBasic = false;\n\t\tif ( 'is-style-borderless' === this.props.className ) {\n\t\t\tisBasic = true;\n\t\t}\n\t\tlet classes = classNames(this.props.className, { basic: isBasic });\n\t\treturn(\n\t\t\t<SemanticCard fluid className={classes}>\n\t\t\t\t<SemanticCard.Header>Follow Us</SemanticCard.Header>\n\n\t\t\t\t<SemanticCard.Content>\n\t\t\t\t\tNewsletter Options\n\t\t\t\t</SemanticCard.Content>\n\n\t\t\t</SemanticCard>\n\t\t)\n\t}\t\n}\n\nexport default FollowUs;","/**\n * BLOCK: prc-blocks\n *\n * Registering a basic block with Gutenberg.\n * Simple block, renders and saves the same content without any interactivity.\n */\n\nimport { __ } from \"@wordpress/i18n\";\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { Button, PanelBody, ToggleControl, TextControl } from '@wordpress/components';\nimport { Component, Fragment } from '@wordpress/element';\n\nimport FollowUs from './component';\n\n/**\n * Register: aa Gutenberg Block.\n *\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made editor as an option to any\n * editor interface where blocks are implemented.\n *\n * @link https://wordpress.org/gutenberg/handbook/block-api/\n * @param  {string}   name     Block name.\n * @param  {Object}   settings Block settings.\n * @return {?WPBlock}          The block, if it has been successfully\n *                             registered; otherwise `undefined`.\n */\nregisterBlockType( 'prc-block/follow-us', {\n\t// Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n\ttitle: __( 'Follow Us' ), // Block title.\n\ticon: 'format-aside', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n\tcategory: 'widgets', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n\tkeywords: [\n\t\t__( 'prc' ),\n\t\t__( 'newsletter' ),\n\t\t__( 'follow us' ),\n\t],\n\tsupports: {\n\t\thtml: false, // We do not want to give people the ability to edit the raw html of this block.\n\t},\n\t// Attributes are really react props. \n\tattributes: {\n\n\t},\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * The \"edit\" property must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Component.\n\t */\n\tedit: ( props ) => {\n\t\treturn(\n\t\t\t<FollowUs {...props}/>\n\t\t)\n\t},\n\n\t// Seth Learning Note: SO save literally only transforms on post_content filter. You won't see this result inside the gutenberg editor, you will however see it if you look at code view.\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by Gutenberg into post_content.\n\t *\n\t * The \"save\" property must be specified and must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Frontend HTML.\n\t */\n\tsave: ( props ) => {\n\t\treturn (\n\t\t\t<FollowUs {...props}/>\n\t\t);\n\t},\n} );\n","module.exports = ReactDOM;","module.exports = wp.i18n;","module.exports = wp.element;"],"sourceRoot":""}