{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.apiFetch\"","webpack:///./src/follow-us/component.js","webpack:///./src/follow-us/index.js","webpack:///external \"wp.i18n\"","webpack:///external \"wp.element\"","webpack:///external \"ReactDOM\""],"names":["module","exports","React","wp","components","blocks","blockEditor","apiFetch","FollowUs","props","data","window","prcMailchimpBlock","interests","setState","ID","newsletters","split","includes","classes","classNames","className","state","fluid","Header","Content","Form","map","item","index","isSelected","value","Field","Checkbox","label","Input","size","action","color","content","placeholder","email","bind","Component","EditSidebar","attributes","indexOf","splice","push","setAttributes","join","updateNewsletters","isNewsletterSelected","checked","onChange","List","list","title","__","registerBlockType","icon","category","keywords","supports","html","type","default","edit","console","log","save","i18n","element","ReactDOM"],"mappings":"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","file":"follow-us/main-c9fc2ba6.js","sourcesContent":["module.exports = React;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = wp.blockEditor;","module.exports = wp.apiFetch;","import { Component, Fragment } from '@wordpress/element';\nimport { Card as SemanticCard, Checkbox, Button, Form, Input } from 'semantic-ui-react';\nimport classNames from 'classnames/bind';\nimport apiFetch from '@wordpress/api-fetch';\n\nclass FollowUs extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\temail: false,\n\t\t\tdata: [],\n\t\t}\n\t\tthis.setState = this.setState.bind(this);\n\t}\n\n\tcomponentDidMount = () => {\n\t\tlet data = window.prcMailchimpBlock.interests;\n\t\tthis.setState({data});\n\t}\n\n\tsubmitHandler = () => {\n\n\t}\n\n\tisSelected = ( ID ) => {\n\t\tlet newsletters = this.props.newsletters.split(',');\n\t\tif ( newsletters.includes(ID) ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\trender = () => {\n\t\tlet classes = classNames(this.props.className);\n\t\tconst data = this.state.data;\n\t\treturn(\n\t\t\t<SemanticCard fluid className={classes}>\n\t\t\t\t<SemanticCard.Header>Follow Us</SemanticCard.Header>\n\n\t\t\t\t<SemanticCard.Content>\n\t\t\t\t<Form>\n\t\t\t\t\t{ data.map((item, index) => {\n\t\t\t\t\t\tif ( this.isSelected(item.value) ) {\n\t\t\t\t\t\t\treturn <Form.Field><Checkbox label={item.label} value={item.value}/></Form.Field>\n\t\t\t\t\t\t}\n\t\t\t\t\t}) }\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<Input fluid \n\t\t\t\t\t\tsize=\"mini\"\n\t\t\t\t\t\taction={{\n\t\t\t\t\t\t\tcolor: 'secondary',\n\t\t\t\t\t\t\tsize: 'mini',\n\t\t\t\t\t\t\tcontent: 'Sign Up',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder='Email Address'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t</Form>\n\t\t\t\t</SemanticCard.Content>\n\n\t\t\t</SemanticCard>\n\t\t)\n\t}\t\n}\n\nexport default FollowUs;","/**\n * BLOCK: prc-blocks\n *\n * Registering a basic block with Gutenberg.\n * Simple block, renders and saves the same content without any interactivity.\n */\n\nimport { __ } from \"@wordpress/i18n\";\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { Button, PanelBody, CheckboxControl, TextControl } from '@wordpress/components';\nimport { Component, Fragment } from '@wordpress/element';\n\nimport FollowUs from './component';\n\nclass EditSidebar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnewsletters: []\n\t\t}\n\t}\n\n\tcomponentDidMount = () => {\n\t\t// Convert string to array and store in state:\n\t\tlet data = this.props.attributes.newsletters;\n\t\tdata = data.split(',');\n\t\tthis.setState({ newsletters: data });\n\t}\n\n\tupdateNewsletters = ( ID ) => {\n\t\tlet newsletters = this.state.newsletters;\n\n\t\tif ( newsletters.includes(ID) ) {\n\t\t\t// If currently selected then remove \"toggle\"\n\t\t\tvar index = newsletters.indexOf(ID);\n\t\t\tif ( index > -1 ) {\n\t\t\t\tnewsletters.splice(index, 1);\n\t\t\t}\n\t\t} else {\n\t\t\tnewsletters.push(ID);\n\t\t}\n\t\t\n\t\t// Update the selection of newsletters in the context of the sidebar:\n\t\tthis.setState({ newsletters });\n\t\t// Covnert array to string for data storage:\n\t\tthis.props.setAttributes({ newsletters: newsletters.join() });\n\t}\n\n\tisNewsletterSelected = ( ID ) => {\n\t\tlet newsletters = this.state.newsletters;\n\t\tif ( newsletters.includes(ID) ) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tlist = () =>{\n\t\tconst updateNewsletters = this.updateNewsletters;\n\t\tconst isNewsletterSelected = this.isNewsletterSelected;\n\t\tlet data = window.prcMailchimpBlock.interests;\n\t\treturn(\n\t\t\t<ul>\n\t\t\t\t{ data.map((item, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<CheckboxControl\n\t\t\t\t\t\t\t\tlabel={item.label}\n\t\t\t\t\t\t\t\tchecked={ isNewsletterSelected(item.value) }\n\t\t\t\t\t\t\t\tonChange={ () => {\n\t\t\t\t\t\t\t\t\tupdateNewsletters(item.value);\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t}) }\n\t\t\t</ul>\n\t\t)\n\t}\n\n\trender = () => {\n\t\tconst List = this.list;\n\t\treturn(\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Follow Us Options' ) }>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<List/>\n\t\t\t\t\t</div>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t)\n\t}\n}\n\n/**\n * Register: aa Gutenberg Block.\n *\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made editor as an option to any\n * editor interface where blocks are implemented.\n *\n * @link https://wordpress.org/gutenberg/handbook/block-api/\n * @param  {string}   name     Block name.\n * @param  {Object}   settings Block settings.\n * @return {?WPBlock}          The block, if it has been successfully\n *                             registered; otherwise `undefined`.\n */\nregisterBlockType( 'prc-block/follow-us', {\n\t// Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n\ttitle: __( 'Follow Us' ), // Block title.\n\ticon: 'format-aside', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n\tcategory: 'widgets', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n\tkeywords: [\n\t\t__( 'prc' ),\n\t\t__( 'newsletter' ),\n\t\t__( 'follow us' ),\n\t],\n\tsupports: {\n\t\thtml: false, // We do not want to give people the ability to edit the raw html of this block.\n\t},\n\t// Attributes are really react props. \n\tattributes: {\n\t\tnewsletters: {\n\t\t\ttype: 'string',\n\t\t\tdefault: ''\n\t\t}\n\t},\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * The \"edit\" property must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Component.\n\t */\n\tedit: ( props ) => {\n\t\tconsole.log(props);\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t{ true === props.isSelected && (\n\t\t\t\t\t<EditSidebar {...props}/>\n\t\t\t\t) }\n\t\t\t\t<FollowUs {...props.attributes}/>\n\t\t\t</Fragment>\n\t\t)\n\t},\n\n\t// Seth Learning Note: SO save literally only transforms on post_content filter. You won't see this result inside the gutenberg editor, you will however see it if you look at code view.\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by Gutenberg into post_content.\n\t *\n\t * The \"save\" property must be specified and must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Frontend HTML.\n\t */\n\tsave: ( props ) => {\n\t\treturn (\n\t\t\t<div className=\"js-react-follow-us\">\n\t\t\t</div>\n\t\t);\n\t},\n} );\n","module.exports = wp.i18n;","module.exports = wp.element;","module.exports = ReactDOM;"],"sourceRoot":""}