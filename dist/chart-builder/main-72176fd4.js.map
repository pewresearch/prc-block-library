{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"moment\"","webpack:///external \"ReactDOM\"","webpack:///./src/chart-builder/utils/helpers.js","webpack:///external \"regeneratorRuntime\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"lodash\"","webpack:///external \"wp.url\"","webpack:///external \"wp.data\"","webpack:///external \"wp.components\"","webpack:///./src/chart-builder/edit/XAxisControls.js","webpack:///./src/chart-builder/edit/YAxisControls.js","webpack:///./src/chart-builder/edit/LineControls.js","webpack:///./src/chart-builder/edit/BarControls.js","webpack:///./src/chart-builder/edit/LabelControls.js","webpack:///./src/chart-builder/edit/LegendControls.js","webpack:///./src/chart-builder/edit/TooltipControls.js","webpack:///./src/chart-builder/edit/TextFieldControls.js","webpack:///./src/chart-builder/edit/ChartControls.js","webpack:///./src/_shared/helpers/if-match-set-attribute/index.js","webpack:///./src/chart-builder/edit/index.js","webpack:///./src/chart-builder/save.js","webpack:///./src/chart-builder/index.js","webpack:///external \"wp.blocks\"","webpack:///external \"wp.i18n\"","webpack:///./src/chart-builder/utils/colors.js"],"names":["module","exports","React","wp","element","moment","ReactDOM","formattedData","data","scale","chartType","body","tableHeaders","seriesData","scaleData","Date","getTime","parseFloat","i","length","series","filter","row","isNaN","cells","content","map","x","y","category","yLabel","push","stringToArrayOfNums","str","split","Number","num","getDomain","min","max","type","axis","orientation","getTicks","ticks","tick","formatNum","output","parseInt","regeneratorRuntime","apiFetch","blockEditor","lodash","url","components","XAxisControls","attributes","setAttributes","xAxisActive","xScale","xScaleFormat","xMinDomain","xMaxDomain","xTickNum","xTickExact","xLabel","title","__","label","help","checked","onChange","value","val","options","disableUnits","disabledUnits","YAxisControls","yAxisActive","yMinDomain","yMaxDomain","yTickNum","yTickExact","showYMinDomainLabel","LineControls","lineInterpolation","lineStrokeWidth","lineNodes","lineNodeSize","lineNodeStroke","areaFillOpacity","disabled","step","BarControls","barWidth","barGroupOffset","initialOpen","LabelControls","chartOrientation","labelsActive","labelPositionDY","labelPositionDX","labelToFixedDecimal","barLabelPosition","barLabelCutoff","barLabelCutoffMobile","LegendControls","legendActive","legendOrientation","legendTitle","legendOffsetX","legendOffsetY","legendMarkerStyle","legendBorderStroke","legendFill","color","onChangeComplete","hex","TooltipControls","tooltipFormat","tooltipActive","placeholder","TextFieldControls","metaTextActive","metaTitle","metaSubtitle","metaNote","metaSource","metaTag","ChartControls","parentBlockId","clientId","paddingTop","paddingRight","paddingBottom","paddingLeft","height","width","colorValue","customColors","withInputField","colorNames","colors","href","ifMatchSetAttribute","needle","haystack","attrKey","attrValue","edit","toggleSelection","className","useEffect","setChartTypeByClassName","chartData","renderedChart","xTicks","yTicks","config","masterConfig","layout","padding","top","right","bottom","left","xAxis","active","dateFormat","domain","tickCount","tickValues","domainPadding","yAxis","showZero","dataRender","yScale","xFormat","yFormat","tooltip","format","animate","duration","line","interpolation","showPoints","showArea","strokeWidth","pointSize","pointStrokeWidth","scatter","legend","offsetX","offsetY","markerStyle","borderStroke","fill","bar","barToSpaceRatio","groupOffset","labels","fontWeight","fontSize","pieLabelRadius","labelBarPosition","labelCutoff","labelCutoffMobile","metadata","subtitle","note","source","tag","select","getBlockParentsByBlockName","tableData","useSelect","tableBlock","getBlocks","find","block","name","head","c","tableJson","tableCategories","rest","categories","horizontalRules","size","minHeight","minWidth","enable","topRight","bottomRight","bottomLeft","topLeft","onResizeStop","event","direction","elt","delta","onResizeStart","parentBlock","id","save","settings","icon","description","keywords","example","console","log","registerBlockType","blocks","i18n","general"],"mappings":"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","file":"chart-builder/main-72176fd4.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = moment;","module.exports = ReactDOM;","// Transform data from table block into json useable for chart builder\nexport const formattedData = (data, scale, chartType) => {\n    const { body, tableHeaders } = data;\n    const seriesData = [];\n    const scaleData = (data, scale) => {\n        if (chartType === 'bar') {\n            return data;\n        }\n        if (scale === 'time') {\n            return new Date(data).getTime();\n        }\n        return parseFloat(data);\n    };\n    for (var i = 1; i < tableHeaders.length; i++) {\n        var series = body\n            .filter((row) => !isNaN(parseFloat(row.cells[i].content)))\n            .map((row) => ({\n                x: scaleData(row.cells[0].content, scale),\n                y: parseFloat(row.cells[i].content),\n                category: tableHeaders[i],\n                yLabel: `${parseFloat(row.cells[i].content)}`,\n            }));\n        seriesData.push(series);\n    }\n    return seriesData;\n};\n\nexport const stringToArrayOfNums = (str) => {\n    return str\n        .split(',')\n        .map(Number)\n        .filter((num) => !isNaN(num));\n};\n\nexport const getDomain = (min, max, type, scale, axis, orientation) => {\n    if (isNaN(min) || isNaN(max)) {\n        return [0, 100];\n    }\n    if (type === 'bar' && axis === 'x') {\n        // x axis is a bit of a misnomer for bars. It refers exclusively to the dependent axis.\n        return null;\n    }\n    if (type === 'pie') {\n        return null;\n    }\n    if (scale === 'time' && axis === 'x') {\n        return [new Date(min, 0), new Date(max, 0)];\n    }\n    return [parseFloat(min), parseFloat(max)];\n};\n\nexport const getTicks = (ticks, scale) => {\n    if (scale === 'time') {\n        return ticks.map((tick) => new Date(`${tick}`));\n    }\n    return ticks;\n};\n\nexport const formatNum = (num, output) => {\n    if (typeof num === 'string' && output === 'integer') {\n        return parseInt(num);\n    }\n    if (typeof num === 'string' && output === 'float') {\n        return parseFloat(num);\n    }\n    return num;\n};\n\nexport const svgToCanvasToPng = (svg) => {};\n","module.exports = regeneratorRuntime;","module.exports = wp.apiFetch;","module.exports = wp.blockEditor;","module.exports = lodash;","module.exports = wp.url;","module.exports = wp.data;","module.exports = wp.components;","import { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, select, useDispatch } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    PanelRow,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    Flex,\n    FlexItem,\n    ColorPalette,\n    __experimentalNumberControl as NumberControl,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst XAxisControls = ({ attributes, setAttributes, chartType }) => {\n    const {\n        xAxisActive,\n        xScale,\n        xScaleFormat,\n        xMinDomain,\n        xMaxDomain,\n        xTickNum,\n        xTickExact,\n        xLabel,\n    } = attributes;\n    return (\n        <PanelBody title={__('X-Axis Configuration')}>\n            <ToggleControl\n                label=\"X-axis active\"\n                help={xAxisActive ? 'Has x-axis.' : 'No x-axis.'}\n                checked={xAxisActive}\n                onChange={() => setAttributes({ xAxisActive: !xAxisActive })}\n            />\n            <TextControl\n                label={__('Label')}\n                value={xLabel}\n                onChange={(val) => setAttributes({ xLabel: val })}\n            />\n            <SelectControl\n                label={__('X-axis scale')}\n                value={xScale}\n                options={[\n                    {\n                        value: 'linear',\n                        label: 'Linear',\n                    },\n                    {\n                        value: 'time',\n                        label: 'Time',\n                    },\n                ]}\n                onChange={(type) => {\n                    setAttributes({\n                        xScale: type,\n                    });\n                }}\n            />\n            {xScale === 'time' && (\n                <SelectControl\n                    label={__('X-axis scale format')}\n                    value={xScaleFormat}\n                    options={[\n                        {\n                            value: 'yyyy',\n                            label: 'yyyy',\n                        },\n                        {\n                            value: 'mm/yyyy',\n                            label: 'mm/yyyy',\n                        },\n                        {\n                            value: 'mm/dd/yyyy',\n                            label: 'mm/dd/yyyy',\n                        },\n                    ]}\n                    onChange={(type) => {\n                        setAttributes({ xScaleFormat: type });\n                    }}\n                />\n            )}\n            <PanelRow>Domain</PanelRow>\n            <Flex>\n                <FlexItem>\n                    <NumberControl\n                        label={__('Minimum')}\n                        value={xMinDomain}\n                        disableUnits\n                        disabledUnits\n                        onChange={(val) => {\n                            setAttributes({\n                                xMinDomain: formatNum(val, 'integer'),\n                            });\n                        }}\n                    />\n                </FlexItem>\n                <FlexItem>\n                    <NumberControl\n                        label={__('Maximum')}\n                        value={xMaxDomain}\n                        disableUnits\n                        disabledUnits\n                        onChange={(val) => {\n                            setAttributes({\n                                xMaxDomain: formatNum(val, 'integer'),\n                            });\n                        }}\n                    />\n                </FlexItem>\n            </Flex>\n            <PanelRow>Axis Ticks</PanelRow>\n            <NumberControl\n                label={__('Number of ticks')}\n                value={xTickNum}\n                disableUnits={true}\n                disabledUnits={true}\n                onChange={(val) =>\n                    setAttributes({ xTickNum: formatNum(val, 'integer') })\n                }\n                help={__(\n                    'Note: This is return approximately the number of ticks requested, deferring to number that will evenly space ticks on the bar.',\n                )}\n            />\n            <TextControl\n                label={__('Specfic Ticks')}\n                value={xTickExact}\n                onChange={(val) => setAttributes({ xTickExact: val })}\n                help={__(\n                    'List of numbers seperated by commas (eg. 0, 50, 100). Setting this value will override the \"Number of Ticks\" parameter',\n                )}\n            />\n        </PanelBody>\n    );\n};\n\nexport default XAxisControls;\n","import { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    PanelRow,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    Flex,\n    FlexItem,\n    __experimentalNumberControl as NumberControl,\n    ColorPalette,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst YAxisControls = ({ attributes, setAttributes }) => {\n    const {\n        yAxisActive,\n        yLabel,\n        yMinDomain,\n        yMaxDomain,\n        yTickNum,\n        yTickExact,\n        showYMinDomainLabel,\n    } = attributes;\n    return (\n        <PanelBody title={__('Y-Axis Configuration')}>\n            <ToggleControl\n                label=\"Y-axis active\"\n                help={yAxisActive ? 'Has y-axis.' : 'No y-axis.'}\n                checked={yAxisActive}\n                onChange={() => setAttributes({ yAxisActive: !yAxisActive })}\n            />\n            <TextControl\n                label={__('Label')}\n                value={yLabel}\n                onChange={(val) => setAttributes({ yLabel: val })}\n            />\n            <PanelRow>Y Domain</PanelRow>\n            <Flex>\n                <FlexItem>\n                    <NumberControl\n                        label={__('Minimum')}\n                        value={yMinDomain}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(val) =>\n                            setAttributes({\n                                yMinDomain: formatNum(val, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n                <FlexItem>\n                    <NumberControl\n                        label={__('Maximum')}\n                        value={yMaxDomain}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(val) =>\n                            setAttributes({\n                                yMaxDomain: formatNum(val, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n            </Flex>\n            <PanelRow>Axis Ticks</PanelRow>\n            <NumberControl\n                label={__('Number of ticks')}\n                value={yTickNum}\n                disableUnits={true}\n                disabledUnits={true}\n                min={1}\n                onChange={(val) =>\n                    setAttributes({ yTickNum: formatNum(val, 'integer') })\n                }\n                help={__(\n                    'Note: This is return approximately the number of ticks requested, deferring to number that will evenly space ticks on the bar.',\n                )}\n            />\n            <ToggleControl\n                label=\"Show min domain label\"\n                help={__(\n                    \"Forces the minimum domain value's lable to appear on axis. May overlap with x axis.\",\n                )}\n                checked={showYMinDomainLabel}\n                onChange={() =>\n                    setAttributes({ showYMinDomainLabel: !showYMinDomainLabel })\n                }\n            />\n            <TextControl\n                label={__('Specfic Ticks')}\n                value={yTickExact}\n                onChange={(val) => setAttributes({ yTickExact: val })}\n                help={__(\n                    'List of numbers seperated by commas (eg. 0, 50, 100). Setting this value will override the \"Number of ticks\" parameter',\n                )}\n            />\n        </PanelBody>\n    );\n};\n\nexport default YAxisControls;\n","import { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    PanelRow,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    Flex,\n    FlexItem,\n    __experimentalUnitControl as UnitControl,\n    __experimentalNumberControl as NumberControl,\n    ColorPalette,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst LineControls = ({ attributes, setAttributes, chartType }) => {\n    const {\n        lineInterpolation,\n        lineStrokeWidth,\n        lineNodes,\n        lineNodeSize,\n        lineNodeStroke,\n        areaFillOpacity,\n    } = attributes;\n    return (\n        <PanelBody title={__('Line/Area Chart Configuration')}>\n            <SelectControl\n                label={__('Interpolation')}\n                options={[\n                    { label: 'Basis', value: 'basis' },\n                    { label: 'Bundle', value: 'bundle' },\n                    { label: 'Cardinal', value: 'cardinal' },\n                    { label: 'Catmull-Rom', value: 'catmullRom' },\n                    { label: 'Linear', value: 'linear' },\n                    { label: 'Monotone X', value: 'monotoneX' },\n                    { label: 'Monotone Y', value: 'monotoneY' },\n                    { label: 'Natural', value: 'natural' },\n                    { label: 'Step', value: 'step' },\n                    { label: 'Step After', value: 'stepAfter' },\n                    { label: 'Step Before', value: 'stepBefore' },\n                ]}\n                value={lineInterpolation}\n                onChange={(value) =>\n                    setAttributes({ lineInterpolation: value })\n                }\n            />\n            <NumberControl\n                min={1}\n                label={__('Line Stroke Width')}\n                value={lineStrokeWidth}\n                onChange={(value) =>\n                    setAttributes({\n                        lineStrokeWidth: formatNum(value, 'integer'),\n                    })\n                }\n            />\n            <PanelRow>Line Nodes</PanelRow>\n            <ToggleControl\n                label=\"Line nodes\"\n                help={\n                    lineNodes\n                        ? 'Shows data point nodes on chart.'\n                        : 'No data point nodes.'\n                }\n                checked={lineNodes}\n                onChange={() => setAttributes({ lineNodes: !lineNodes })}\n            />\n            <NumberControl\n                disabled={!lineNodes}\n                min={1}\n                label={__('Line Node Size')}\n                value={lineNodeSize}\n                onChange={(value) =>\n                    setAttributes({ lineNodeSize: formatNum(value, 'integer') })\n                }\n            />\n            <NumberControl\n                disabled={!lineNodes}\n                min={1}\n                label={__('Line Node Stroke')}\n                value={lineNodeStroke}\n                onChange={(value) =>\n                    setAttributes({\n                        lineNodeStroke: formatNum(value, 'integer'),\n                    })\n                }\n            />\n            <PanelRow>Area</PanelRow>\n            <NumberControl\n                disabled={!chartType === 'area'}\n                label={__('Fill Opacity')}\n                step={0.1}\n                value={areaFillOpacity}\n                onChange={(value) =>\n                    setAttributes({\n                        areaFillOpacity: formatNum(value, 'float'),\n                    })\n                }\n            />\n        </PanelBody>\n    );\n};\n\nexport default LineControls;\n","import { __ } from '@wordpress/i18n';\nimport {\n    PanelBody,\n    __experimentalNumberControl as NumberControl,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst BarControls = ({ attributes, setAttributes }) => {\n    const { barWidth, barGroupOffset } = attributes;\n    return (\n        <PanelBody title={__('Bar Chart Configuration')} initialOpen={false}>\n            <NumberControl\n                label={__('Bar Width')}\n                value={barWidth}\n                onChange={(value) =>\n                    setAttributes({ barWidth: formatNum(value, 'integer') })\n                }\n            />\n            <NumberControl\n                label={__('Grouped Bar Offset')}\n                help={__('Determines space between bars in a group.')}\n                value={barGroupOffset}\n                onChange={(value) =>\n                    setAttributes({\n                        barGroupOffset: formatNum(value, 'integer'),\n                    })\n                }\n            />\n        </PanelBody>\n    );\n};\n\nexport default BarControls;\n","import { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    PanelRow,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    Flex,\n    FlexItem,\n    __experimentalUnitControl as UnitControl,\n    __experimentalNumberControl as NumberControl,\n    ColorPalette,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst LabelControls = ({ attributes, setAttributes, chartType }) => {\n    const {\n        chartOrientation,\n        labelsActive,\n        labelPositionDY,\n        labelPositionDX,\n        labelToFixedDecimal,\n        barLabelPosition,\n        barLabelCutoff,\n        barLabelCutoffMobile,\n    } = attributes;\n    return (\n        <PanelBody title={__('Labels')} initialOpen={false}>\n            <ToggleControl\n                label=\"Labels Active\"\n                checked={labelsActive}\n                onChange={() => setAttributes({ labelsActive: !labelsActive })}\n            />\n            <PanelRow>Label Positioning</PanelRow>\n            <PanelRow>\n                Determines the position of label relative to it's parent node\n            </PanelRow>\n            <Flex>\n                <FlexItem>\n                    <NumberControl\n                        label={__('DX')}\n                        value={labelPositionDX}\n                        onChange={(value) =>\n                            setAttributes({\n                                labelPositionDX: formatNum(value, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n                <FlexItem>\n                    <NumberControl\n                        label={__('DY')}\n                        value={labelPositionDY}\n                        onChange={(value) =>\n                            setAttributes({\n                                labelPositionDY: formatNum(value, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n            </Flex>\n            <NumberControl\n                label={__('Label value to fixed decimals')}\n                value={labelToFixedDecimal}\n                onChange={(value) =>\n                    setAttributes({\n                        labelToFixedDecimal: formatNum(value, 'integer'),\n                    })\n                }\n            />\n            {chartType === 'bar' && (\n                <Fragment>\n                    <SelectControl\n                        label={__('Label Positioning')}\n                        help={__(\n                            'For bar charts, determines whether the label for a bar will appear inside or outside the bar. If inside is selected, chart builder will attempt to place the label inside the bar, and adjust label color based on the bar color. Please choose a break point that will force render the label outside the bar if the value is too small, overriding your designated DX or DY values.',\n                        )}\n                        value={barLabelPosition}\n                        options={[\n                            {\n                                value: 'inside',\n                                label: 'Inside',\n                            },\n                            {\n                                value: 'outside',\n                                label: 'Outside',\n                            },\n                        ]}\n                        onChange={(value) => {\n                            setAttributes({\n                                barLabelPosition: value,\n                            });\n                        }}\n                    />\n                    <NumberControl\n                        label={__('Label Break Point')}\n                        disabled={barLabelPosition === 'outside'}\n                        min={0}\n                        value={barLabelCutoff}\n                        onChange={(value) =>\n                            setAttributes({\n                                barLabelCutoff: formatNum(value, 'float'),\n                            })\n                        }\n                    />\n                    <NumberControl\n                        label={__('Label Break Point - Mobile')}\n                        disabled={\n                            barLabelPosition === 'outside' &&\n                            chartOrientation === 'vertical'\n                        }\n                        min={0}\n                        value={barLabelCutoffMobile}\n                        onChange={(value) =>\n                            setAttributes({\n                                barLabelCutoffMobile: formatNum(value, 'float'),\n                            })\n                        }\n                    />\n                </Fragment>\n            )}\n        </PanelBody>\n    );\n};\n\nexport default LabelControls;\n","import { __ } from '@wordpress/i18n';\nimport {\n    HorizontalRule,\n    PanelBody,\n    PanelRow,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    Flex,\n    FlexItem,\n    __experimentalUnitControl as UnitControl,\n    __experimentalNumberControl as NumberControl,\n    ColorPicker,\n} from '@wordpress/components';\n\nimport { formatNum } from '../utils/helpers';\n\nconst LegendControls = ({ attributes, setAttributes }) => {\n    const {\n        legendActive,\n        legendOrientation,\n        legendTitle,\n        legendOffsetX,\n        legendOffsetY,\n        legendMarkerStyle,\n        legendBorderStroke,\n        legendFill,\n    } = attributes;\n    return (\n        <PanelBody title={__('Legend')} initialOpen={false}>\n            <ToggleControl\n                label=\"Legend Active\"\n                checked={legendActive}\n                onChange={() => setAttributes({ legendActive: !legendActive })}\n            />\n            <PanelRow>Legend Positioning</PanelRow>\n            <PanelRow>\n                Determines the position of legend relative to the chart\n                container\n            </PanelRow>\n\n            <Flex>\n                <FlexItem>\n                    <NumberControl\n                        label={__('DX')}\n                        value={legendOffsetX}\n                        onChange={(value) =>\n                            setAttributes({\n                                legendOffsetX: formatNum(value, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n                <FlexItem>\n                    <NumberControl\n                        label={__('DY')}\n                        value={legendOffsetY}\n                        onChange={(value) =>\n                            setAttributes({\n                                legendOffsetY: formatNum(value, 'integer'),\n                            })\n                        }\n                    />\n                </FlexItem>\n            </Flex>\n            <TextControl\n                label={__('Legend Title')}\n                value={legendTitle}\n                onChange={(value) => setAttributes({ legendTitle: value })}\n            />\n            <SelectControl\n                label={__('Orientation')}\n                value={legendOrientation}\n                options={[\n                    {\n                        value: 'horizontal',\n                        label: 'Horizontal',\n                    },\n                    {\n                        value: 'vertical',\n                        label: 'Vertical',\n                    },\n                ]}\n                onChange={(type) => {\n                    setAttributes({\n                        legendOrientation: type,\n                    });\n                }}\n            />\n            <SelectControl\n                label={__('Marker Style')}\n                value={legendMarkerStyle}\n                options={[\n                    {\n                        value: 'square',\n                        label: 'Square',\n                    },\n                    {\n                        value: 'circle',\n                        label: 'Circle',\n                    },\n                    {\n                        value: 'diamond',\n                        label: 'Diamond',\n                    },\n                    {\n                        value: 'plus',\n                        label: 'Plus',\n                    },\n                    {\n                        value: 'minus',\n                        label: 'Minus',\n                    },\n                    {\n                        value: 'star',\n                        label: 'Star',\n                    },\n                    {\n                        value: 'triangleDown',\n                        label: 'Triangle Down',\n                    },\n                    {\n                        value: 'triangleUp',\n                        label: 'Triangle Up',\n                    },\n                ]}\n                onChange={(type) => {\n                    setAttributes({\n                        legendMarkerStyle: type,\n                    });\n                }}\n            />\n            <PanelRow>{__('Border Stroke')}</PanelRow>\n            <ColorPicker\n                color={legendBorderStroke}\n                onChangeComplete={(color) =>\n                    setAttributes({\n                        legendBorderStroke: color.hex,\n                    })\n                }\n            />\n            <PanelRow> {__('Fill')}</PanelRow>\n            <ColorPicker\n                color={legendFill}\n                onChangeComplete={(color) =>\n                    setAttributes({\n                        legendFill: color.hex,\n                    })\n                }\n            />\n        </PanelBody>\n    );\n};\n\nexport default LegendControls;\n","import { __ } from '@wordpress/i18n';\nimport { PanelBody, TextControl, ToggleControl } from '@wordpress/components';\n\nconst TooltipControls = ({ attributes, setAttributes }) => {\n    const { tooltipFormat, tooltipActive } = attributes;\n    return (\n        <PanelBody title={__('Tooltip')} initialOpen={false}>\n            <ToggleControl\n                label={__('Show Tooltip')}\n                checked={tooltipActive}\n                onChange={() =>\n                    setAttributes({ tooltipActive: !tooltipActive })\n                }\n            />\n            <TextControl\n                label={__('Tooltip Format')}\n                help={__(\n                    \"Tooltip formatter is a string that takes two variables. The first variable(%1$s) corresponds with the x value of a node, and the second(%2$s), the y value. (eg. '%1$s: %2$s people' would return something like '2010: 500 people')\",\n                )}\n                disabled={!tooltipActive}\n                value={tooltipFormat}\n                placeholder={'%1$s: %2$s'}\n                onChange={(val) => setAttributes({ tooltipFormat: val })}\n            />\n        </PanelBody>\n    );\n};\n\nexport default TooltipControls;\n","import { __ } from '@wordpress/i18n';\nimport {\n    TextareaControl,\n    TextControl,\n    ToggleControl,\n    PanelBody,\n    PanelRow,\n} from '@wordpress/components';\n\nconst TextFieldControls = ({ attributes, setAttributes }) => {\n    const {\n        metaTextActive,\n        metaTitle,\n        metaSubtitle,\n        metaNote,\n        metaSource,\n        metaTag,\n    } = attributes;\n    return (\n        <PanelBody title={__('Text Fields')} initialOpen={false}>\n            <ToggleControl\n                label={__('Text Fields Active')}\n                help={__(\n                    'Enables title, subtitle, note, source, and tag fields for chart.',\n                )}\n                checked={metaTextActive}\n                onChange={() =>\n                    setAttributes({ metaTextActive: !metaTextActive })\n                }\n            />\n            <TextControl\n                label={__('Title')}\n                value={metaTitle}\n                onChange={(val) => setAttributes({ metaTitle: val })}\n            />\n            <TextControl\n                label={__('Subtitle')}\n                value={metaSubtitle}\n                onChange={(val) => setAttributes({ metaSubtitle: val })}\n            />\n            <TextareaControl\n                label={__('Note')}\n                help=\"Enter some text\"\n                value={metaNote}\n                onChange={(val) => setAttributes({ metaNote: val })}\n            />\n            <TextareaControl\n                label={__('Source')}\n                help=\"Enter some text\"\n                value={metaSource}\n                onChange={(val) => setAttributes({ metaSource: val })}\n            />\n            <TextControl\n                label={__('Tag')}\n                value={metaTag}\n                onChange={(val) => setAttributes({ metaTag: val })}\n            />\n        </PanelBody>\n    );\n};\n\nexport default TextFieldControls;\n","import { setLocaleData, __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, select, useDispatch } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n    RangeControl,\n    __experimentalUnitControl as UnitControl,\n    __experimentalNumberControl as NumberControl,\n    ColorPalette,\n    PanelRow,\n    Flex,\n    FlexItem,\n    ExternalLink,\n    FormTokenField,\n} from '@wordpress/components';\nimport { colorNames } from '../utils/colors';\nimport { formatNum } from '../utils/helpers';\nimport XAxisControls from './XAxisControls';\nimport YAxisControls from './YAxisControls';\nimport LineControls from './LineControls';\nimport BarControls from './BarControls';\nimport LabelControls from './LabelControls';\nimport LegendControls from './LegendControls';\nimport TooltipControls from './TooltipControls';\nimport TextFieldControls from './TextFieldControls';\n\nconst ChartControls = ({\n    attributes,\n    setAttributes,\n    clientId,\n    parentBlockId,\n}) => {\n    const {\n        chartType,\n        chartOrientation,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        height,\n        width,\n        colorValue,\n        customColors,\n    } = attributes;\n    return (\n        <>\n            <InspectorControls>\n                <PanelBody title={__('Chart Configuration')}>\n                    {chartType === 'bar' && (\n                        <SelectControl\n                            label={__('Chart Orientation (Bar charts only)')}\n                            value={chartOrientation}\n                            options={[\n                                {\n                                    value: 'vertical',\n                                    label: 'Vertical',\n                                },\n                                {\n                                    value: 'horizontal',\n                                    label: 'Horizontal',\n                                },\n                            ]}\n                            onChange={(orientation) => {\n                                setAttributes({\n                                    chartOrientation: orientation,\n                                });\n                            }}\n                        />\n                    )}\n                    <RangeControl\n                        label={__('Width')}\n                        withInputField\n                        min={0}\n                        max={1080}\n                        value={parseInt(width)}\n                        onChange={(width) =>\n                            setAttributes({\n                                width: formatNum(width, 'integer'),\n                            })\n                        }\n                    />\n                    <RangeControl\n                        label={__('Height')}\n                        withInputField\n                        min={0}\n                        max={1200}\n                        value={parseInt(height)}\n                        onChange={(height) =>\n                            setAttributes({\n                                height: formatNum(height, 'integer'),\n                            })\n                        }\n                    />\n                    <NumberControl\n                        label={__('Padding Top')}\n                        value={paddingTop}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(value) => {\n                            setAttributes({\n                                paddingTop: formatNum(value, 'integer'),\n                            });\n                        }}\n                    />\n                    <NumberControl\n                        label={__('Padding Right')}\n                        value={paddingRight}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(value) => {\n                            setAttributes({\n                                paddingRight: formatNum(value, 'integer'),\n                            });\n                        }}\n                    />\n                    <NumberControl\n                        label={__('Padding Bottom')}\n                        value={paddingBottom}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(value) => {\n                            setAttributes({\n                                paddingBottom: formatNum(value, 'integer'),\n                            });\n                        }}\n                    />\n                    <NumberControl\n                        label={__('Padding Left')}\n                        value={paddingLeft}\n                        disableUnits={true}\n                        disabledUnits={true}\n                        onChange={(value) => {\n                            setAttributes({\n                                paddingLeft: formatNum(value, 'integer'),\n                            });\n                        }}\n                    />\n                    <SelectControl\n                        label={__('Color Pallette')}\n                        value={colorValue}\n                        options={colorNames}\n                        help={__(\n                            \"Sets a predefined color pallette for the chart's color scale. If you wish to define your own colors. Use the Custom Colors input below, which will override all preset colors.\",\n                        )}\n                        onChange={(colors) => {\n                            setAttributes({ colorValue: colors });\n                        }}\n                    />\n                    <FormTokenField\n                        label={__('Custom Colors')}\n                        value={customColors || []}\n                        placeholder={'#000000'}\n                        onChange={(colors) =>\n                            setAttributes({ customColors: colors })\n                        }\n                    />\n                    <ExternalLink href=\"https://codepen.io/benjiwo/pen/GdBNPP\">\n                        Pew Research Color Guide\n                    </ExternalLink>\n                </PanelBody>\n                <TextFieldControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                />\n                <XAxisControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                    parentBlockId={parentBlockId}\n                />\n                <YAxisControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                />\n                <LabelControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                    chartType={chartType}\n                />\n                <LegendControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                />\n                <TooltipControls\n                    attributes={attributes}\n                    setAttributes={setAttributes}\n                />\n                {chartType === 'bar' && (\n                    <BarControls\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                    />\n                )}\n                {(chartType === 'line' || chartType === 'area') && (\n                    <LineControls\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        chartType={chartType}\n                    />\n                )}\n            </InspectorControls>\n        </>\n    );\n};\n\nexport default ChartControls;\n","const ifMatchSetAttribute = (\n    needle,\n    haystack,\n    attrKey,\n    attrValue,\n    setAttributes,\n) => {\n    if (needle === haystack) {\n        setAttributes({ [attrKey]: attrValue });\n    }\n};\n\nexport default ifMatchSetAttribute;\n","import { ResizableBox } from '@wordpress/components';\nimport { useEffect } from '@wordpress/element';\nimport { select, useSelect } from '@wordpress/data';\nimport {\n    ChartBuilderWrapper,\n    masterConfig,\n    ChartBuilderTextWrapper,\n} from '@prcdigital/chart-builder/dist';\n\nimport { colors } from '../utils/colors';\nimport {\n    stringToArrayOfNums,\n    getDomain,\n    getTicks,\n    formattedData,\n} from '../utils/helpers';\nimport ChartControls from './ChartControls';\nimport { ifMatchSetAttribute } from 'shared';\n\nconst setChartTypeByClassName = (className, setAttributes) => {\n    ifMatchSetAttribute(\n        'is-style-bar',\n        className,\n        'chartType',\n        'bar',\n        setAttributes,\n    );\n    ifMatchSetAttribute(\n        'is-style-line',\n        className,\n        'chartType',\n        'line',\n        setAttributes,\n    );\n    ifMatchSetAttribute(\n        'is-style-scatter',\n        className,\n        'chartType',\n        'scatter',\n        setAttributes,\n    );\n    ifMatchSetAttribute(\n        'is-style-pie',\n        className,\n        'chartType',\n        'pie',\n        setAttributes,\n    );\n    ifMatchSetAttribute(\n        'is-style-area',\n        className,\n        'chartType',\n        'area',\n        setAttributes,\n    );\n};\n\nconst edit = ({ attributes, setAttributes, toggleSelection, clientId }) => {\n    const {\n        className,\n        chartType,\n        chartOrientation,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        height,\n        width,\n        colorValue,\n        customColors,\n        barWidth,\n        barGroupOffset,\n        barLabelPosition,\n        barLabelCutoff,\n        barLabelCutoffMobile,\n        tooltipActive,\n        tooltipFormat,\n        lineInterpolation,\n        lineStrokeWidth,\n        lineNodes,\n        lineNodeSize,\n        lineNodeStroke,\n        areaFillOpacity,\n        xAxisActive,\n        xLabel,\n        xScale,\n        xScaleFormat,\n        xMinDomain,\n        xMaxDomain,\n        xTickNum,\n        xTickExact,\n        yAxisActive,\n        yLabel,\n        yMinDomain,\n        yMaxDomain,\n        showYMinDomainLabel,\n        yTickNum,\n        yTickExact,\n        labelsActive,\n        labelPositionDX,\n        labelPositionDY,\n        legendActive,\n        legendOrientation,\n        legendTitle,\n        legendOffsetX,\n        legendOffsetY,\n        legendMarkerStyle,\n        legendBorderStroke,\n        legendFill,\n        metaTextActive,\n        metaTitle,\n        metaSubtitle,\n        metaNote,\n        metaSource,\n        metaTag,\n    } = attributes;\n    // update chart type using styles\n    useEffect(() => {\n        setChartTypeByClassName(className, setAttributes);\n    }, [className]);\n    const xTicks = stringToArrayOfNums(xTickExact);\n    const yTicks = stringToArrayOfNums(yTickExact);\n    const config = {\n        ...masterConfig,\n        layout: {\n            ...masterConfig.layout,\n            type: chartType === 'area' ? 'line' : chartType,\n            orientation: chartOrientation,\n            width: width,\n            height: height,\n            padding: {\n                top: paddingTop,\n                right: paddingRight,\n                bottom: paddingBottom,\n                left: paddingLeft,\n            },\n        },\n        xAxis: {\n            ...masterConfig.xAxis,\n            active: xAxisActive,\n            label: xLabel,\n            scale: xScale,\n            dateFormat: xScaleFormat,\n            domain: getDomain(\n                xMinDomain,\n                xMaxDomain,\n                chartType,\n                xScale,\n                'x',\n                chartOrientation,\n            ),\n            // domain: [new Date(1970, 0), new Date(2024, 0)],\n            padding: 50,\n            tickCount: xTickNum,\n            tickValues: xTicks.length <= 1 ? null : getTicks(xTicks, xScale),\n            domainPadding: 50,\n        },\n        yAxis: {\n            ...masterConfig.yAxis,\n            padding: 20,\n            active: yAxisActive,\n            label: yLabel,\n            domain: getDomain(\n                yMinDomain,\n                yMaxDomain,\n                chartType,\n                'linear',\n                'y',\n                chartOrientation,\n            ),\n            tickCount: yTickNum,\n            tickValues: yTicks.length <= 1 ? null : yTicks,\n            domainPadding: 20,\n            showZero: showYMinDomainLabel,\n        },\n        dataRender: {\n            ...masterConfig.dataRender,\n            xScale: xScale,\n            yScale: 'linear',\n            xFormat: xScaleFormat,\n            yFormat: null,\n        },\n        tooltip: {\n            active: tooltipActive,\n            format: tooltipFormat,\n        },\n        animate: {\n            active: true,\n            duration: 500,\n        },\n        line: {\n            ...masterConfig.line,\n            interpolation: lineInterpolation,\n            showPoints: lineNodes,\n            showArea: chartType === 'area' ? true : false,\n            strokeWidth: lineStrokeWidth,\n            pointSize: lineNodeSize,\n            pointStrokeWidth: lineNodeStroke,\n            areaFillOpacity: areaFillOpacity,\n        },\n        scatter: {\n            pointSize: lineNodeSize,\n        },\n        legend: {\n            ...masterConfig.legend,\n            active: legendActive,\n            orientation: legendOrientation,\n            title: legendTitle,\n            offsetX: legendOffsetX,\n            offsetY: legendOffsetY,\n            markerStyle: legendMarkerStyle,\n            borderStroke: legendBorderStroke,\n            fill: legendFill,\n        },\n        bar: {\n            width: barWidth,\n            barToSpaceRatio: 0.8,\n            groupOffset: barGroupOffset,\n        },\n        colors: customColors.length > 0 ? customColors : colors[colorValue],\n        labels: {\n            ...masterConfig.labels,\n            active: labelsActive,\n            color: 'black',\n            fontWeight: 200,\n            fontSize: 12,\n            labelPositionDX: labelPositionDX,\n            labelPositionDY: labelPositionDY,\n            pieLabelRadius: 60,\n            labelBarPosition: barLabelPosition,\n            labelCutoff: barLabelPosition === 'inside' ? barLabelCutoff : null,\n            labelCutoffMobile:\n                barLabelPosition === 'inside' ? barLabelCutoffMobile : null,\n        },\n        metadata: {\n            ...masterConfig.metadata,\n            active: metaTextActive,\n            title: metaTitle,\n            subtitle: metaSubtitle,\n            note: metaNote,\n            source: metaSource,\n            tag: metaTag,\n        },\n    };\n    const parentBlockId = select(\n        'core/block-editor',\n    ).getBlockParentsByBlockName(\n        clientId,\n        'prc-block/chart-builder-data-wrapper',\n    )[0];\n    const tableData = useSelect((select) => {\n        const tableBlock = select('core/block-editor')\n            .getBlocks(parentBlockId)\n            .find((block) => block.name === 'core/table');\n        const tableHeaders = tableBlock.attributes.head[0].cells.map(\n            (c) => c.content,\n        );\n        const body = tableBlock.attributes.body;\n        return { tableHeaders, body };\n    }, []);\n\n    const tableJson = formattedData(tableData, xScale, chartType);\n    const tableCategories = tableData.tableHeaders;\n    let chartData;\n    let renderedChart;\n    if (tableCategories) {\n        //Who needs splice? Use array literals to get all items in array after the first item :)\n        const [, ...rest] = tableCategories;\n        config.dataRender.categories = rest;\n    }\n    // For now, let's force pie charts to only use the first array of data, as they can only contain one series of data by rule.\n    // Passing addtl data will break tool (bad).\n\n    if (tableJson) {\n        switch (chartType) {\n            case 'pie':\n                chartData = tableJson[0];\n                break;\n            default:\n                chartData = tableJson;\n                break;\n        }\n        renderedChart = (\n            <ChartBuilderWrapper config={config} data={chartData} />\n        );\n    }\n    return (\n        <>\n            <ChartBuilderTextWrapper\n                active={config.metadata.active}\n                width={config.layout.width}\n                horizontalRules={config.layout.horizontalRules}\n                title={config.metadata.title}\n                subtitle={config.metadata.subtitle}\n                note={config.metadata.note}\n                source={config.metadata.source}\n                tag={config.metadata.tag}\n            >\n                <ResizableBox\n                    size={{\n                        height,\n                        width,\n                    }}\n                    minHeight=\"50\"\n                    minWidth=\"50\"\n                    enable={{\n                        top: false,\n                        right: false,\n                        bottom: false,\n                        left: false,\n                        topRight: false,\n                        bottomRight: true,\n                        bottomLeft: false,\n                        topLeft: false,\n                    }}\n                    onResizeStop={(event, direction, elt, delta) => {\n                        setAttributes({\n                            height: parseInt(\n                                parseInt(height) + parseInt(delta.height),\n                                10,\n                            ),\n                            width: parseInt(\n                                parseInt(width) + parseInt(delta.width),\n                                10,\n                            ),\n                        });\n                        toggleSelection(true);\n                    }}\n                    onResizeStart={() => {\n                        toggleSelection(false);\n                    }}\n                >\n                    <ChartControls\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        parentBlock={parentBlockId}\n                    />\n                    {renderedChart}\n                    <canvas id=\"canvas\" width=\"800\" height=\"400\"></canvas>\n                </ResizableBox>\n            </ChartBuilderTextWrapper>\n        </>\n    );\n};\n\nexport default edit;\n","import { Fragment } from '@wordpress/element';\n\n/** Returns a server side block callback */\nconst save = ({ attributes }) => {\n  const props = attributes;\n  return <Fragment></Fragment>;\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\nimport edit from './edit';\nimport save from './save';\nimport metadata from './block.json';\nimport './styles.css';\n\nconst { name } = metadata;\nconst settings = {\n    title: __('Chart Builder'),\n    icon: 'chart-line',\n    description: __('Chart element for Chart Builder.'),\n    keywords: [__('chart')],\n    example: {\n        attributes: {\n            chartType: 'bar',\n            className: 'is-style-bar',\n        },\n    },\n    edit,\n    save,\n};\nconsole.log(name);\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blocks;","module.exports = wp.i18n;","const colors = {\n  general: ['#436983', '#bf3927', '#756a7e', '#ea9e2c'],\n  'politics-main': ['#d1a730', '#a55a26', '#949d48'],\n  'global-main': ['#949d48', '#006699', '#a55a26'],\n  'religion-main': ['#0090bf', '#a55a26', '#949d48'],\n  'social-trends-main': ['#377668', '#d1a730', '#949d48'],\n  'journalism-main': ['#733d47', '#d1a730', '#949d48'],\n  'internet-main': ['#006699', '#949d48', '#d1a730'],\n  'hispanic-main': ['#a55a26', '#d1a730', '#949d48'],\n  'politics-spectrum': [\n    '#D1A730',\n    '#F6EED6',\n    '#ECDBAC',\n    '#E4CB83',\n    '#9E7F2D',\n    '#6A5522',\n  ],\n  'global-spectrum': [\n    '#949D48',\n    '#EAECD8',\n    '#D6DAB3',\n    '#C2C98B',\n    '#6E7537',\n    '#494E24',\n  ],\n  'religion-spectrum': [\n    '#0090C0',\n    '#C9DEEE',\n    '#9DC7E1',\n    '#71B2D6',\n    '#0073A5',\n    '#00557E',\n  ],\n  'journalism-spectrum': [\n    '#733D47',\n    '#E8D3D7',\n    '#D1A8AF',\n    '#BC7B86',\n    '#552E35',\n    '#391E22',\n  ],\n  'social-trends-spectrum': [\n    '#387668',\n    '#D1E9E4',\n    '#A2D2C8',\n    '#64B6AA',\n    '#005645',\n    '#003A2C',\n  ],\n  'hispanic-spectrum': [\n    '#A55A26',\n    '#F2DBCD',\n    '#E7BA9A',\n    '#DE996A',\n    '#7C441C',\n    '#532E16',\n  ],\n  'internet-spectrum': [\n    '#006699',\n    '#C9D1E1',\n    '#9DAECB',\n    '#7591B7',\n    '#004A75',\n    '#002748',\n  ],\n  'blue-spectrum': [\n    '#456A83',\n    '#D5E1E9',\n    '#ACC4D3',\n    '#82A6BF',\n    '#335062',\n    '#213441',\n  ],\n  'green-spectrum': [\n    '#949D48',\n    '#EAECD8',\n    '#D6DAB3',\n    '#C2C98B',\n    '#6E7537',\n    '#494E24',\n  ],\n  'purple-spectrum': [\n    '#746A7E',\n    '#E3E1E5',\n    '#C7C1CB',\n    '#ACA4B1',\n    '#584F5E',\n    '#3A343F',\n  ],\n  'medium-brown-spectrum': [\n    '#A55A26',\n    '#F2DBCD',\n    '#E7BA9A',\n    '#DE996A',\n    '#7C441C',\n    '#532E16',\n  ],\n  'light-brown-spectrum': [\n    '#D1A730',\n    '#F6EED6',\n    '#ECDBAC',\n    '#E4CB83',\n    '#9E7F2D',\n    '#6A5522',\n  ],\n  'orange-spectrum': [\n    '#EA9E2C',\n    '#F9EAD4',\n    '#F5D6A9',\n    '#F1C37F',\n    '#BB792A',\n    '#7C5220',\n  ],\n  'red-spectrum': [\n    '#BF3B27',\n    '#F5D4CF',\n    '#EBABA2',\n    '#E37F73',\n    '#902D1E',\n    '#5F1D14',\n  ],\n};\n\nconst colorNames = [\n  { label: 'General', value: 'general' },\n  { label: 'Politics Main', value: 'politics-main' },\n  { label: 'Global Main', value: 'global-main' },\n  { label: 'Religion Main', value: 'religion-main' },\n  {\n    label: 'Social Trends Main',\n    value: 'social-trends-main',\n  },\n  { label: 'Journalism Main', value: 'journalism-main' },\n  { label: 'Internet Main', value: 'internet-main' },\n  { label: 'Hispanic Main', value: 'hispanic-main' },\n  {\n    label: 'Politics Spectrum',\n    value: 'politics-spectrum',\n  },\n  { label: 'Global Spectrum', value: 'global-spectrum' },\n  {\n    label: 'Religion Spectrum',\n    value: 'religion-spectrum',\n  },\n  {\n    label: 'Social Trends Spectrum',\n    value: 'social-trends-spectrum',\n  },\n  {\n    label: 'Journalism Spectrum',\n    value: 'journalism-spectrum',\n  },\n  {\n    label: 'Internet Spectrum',\n    value: 'internet-spectrum',\n  },\n  {\n    label: 'Hispanic Spectrum',\n    value: 'hispanic-spectrum',\n  },\n  { label: 'Blue Spectrum', value: 'blue-spectrum' },\n  { label: 'Green Spectrum', value: 'green-spectrum' },\n  { label: 'Purple Spectrum', value: 'purple-spectrum' },\n  {\n    label: 'Medium Brown Spectrum',\n    value: 'medium-brown-spectrum',\n  },\n  {\n    label: 'Light Brown Spectrum',\n    value: 'light-brown-spectrum',\n  },\n  { label: 'Orange Spectrum', value: 'orange-spectrum' },\n  { label: 'Red Spectrum', value: 'red-spectrum' },\n];\n\nexport { colors, colorNames };\n"],"sourceRoot":""}