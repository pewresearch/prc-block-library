{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"moment\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/story-item/kicker/edit.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/settings.js","webpack:///./src/wp-query/index.js","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.data\"","webpack:///external \"wp.i18n\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.components\"","webpack:///external \"lodash\""],"names":["module","exports","React","wp","element","blockEditor","url","htmlEntities","moment","window","getTerms","taxonomy","perPage","letter","collection","api","collections","undefined","Promise","resolve","apiFetch","path","then","terms","data","fetch","hide_empty","per_page","index","length","slug","replace","toLowerCase","id","name","withState","labelOptions","label","date","setAttributes","setState","useEffect","Object","keys","forEach","key","termObj","push","value","sort","a","b","getTermsAsOptions","options","style","display","alignItems","onChange","l","marginBottom","className","d","fetchPosts","termsData","excludeData","includeData","exclude","include","isSelected","loadTerms","state","JSON","parse","includeArr","map","term","term_id","stringify","stateInit","useDidMount","staticData","href","checked","includes","decodeEntities","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","height","marginTop","fontSize","margin","format","program","labelTaxonomy","relativeDate","formatDate","dateString","todaysDate","fromNow","results","console","log","result","title","excerpt","timestamp","link","image","Fields","attributes","wide","disabled","formatTermId","programTermId","postType","useState","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","termIds","tmp","type","flexDirection","flexGrow","paddingRight","parseInt","paddingBottom","num","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","__","isBusy","isPrimary","onClick","isColumnLayout","ALLOWED","edit","posts","replaceInnerBlocks","useDispatch","item","createBlock","extra","postID","emphasis","isChartArt","imageSlot","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","initStoryBlock","allowedBlocks","save","Content","metadata","category","settings","description","providesContext","registerBlockType","i18n","ReactDOM","blocks","components","lodash"],"mappings":"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","file":"wp-query/main-e9266adc.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.blockEditor;","module.exports = wp.url;","module.exports = wp.htmlEntities;","module.exports = moment;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst { wp } = window;\n\nconst getTerms = (taxonomy, perPage = 25, letter) => {\n    const collection = new wp.api.collections[taxonomy]();\n\n    if (undefined !== letter) {\n        return new Promise(resolve => {\n            apiFetch({\n                path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=topic&letter=${letter}`,\n            }).then(terms => {\n                resolve(terms);\n            });\n        });\n    }\n\n    if (undefined !== collection) {\n        return new Promise(resolve => {\n            const data = {};\n            collection\n                .fetch({\n                    data: { hide_empty: false, per_page: perPage },\n                })\n                .then(terms => {\n                    for (let index = 0; index < terms.length; index++) {\n                        const slug = terms[index].slug.replace(\n                            `${taxonomy.toLowerCase()}_`,\n                            '',\n                        );\n                        data[terms[index].id] = {\n                            id: terms[index].id,\n                            name: terms[index].name,\n                            slug,\n                        };\n                    }\n                    resolve(data);\n                });\n        });\n    }\n\n    return false;\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsAsOptions };\n","import { useEffect } from '@wordpress/element';\nimport { withState } from '@wordpress/compose';\nimport { SelectControl, TextControl } from '@wordpress/components';\nimport { getTermsAsOptions } from 'shared';\n\nconst KickerEditor = withState({\n    labelOptions: [],\n})(({ label, date, taxonomy, setAttributes, setState, labelOptions }) => {\n    // On initial load & taxonomy change:\n    useEffect(() => {\n        getTermsAsOptions(taxonomy).then(options => {\n            setState({ labelOptions: options });\n        });\n    }, [taxonomy]);\n\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div>\n                <SelectControl\n                    value={label}\n                    options={labelOptions}\n                    onChange={l => {\n                        setAttributes({ label: l });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n            <div>&nbsp;|&nbsp;</div>\n            <div>\n                <TextControl\n                    value={date}\n                    onChange={d => {\n                        setAttributes({ date: d });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default KickerEditor;\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = (\n    perPage,\n    format,\n    program,\n    labelTaxonomy,\n    relativeDate = false,\n) => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const todaysDate = moment().format(defaultFormat);\n        let date = moment(dateString).format(defaultFormat);\n        if (true === relativeDate && todaysDate === date) {\n            date = moment(dateString).fromNow();\n            // date = 'Today at ' + moment.unix(dateString).format('HH:mm');\n        }\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        apiFetch({\n            path: `/prc-api/v2/fetch-posts/?perPage=${perPage}&format=${format}&program=${program}&labelTaxonomy=${labelTaxonomy}`,\n        }).then(results => {\n            console.log(\n                'fetchPosts?',\n                perPage,\n                format,\n                program,\n                labelTaxonomy,\n                relativeDate,\n            );\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                data.push({\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp, relativeDate),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                });\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","import { getTerms } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTerms(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","/* eslint-disable radix */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    PanelBody,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n} from '@wordpress/components';\n\nimport { getTerms } from '../_shared';\n\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        formatTermId,\n        programTermId,\n        perPage,\n        postType,\n        labelTaxonomy,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <SelectControl\n                label=\"Post Type\"\n                value={postType}\n                options={[\n                    {\n                        value: 'stub',\n                        label: 'Stub',\n                    },\n                    {\n                        value: 'staff',\n                        label: 'Staff',\n                    },\n                ]}\n                onChange={type => {\n                    setAttributes({ postType: type });\n                }}\n                disabled={disabled}\n            />\n            {'stub' === postType && (\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n            <div\n                style={\n                    true === wide\n                        ? {\n                              display: 'flex',\n                              flexDirection: 'row',\n                          }\n                        : {}\n                }\n            >\n                <div\n                    style={\n                        true === wide && 'stub' === postType\n                            ? {\n                                  flexGrow: '1',\n                                  paddingRight: '1em',\n                              }\n                            : {}\n                    }\n                >\n                    <SelectControl\n                        label=\"Program\"\n                        value={programTermId}\n                        options={programOptions}\n                        onChange={termId => {\n                            setAttributes({ programTermId: parseInt(termId) });\n                        }}\n                        disabled={disabled}\n                    />\n                </div>\n                {'stub' === postType && (\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n\n            <TextControl\n                label={\n                    'stub' === postType ? 'Number of Posts' : 'Number of Staff'\n                }\n                value={perPage}\n                onChange={num => setAttributes({ perPage: parseInt(num) })}\n                disabled={disabled}\n            />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        const {\n            formatTermId,\n            programTermId,\n            perPage,\n            labelTaxonomy,\n        } = attributes;\n        fetchPosts(\n            perPage,\n            formatTermId,\n            programTermId,\n            labelTaxonomy,\n            true,\n        ).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","import { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = item => {\n    const block = createBlock('prc-block/story-item', {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 'normal',\n    });\n\n    return block;\n};\n\nconst edit = ({ attributes, className, setAttributes, clientId }) => {\n    // const [loaded, toggleLoaded] = useState(false);\n    const [posts, setPosts] = useState(false);\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        // Do fetch stuff and setting of posts\n        console.log('Posts?', posts);\n        if (false !== posts) {\n            const tmp = [];\n            // TODO: Here we can change what block gets inserted. We could for example say if the postType is not equal to stub then insert a list or whatever. Maybe we create a block just for staff that we can use.\n            posts.forEach(item => tmp.push(initStoryBlock(item)));\n            // We should also... get \"stickyPosts\" from attributes, thats an array that will contain post ids. We can go through existing innerblocks and if there is a post with an id that matches grab it into another array and well combine the posts and that together putting the stickyPosts on top and decreasing the posts returned by that amount so it doesnt exceed PerPage. THEN we can do replaceInnerBlocks.\n            replaceInnerBlocks(clientId, tmp);\n        }\n    }, [posts]);\n\n    return (\n        <div className={className}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <InnerBlocks allowedBlocks={ALLOWED} />}\n        </div>\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ className, attributes }) => {\n    return (\n        <div className={className}>\n            <InnerBlocks.Content />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name, category, attributes } = metadata;\n\nconst settings = [\n    name,\n    {\n        title: __('PRC WP Query'),\n        description: __(\n            'Query posts using wp query arguments and return story item blocks.',\n        ),\n        category,\n        attributes,\n        providesContext: {\n            'prc-block/wp-query': 'pinned',\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\n\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.apiFetch;","module.exports = wp.data;","module.exports = wp.i18n;","module.exports = ReactDOM;","module.exports = wp.blocks;","module.exports = wp.components;","module.exports = lodash;"],"sourceRoot":""}