{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.components\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/settings.js","webpack:///./src/wp-query/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.element\"","webpack:///external \"moment\"","webpack:///external \"wp.data\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.i18n\"","webpack:///external \"ReactDOM\"","webpack:///external \"lodash\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\""],"names":["module","exports","React","wp","components","getTerms","taxonomy","perPage","Promise","resolve","data","apiFetch","path","then","terms","index","length","slug","replace","toLowerCase","id","name","parent","fetchPosts","withState","termsData","excludeData","includeData","setState","exclude","include","letter","setAttributes","isSelected","loadTerms","getTermsByLetter","state","JSON","parse","includeArr","map","term","push","term_id","stringify","stateInit","useDidMount","staticData","className","href","checked","includes","label","decodeEntities","onChange","b","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin","postType","formatTermId","programTermId","labelTaxonomy","expertsOnly","console","log","results","forEach","result","dateString","d","title","excerpt","date","timestamp","moment","format","link","image","Fields","attributes","wide","disabled","disableImage","useState","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","termIds","Object","keys","tmp","value","useEffect","options","type","display","flexDirection","flexGrow","paddingRight","parseInt","alignItems","paddingBottom","num","autoComplete","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","__","isBusy","isPrimary","onClick","isColumnLayout","ALLOWED","edit","pinned","posts","replaceInnerBlocks","useDispatch","blocks","innerBlocks","item","args","extra","postID","emphasis","isChartArt","imageSlot","imageSize","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","createBlock","initStoryBlock","initStaffBlock","toKeep","postId","filter","e","toCheck","f","allowedPerPage","toInsert","concat","allowedBlocks","save","Content","metadata","category","settings","description","providesContext","registerBlockType","blockEditor","element","i18n","ReactDOM","lodash","url","htmlEntities"],"mappings":"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","file":"wp-query/main-b1e3451e.js","sourcesContent":["module.exports = React;","module.exports = wp.components;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst structureTermsHierarchically = (terms) => {\n    return null;\n}\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage, termValue = 'name', sortByLabel = true ) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                \n                let value = termObj.name;\n                if ( 'termid' === termValue ) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if ( undefined !== termObj.parent && 0 !== termObj.parent ) {\n                    label = ' -- ' + label;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if ( false !== sortByLabel ) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = (taxonomy) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter( e => e.parent === 0 );\n            parentTerms.forEach( e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter( f => f.parent === e.id );\n                let children = [];\n                // Construct children array.\n                c.forEach( cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children\n                });\n            } );\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = (\n    postType,\n    perPage,\n    formatTermId,\n    programTermId,\n    labelTaxonomy,\n    expertsOnly,\n) => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const date = moment(dateString).format(defaultFormat);\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        let path = `/prc-api/v2/fetch-posts/?postType=${postType}&perPage=${perPage}&formatTermId=${formatTermId}&programTermId=${programTermId}&labelTaxonomy=${labelTaxonomy}`;\n        if ('staff' === postType) {\n            path = `/prc-api/v2/fetch-posts/?postType=${postType}&perPage=${perPage}&programTermId=${programTermId}&expertsOnly=${expertsOnly}`;\n        }\n        console.log(\n            'fetchPosts?',\n            postType,\n            perPage,\n            formatTermId,\n            programTermId,\n            labelTaxonomy,\n            expertsOnly,\n        );\n        apiFetch({\n            path,\n        }).then(results => {\n            console.log(results);\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                const d = {\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                };\n                data.push(d);\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","/* eslint-disable radix */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n} from '@wordpress/components';\n\nimport { getTerms } from '../_shared';\n\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        expertsOnly,\n        formatTermId,\n        programTermId,\n        perPage,\n        postType,\n        labelTaxonomy,\n        disableImage,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <SelectControl\n                label=\"Post Type\"\n                value={postType}\n                options={[\n                    {\n                        value: 'stub',\n                        label: 'Stub',\n                    },\n                    {\n                        value: 'staff',\n                        label: 'Staff',\n                    },\n                ]}\n                onChange={type => {\n                    setAttributes({ postType: type });\n                }}\n                disabled={disabled}\n            />\n            <HorizontalRule />\n            {'staff' === postType && (\n                <ToggleControl\n                    label=\"Limit to experts\"\n                    checked={expertsOnly}\n                    onChange={() =>\n                        setAttributes({ expertsOnly: !expertsOnly })\n                    }\n                />\n            )}\n            {'stub' === postType && (\n                <ToggleControl\n                    label=\"Disable Image\"\n                    checked={disableImage}\n                    onChange={() =>\n                        setAttributes({ disableImage: !disableImage })\n                    }\n                />\n            )}\n            <HorizontalRule />\n            {'stub' === postType && (\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n            <div\n                style={\n                    true === wide\n                        ? {\n                              display: 'flex',\n                              flexDirection: 'row',\n                          }\n                        : {}\n                }\n            >\n                <div\n                    style={\n                        true === wide && 'stub' === postType\n                            ? {\n                                  flexGrow: '1',\n                                  paddingRight: '1em',\n                              }\n                            : {}\n                    }\n                >\n                    <SelectControl\n                        label=\"Program\"\n                        value={programTermId}\n                        options={programOptions}\n                        onChange={termId => {\n                            setAttributes({ programTermId: parseInt(termId) });\n                        }}\n                        disabled={disabled}\n                    />\n                </div>\n                {'stub' === postType && (\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n\n            <TextControl\n                label={\n                    'stub' === postType ? 'Number of Posts' : 'Number of Staff'\n                }\n                value={perPage}\n                onChange={num => setAttributes({ perPage: parseInt(num) })}\n                disabled={disabled}\n                autoComplete=\"off\"\n            />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        const {\n            postType,\n            formatTermId,\n            programTermId,\n            perPage,\n            labelTaxonomy,\n            expertsOnly,\n        } = attributes;\n        fetchPosts(\n            postType,\n            perPage,\n            formatTermId,\n            programTermId,\n            labelTaxonomy,\n            expertsOnly,\n        ).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","import { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = (item, disableImage, labelTaxonomy) => {\n    const args = {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        imageSize: 'A3',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 'normal',\n        className: 'is-style-left',\n    };\n    if (true === disableImage) {\n        args.imageSlot = 'disabled';\n        args.className = 'is-style-disabled';\n        args.enableExcerpt = false;\n    }\n    if ('programs' === labelTaxonomy) {\n        args.enableProgramsTaxonomy = true;\n    }\n    return createBlock('prc-block/story-item', args);\n};\n\nconst initStaffBlock = item => {\n    // We only need to set the link, the block itself will go and fetch all the information we need.\n    const args = {\n        link: item.link,\n    };\n    return createBlock('prc-block/staff', args);\n};\n\nconst edit = ({ attributes, setAttributes, className, clientId }) => {\n    const {\n        pinned,\n        postType,\n        perPage,\n        labelTaxonomy,\n        disableImage,\n    } = attributes;\n\n    const [posts, setPosts] = useState(false);\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const { innerBlocks, hasInnerBlocks } = useSelect(\n        select => {\n            const blocks = select('core/block-editor').getBlocks(clientId);\n            return {\n                innerBlocks: blocks,\n                hasInnerBlocks: 0 < blocks.length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        if (false !== posts) {\n            let tmp = [];\n            posts.forEach(item => {\n                if ('stub' === postType) {\n                    tmp.push(initStoryBlock(item, disableImage, labelTaxonomy));\n                }\n                if ('staff' === postType) {\n                    tmp.push(initStaffBlock(item));\n                }\n            });\n\n            const toKeep = [];\n            JSON.parse(pinned).forEach(postId => {\n                const toPush = innerBlocks.filter(e => {\n                    const toCheck = tmp.filter(\n                        f => f.attributes.postID === postId,\n                    );\n                    return (\n                        e.attributes.postID === postId && 0 >= toCheck.length\n                    );\n                });\n                toPush.forEach(b => toKeep.push(b));\n            });\n\n            const allowedPerPage = perPage - toKeep.length;\n\n            tmp = tmp.filter((e, index) => {\n                return index <= allowedPerPage - 1;\n            });\n\n            const toInsert = toKeep.concat(tmp);\n\n            replaceInnerBlocks(clientId, toInsert);\n        }\n    }, [posts]);\n\n    return (\n        <div className={className}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <InnerBlocks allowedBlocks={ALLOWED} />}\n        </div>\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ className, attributes }) => {\n    return (\n        <div className={className}>\n            <InnerBlocks.Content />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name, category, attributes } = metadata;\n\nconst settings = [\n    name,\n    {\n        title: __('PRC WP Query'),\n        description: __(\n            'The WP Query block provides a handful of arguments depending on post type that will return the intendend block. You can pin results so that subsequent updates add to rather than replace.',\n        ),\n        category,\n        attributes,\n        providesContext: {\n            'prc-block/wp-query': 'pinned',\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\n\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.blockEditor;","module.exports = wp.element;","module.exports = moment;","module.exports = wp.data;","module.exports = wp.apiFetch;","module.exports = wp.blocks;","module.exports = wp.i18n;","module.exports = ReactDOM;","module.exports = lodash;","module.exports = wp.url;","module.exports = wp.htmlEntities;"],"sourceRoot":""}