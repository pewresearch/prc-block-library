{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"wp.apiFetch\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/story-item/form/kicker.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/settings.js","webpack:///./src/wp-query/index.js","webpack:///external \"moment\"","webpack:///external \"wp.i18n\"","webpack:///external \"wp.data\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"ReactDOM\"","webpack:///external \"lodash\"","webpack:///external \"wp.blockEditor\""],"names":["module","exports","React","wp","element","url","htmlEntities","apiFetch","window","getTerms","taxonomy","perPage","taxSlug","collection","api","collections","undefined","Promise","resolve","data","fetch","hide_empty","per_page","then","terms","index","length","slug","replace","toLowerCase","id","name","withState","labelOptions","label","date","setAttributes","setState","useEffect","Object","keys","forEach","key","termObj","push","value","sort","a","b","getTermsAsOptions","options","style","display","alignItems","onChange","l","marginBottom","className","d","fetchPosts","termsData","excludeData","includeData","exclude","include","letter","isSelected","loadTerms","path","getTermsByLetter","state","JSON","parse","includeArr","map","term","term_id","stringify","stateInit","useDidMount","staticData","href","checked","includes","decodeEntities","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","height","marginTop","fontSize","margin","postType","formatTermId","programTermId","labelTaxonomy","expertsOnly","console","log","results","result","dateString","title","excerpt","timestamp","moment","format","link","image","Fields","attributes","wide","disabled","disableImage","useState","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","termIds","tmp","type","flexDirection","flexGrow","paddingRight","parseInt","paddingBottom","num","autoComplete","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","__","isBusy","isPrimary","onClick","isColumnLayout","ALLOWED","edit","pinned","posts","replaceInnerBlocks","useDispatch","blocks","innerBlocks","item","args","extra","postID","emphasis","isChartArt","imageSlot","imageSize","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","createBlock","initStoryBlock","initStaffBlock","toKeep","postId","filter","e","toCheck","f","allowedPerPage","toInsert","concat","allowedBlocks","save","Content","metadata","category","settings","description","providesContext","registerBlockType","i18n","components","ReactDOM","lodash","blockEditor"],"mappings":"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","file":"wp-query/main-ff77da13.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.url;","module.exports = wp.htmlEntities;","module.exports = wp.apiFetch;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst { wp } = window;\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    const taxSlug = taxonomy;\n    // strip dashes out of ataxonomy\n    const collection = new wp.api.collections[taxSlug]();\n\n    if (undefined !== collection) {\n        return new Promise(resolve => {\n            const data = {};\n            collection\n                .fetch({\n                    data: { hide_empty: false, per_page: perPage },\n                })\n                .then(terms => {\n                    for (let index = 0; index < terms.length; index++) {\n                        const slug = terms[index].slug.replace(\n                            `${taxSlug.toLowerCase()}_`,\n                            '',\n                        );\n                        data[terms[index].id] = {\n                            id: terms[index].id,\n                            name: terms[index].name,\n                            slug,\n                        };\n                    }\n                    resolve(data);\n                });\n        });\n    }\n\n    return false;\n};\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n\n    return false;\n};\n\nconst getTermsAsOptions = (taxonomy, perPage) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                labelOptions.push({\n                    value: termObj.name,\n                    label: termObj.name,\n                });\n            });\n\n            labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions };\n","import { useEffect } from '@wordpress/element';\nimport { withState } from '@wordpress/compose';\nimport { SelectControl, TextControl } from '@wordpress/components';\nimport { getTermsAsOptions } from 'shared';\n\nconst KickerEditor = withState({\n    labelOptions: [],\n})(({ label, date, taxonomy, setAttributes, setState, labelOptions }) => {\n    // On initial load & taxonomy change:\n    useEffect(() => {\n        getTermsAsOptions(taxonomy).then(options => {\n            setState({ labelOptions: options });\n        });\n    }, [taxonomy]);\n\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div>\n                <SelectControl\n                    value={label}\n                    options={labelOptions}\n                    onChange={l => {\n                        setAttributes({ label: l });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n            <div>&nbsp;|&nbsp;</div>\n            <div>\n                <TextControl\n                    value={date}\n                    onChange={d => {\n                        setAttributes({ date: d });\n                    }}\n                    style={{ marginBottom: '0px' }}\n                    className=\"story-label-select\"\n                />\n            </div>\n        </div>\n    );\n});\n\nexport default KickerEditor;\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = (\n    postType,\n    perPage,\n    formatTermId,\n    programTermId,\n    labelTaxonomy,\n    expertsOnly,\n) => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const date = moment(dateString).format(defaultFormat);\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        let path = `/prc-api/v2/fetch-posts/?postType=${postType}&perPage=${perPage}&formatTermId=${formatTermId}&programTermId=${programTermId}&labelTaxonomy=${labelTaxonomy}`;\n        if ('staff' === postType) {\n            path = `/prc-api/v2/fetch-posts/?postType=${postType}&perPage=${perPage}&programTermId=${programTermId}&expertsOnly=${expertsOnly}`;\n        }\n        console.log(\n            'fetchPosts?',\n            postType,\n            perPage,\n            formatTermId,\n            programTermId,\n            labelTaxonomy,\n            expertsOnly,\n        );\n        apiFetch({\n            path,\n        }).then(results => {\n            console.log(results);\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                const d = {\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                };\n                data.push(d);\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","/* eslint-disable radix */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    TextControl,\n    ToggleControl,\n    SelectControl,\n} from '@wordpress/components';\n\nimport { getTerms } from '../_shared';\n\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        expertsOnly,\n        formatTermId,\n        programTermId,\n        perPage,\n        postType,\n        labelTaxonomy,\n        disableImage,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <SelectControl\n                label=\"Post Type\"\n                value={postType}\n                options={[\n                    {\n                        value: 'stub',\n                        label: 'Stub',\n                    },\n                    {\n                        value: 'staff',\n                        label: 'Staff',\n                    },\n                ]}\n                onChange={type => {\n                    setAttributes({ postType: type });\n                }}\n                disabled={disabled}\n            />\n            <HorizontalRule />\n            {'staff' === postType && (\n                <ToggleControl\n                    label=\"Limit to experts\"\n                    checked={expertsOnly}\n                    onChange={() =>\n                        setAttributes({ expertsOnly: !expertsOnly })\n                    }\n                />\n            )}\n            {'stub' === postType && (\n                <ToggleControl\n                    label=\"Disable Image\"\n                    checked={disableImage}\n                    onChange={() =>\n                        setAttributes({ disableImage: !disableImage })\n                    }\n                />\n            )}\n            <HorizontalRule />\n            {'stub' === postType && (\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            )}\n            <div\n                style={\n                    true === wide\n                        ? {\n                              display: 'flex',\n                              flexDirection: 'row',\n                          }\n                        : {}\n                }\n            >\n                <div\n                    style={\n                        true === wide && 'stub' === postType\n                            ? {\n                                  flexGrow: '1',\n                                  paddingRight: '1em',\n                              }\n                            : {}\n                    }\n                >\n                    <SelectControl\n                        label=\"Program\"\n                        value={programTermId}\n                        options={programOptions}\n                        onChange={termId => {\n                            setAttributes({ programTermId: parseInt(termId) });\n                        }}\n                        disabled={disabled}\n                    />\n                </div>\n                {'stub' === postType && (\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n\n            <TextControl\n                label={\n                    'stub' === postType ? 'Number of Posts' : 'Number of Staff'\n                }\n                value={perPage}\n                onChange={num => setAttributes({ perPage: parseInt(num) })}\n                disabled={disabled}\n                autoComplete=\"off\"\n            />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        const {\n            postType,\n            formatTermId,\n            programTermId,\n            perPage,\n            labelTaxonomy,\n            expertsOnly,\n        } = attributes;\n        fetchPosts(\n            postType,\n            perPage,\n            formatTermId,\n            programTermId,\n            labelTaxonomy,\n            expertsOnly,\n        ).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","import { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { InnerBlocks } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = (item, disableImage, labelTaxonomy) => {\n    const args = {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        imageSize: 'A3',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 'normal',\n        className: 'is-style-left',\n    };\n    if (true === disableImage) {\n        args.imageSlot = 'disabled';\n        args.className = 'is-style-disabled';\n        args.enableExcerpt = false;\n    }\n    if ('programs' === labelTaxonomy) {\n        args.enableProgramsTaxonomy = true;\n    }\n    return createBlock('prc-block/story-item', args);\n};\n\nconst initStaffBlock = item => {\n    // We only need to set the link, the block itself will go and fetch all the information we need.\n    const args = {\n        link: item.link,\n    };\n    return createBlock('prc-block/staff', args);\n};\n\nconst edit = ({ attributes, setAttributes, className, clientId }) => {\n    const {\n        pinned,\n        postType,\n        perPage,\n        labelTaxonomy,\n        disableImage,\n    } = attributes;\n\n    const [posts, setPosts] = useState(false);\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const { innerBlocks, hasInnerBlocks } = useSelect(\n        select => {\n            const blocks = select('core/block-editor').getBlocks(clientId);\n            return {\n                innerBlocks: blocks,\n                hasInnerBlocks: 0 < blocks.length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        if (false !== posts) {\n            let tmp = [];\n            posts.forEach(item => {\n                if ('stub' === postType) {\n                    tmp.push(initStoryBlock(item, disableImage, labelTaxonomy));\n                }\n                if ('staff' === postType) {\n                    tmp.push(initStaffBlock(item));\n                }\n            });\n\n            const toKeep = [];\n            JSON.parse(pinned).forEach(postId => {\n                const toPush = innerBlocks.filter(e => {\n                    const toCheck = tmp.filter(\n                        f => f.attributes.postID === postId,\n                    );\n                    return (\n                        e.attributes.postID === postId && 0 >= toCheck.length\n                    );\n                });\n                toPush.forEach(b => toKeep.push(b));\n            });\n\n            const allowedPerPage = perPage - toKeep.length;\n\n            tmp = tmp.filter((e, index) => {\n                return index <= allowedPerPage - 1;\n            });\n\n            const toInsert = toKeep.concat(tmp);\n\n            replaceInnerBlocks(clientId, toInsert);\n        }\n    }, [posts]);\n\n    return (\n        <div className={className}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <InnerBlocks allowedBlocks={ALLOWED} />}\n        </div>\n    );\n};\n\nexport default edit;\n","import { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = ({ className, attributes }) => {\n    return (\n        <div className={className}>\n            <InnerBlocks.Content />\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name, category, attributes } = metadata;\n\nconst settings = [\n    name,\n    {\n        title: __('PRC WP Query'),\n        description: __(\n            'The WP Query block provides a handful of arguments depending on post type that will return the intendend block. You can pin results so that subsequent updates add to rather than replace.',\n        ),\n        category,\n        attributes,\n        providesContext: {\n            'prc-block/wp-query': 'pinned',\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import { registerBlockType } from '@wordpress/blocks';\n\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = moment;","module.exports = wp.i18n;","module.exports = wp.data;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = ReactDOM;","module.exports = lodash;","module.exports = wp.blockEditor;"],"sourceRoot":""}