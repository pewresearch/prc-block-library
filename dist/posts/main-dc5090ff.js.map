{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"moment\"","webpack:///./src/posts/component.js","webpack:///./src/posts/index.js","webpack:///external \"wp.i18n\"","webpack:///external \"wp.element\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.components\""],"names":["module","exports","React","wp","blocks","blockEditor","moment","PostsList","props","data","console","log","List","relaxed","divided","map","item","index","Item","className","date","href","link","title","Posts","this","posts","Component","EditSidebar","getPosts","attributes","per_page","format","perPage","info","setAttributes","formats","Number","api","collections","Stub","fetch","then","length","push","rendered","dateString","__","label","value","onChange","options","bind","registerBlockType","icon","category","keywords","styles","name","isDefault","supports","html","type","default","program","static","edit","isSelected","save","i18n","element","ReactDOM","components"],"mappings":"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","file":"posts/main-dc5090ff.js","sourcesContent":["module.exports = React;","module.exports = wp.blocks;","module.exports = wp.blockEditor;","module.exports = moment;","\nimport { Component, Fragment, RawHTML } from '@wordpress/element';\nimport { Item, List } from 'semantic-ui-react';\nimport classNames from 'classnames/bind';\nimport * as moment from 'moment';\n\nclass PostsList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\tposts({data}){\n\t\tconsole.log(data);\n\t\treturn(\n\t\t\t<List relaxed divided>\n\t\t\t{ false !== data && data.map((item, index) => {\n\t\t\t\treturn <List.Item><span className=\"meta date\">{item.date}</span><a href={item.link}><RawHTML>{item.title}</RawHTML></a></List.Item>\n\t\t\t}) }\n\t\t\t</List>\n\t\t)\n\t}\n\n\trender() {\n\t\tconst Posts = this.posts;\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t<Posts data={ this.props.posts }/>\n\t\t\t</Fragment>\n\t\t)\n\t}\t\n}\n\nexport default PostsList;","import { __ } from \"@wordpress/i18n\";\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { Button, PanelBody, ToggleControl, TextControl, SelectControl } from '@wordpress/components';\nimport { Component, Fragment } from '@wordpress/element';\n\nimport PostsList from './component';\n\nclass EditSidebar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.getPosts = this.getPosts.bind(this);\n\t}\n\n\tcomponentDidMount = () => {\n\t\tthis.getPosts(this.props.attributes.per_page, this.props.attributes.format);\n\t}\n\n\tgetPosts = (perPage, format) => {\n\t\tconsole.info('Getting Posts');\n\n\t\tconst formatDate = function( dateString ) {\n\t\t\treturn moment(dateString).format(\"MMM D, YYYY\");\n\t\t}\n\n\t\tconst setAttributes = this.props.setAttributes;\n\t\n\t\tlet data = [];\n\t\tlet formats = [ Number(format) ];\n\t\tperPage = Number(perPage);\n\n\t\tconsole.log('per page');\n\t\tconsole.log(perPage);\n\t\tconsole.log('format');\n\t\tconsole.log(formats);\n\n\t\tconst collection = new wp.api.collections.Stub();\n\t\tcollection.fetch( { data: { 'per_page': perPage, 'formats': formats } } ).then( ( posts ) => {\n\t\t\tconsole.log(posts);\n\t\t\tfor ( let index = 0; index < posts.length; index++ ) {\n\t\t\t\tdata.push({\n\t\t\t\t\ttitle: posts[index].title.rendered,\n\t\t\t\t\tdate: formatDate(posts[index].date),\n\t\t\t\t\tlink: posts[index].link,\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetAttributes({ posts: data });\n\t\t});\n\t}\n\n\trender = () => {\n\t\tconst setAttributes = this.props.setAttributes;\n\t\tconsole.log(this.props);\n\t\treturn(\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Posts Block Options' ) }>\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\tlabel=\"Number of Posts\"\n\t\t\t\t\t\tvalue={ Number(this.props.attributes.per_page) }\n\t\t\t\t\t\tonChange={ ( per_page ) => { \n\t\t\t\t\t\t\tsetAttributes( { per_page: Number(per_page) } );\n\t\t\t\t\t\t\tthis.getPosts(per_page, this.props.attributes.format); \n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel=\"Format\"\n\t\t\t\t\t\tvalue={ this.props.attributes.format }\n\t\t\t\t\t\toptions={ [\n\t\t\t\t\t\t\t{ label: 'Report', value: 10818957 },\n\t\t\t\t\t\t\t{ label: 'Feature', value: 10818948 },\n\t\t\t\t\t\t\t{ label: 'Fact Tank', value: 10818955 },\n\t\t\t\t\t\t] }\n\t\t\t\t\t\tonChange={ ( format ) => { \n\t\t\t\t\t\t\tsetAttributes( { format: Number(format) } );\n\t\t\t\t\t\t\tthis.getPosts(this.props.attributes.per_page, format);\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t)\n\t}\n}\n\n/**\n * Register: aa Gutenberg Block.\n *\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made editor as an option to any\n * editor interface where blocks are implemented.\n *\n * @link https://wordpress.org/gutenberg/handbook/block-api/\n * @param  {string}   name     Block name.\n * @param  {Object}   settings Block settings.\n * @return {?WPBlock}          The block, if it has been successfully\n *                             registered; otherwise `undefined`.\n */\nregisterBlockType( 'prc-block/posts', {\n\t// Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n\ttitle: __( 'Posts Block' ), // Block title.\n\ticon: 'align-left', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n\tcategory: 'widgets', // Block category — Group blocks together based on common traits E.g. common, formatting, layout, widgets, embed.\n\tkeywords: [\n\t\t__( 'prc' ),\n\t\t__( 'fact tank' ),\n\t\t__( 'posts listing' ),\n\t\t__( 'posts' ),\n\t\t__( 'posts widget' ),\n\t],\n\tstyles: [\n\t\t{\n\t\t\tname: 'default',\n\t\t\tisDefault: true,\n\t\t},\n\t\t{\n\t\t\tname: 'beige',\n\t\t\tlabel: 'Beige (Borderless)',\n\t\t},\n\t\t{\n\t\t\tname: 'oatmeal',\n\t\t\tlabel: 'Oatmeal (Borderless)',\n\t\t},\n\t],\n\tsupports: {\n\t\thtml: false, // We do not want to give people the ability to edit the raw html of this block.\n\t},\n\t// Attributes are really react props. \n\tattributes: {\n\t\ttitle: {\n\t\t\ttype: 'string',\n\t\t\tdefault: 'Title',\n\t\t},\n\t\tformat: {\n\t\t\ttype: 'integer',\n\t\t\tdefault: 10818957,\n\t\t},\n\t\tprogram: {\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t\tper_page: {\n\t\t\ttype: 'interger',\n\t\t\tdefault: 10,\n\t\t},\n\t\tstatic: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\tposts: {\n\t\t\ttype: 'array',\n\t\t\tdefault: false,\n\t\t}\n\t},\n\n\t/**\n\t * The edit function describes the structure of your block in the context of the editor.\n\t * This represents what the editor will render when the block is used.\n\t *\n\t * The \"edit\" property must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Component.\n\t */\n\tedit: ( props ) => {\n\t\tif ( true === props.isSelected ) {\n\t\t\tprops.attributes.setAttributes = props.setAttributes;\n\t\t}\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t{ true === props.isSelected && (\n\t\t\t\t\t<EditSidebar {...props}/>\n\t\t\t\t) }\n\t\t\t\t<PostsList {...props.attributes}/>\n\t\t\t</Fragment>\n\t\t)\n\t},\n\t\n\t/**\n\t * The save function defines the way in which the different attributes should be combined\n\t * into the final markup, which is then serialized by Gutenberg into post_content.\n\t *\n\t * The \"save\" property must be specified and must be a valid function.\n\t *\n\t * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n\t *\n\t * @param {Object} props Props.\n\t * @returns {Mixed} JSX Frontend HTML.\n\t */\n\tsave: ( props ) => {\n\t\treturn (\n\t\t\t<PostsList {...props.attributes}/>\n\t\t);\n\t},\n} );\n","module.exports = wp.i18n;","module.exports = wp.element;","module.exports = ReactDOM;","module.exports = wp.components;"],"sourceRoot":""}