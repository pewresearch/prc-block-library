{"version":3,"sources":["webpack:///external \"React\"","webpack:///./src/_shared/components/collapsible-list/index.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/a-z-taxonomy-list/edit.js","webpack:///./src/a-z-taxonomy-list/save.js","webpack:///./src/a-z-taxonomy-list/settings.js","webpack:///./src/a-z-taxonomy-list/index.js","webpack:///external \"wp.components\"","webpack:///external \"moment\"","webpack:///external \"wp.i18n\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.element\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.url\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"wp.compose\"","webpack:///external \"wp.data\""],"names":["module","exports","React","CollapsibleList","heading","chevron","placeholder","setAttributes","children","className","Icon","name","tagName","value","onChange","h","formattingControls","keepPlaceholderOnFocus","Content","size","TaxonomySelectList","withState","termsData","excludeData","includeData","setState","exclude","include","taxonomy","letter","isSelected","loadTerms","Promise","resolve","apiFetch","path","then","terms","getTermsByLetter","state","length","JSON","parse","includeArr","map","term","push","id","term_id","slug","stringify","stateInit","useDidMount","staticData","href","toLowerCase","checked","includes","label","decodeEntities","b","bool","termId","termName","termSlug","index","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin","edit","attributes","SelectLetter","options","l","save","settings","title","__","description","category","icon","keywords","supports","html","align","type","source","selector","default","registerBlockType","wp","components","moment","i18n","ReactDOM","blockEditor","element","blocks","url","htmlEntities","compose","data"],"mappings":"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","file":"a-z-taxonomy-list/main-daf2db51.js","sourcesContent":["module.exports = React;","import './style.scss';\nimport { RichText } from '@wordpress/block-editor';\nimport { Icon } from 'semantic-ui-react';\n\nconst CollapsibleList = ({\n    heading,\n    chevron,\n    placeholder,\n    setAttributes,\n    children,\n}) => {\n    return (\n        <div className=\"prc-collapsible-list\">\n            <div className=\"title\">\n                <div>\n                    <Icon name=\"caret down\" />\n                </div>\n                {false !== setAttributes && (\n                    <RichText\n                        tagName=\"h2\"\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder={placeholder}\n                        formattingControls={['link']}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                )}\n                {false === setAttributes && (\n                    <RichText.Content\n                        tagName=\"h2\"\n                        value={heading}\n                        className=\"sans-serif\"\n                    />\n                )}\n                {true === chevron && (\n                    <div>\n                        <Icon name=\"chevron right\" size=\"large\" />\n                    </div>\n                )}\n            </div>\n            <div className=\"content\">{children}</div>\n        </div>\n    );\n};\n\nexport default CollapsibleList;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n// eslint-disable-next-line import/no-unresolved\nimport { CollapsibleList, TaxonomySelectList } from 'shared';\nimport { SelectControl } from '@wordpress/components';\n\nconst edit = ({ attributes, className, setAttributes, isSelected }) => {\n    const { heading, letter, exclude, include } = attributes;\n\n    const SelectLetter = () => {\n        return (\n            <SelectControl\n                label=\"Chose a letter\"\n                value={letter}\n                options={[\n                    { label: '(Click to select letter)', value: '' },\n                    { label: 'A', value: 'A' },\n                    { label: 'B', value: 'B' },\n                    { label: 'C', value: 'C' },\n                    { label: 'D', value: 'D' },\n                    { label: 'E', value: 'E' },\n                    { label: 'F', value: 'F' },\n                    { label: 'G', value: 'G' },\n                    { label: 'H', value: 'H' },\n                    { label: 'I', value: 'I' },\n                    { label: 'J', value: 'J' },\n                    { label: 'K', value: 'K' },\n                    { label: 'L', value: 'L' },\n                    { label: 'M', value: 'M' },\n                    { label: 'N', value: 'N' },\n                    { label: 'O', value: 'O' },\n                    { label: 'P', value: 'P' },\n                    { label: 'Q', value: 'Q' },\n                    { label: 'R', value: 'R' },\n                    { label: 'S', value: 'S' },\n                    { label: 'T', value: 'T' },\n                    { label: 'U', value: 'U' },\n                    { label: 'V', value: 'V' },\n                    { label: 'W', value: 'W' },\n                    { label: 'X', value: 'X' },\n                    { label: 'Y', value: 'Y' },\n                    { label: 'Z', value: 'Z' },\n                ]}\n                onChange={l => {\n                    setAttributes({\n                        letter: l,\n                        heading: l,\n                        exclude: '',\n                        include: '',\n                    });\n                }}\n            />\n        );\n    };\n\n    return (\n        <div className={className}>\n            <CollapsibleList\n                heading={heading}\n                placeholder=\"A\"\n                setAttributes={false}\n            >\n                {'' === letter && <SelectLetter />}\n                {'' !== letter && (\n                    <TaxonomySelectList\n                        exclude={exclude}\n                        include={include}\n                        letter={letter}\n                        taxonomy=\"Topic\"\n                        setAttributes={setAttributes}\n                        isSelected={isSelected}\n                    />\n                )}\n            </CollapsibleList>\n        </div>\n    );\n};\n\nexport default edit;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n// eslint-disable-next-line import/no-unresolved\nimport { CollapsibleList, TaxonomySelectList } from 'shared';\n\nconst save = ({ attributes, className }) => {\n    const { heading, letter, include } = attributes;\n\n    return (\n        <div className={className}>\n            <CollapsibleList\n                heading={heading}\n                placeholder=\"A\"\n                setAttributes={false}\n            >\n                <TaxonomySelectList\n                    include={include}\n                    letter={letter}\n                    taxonomy=\"Topic\"\n                    setAttributes={false}\n                />\n            </CollapsibleList>\n        </div>\n    );\n};\n\nexport default save;\n","import { __ } from '@wordpress/i18n';\nimport edit from './edit';\nimport save from './save';\n\nconst settings = [\n    'prc-block/a-z-taxonomy-list',\n    {\n        title: __('A-Z Taxonomy List'),\n        description:\n            'A taxonomy list sorted alphabeticaly. Check terms you want to exclude.',\n        category: 'layout',\n        icon: 'networking',\n        keywords: [__('Taxonomy List'), __('Taxonomies'), __('A-Z'), __('AZ')],\n        supports: {\n            html: false,\n            align: false,\n        },\n        attributes: {\n            heading: {\n                type: 'string',\n                source: 'html',\n                selector: 'h2',\n                default: 'A',\n            },\n            letter: {\n                type: 'string',\n                default: '',\n            },\n            exclude: {\n                type: 'string',\n                default: '',\n            },\n            include: {\n                type: 'string',\n                default: '',\n            },\n        },\n        edit,\n        save,\n    },\n];\n\nexport default settings;\n","import './style.scss';\nimport { registerBlockType } from '@wordpress/blocks';\nimport settings from './settings';\n\nregisterBlockType(...settings);\n","module.exports = wp.components;","module.exports = moment;","module.exports = wp.i18n;","module.exports = ReactDOM;","module.exports = wp.blockEditor;","module.exports = wp.apiFetch;","module.exports = wp.element;","module.exports = wp.blocks;","module.exports = wp.url;","module.exports = wp.htmlEntities;","module.exports = wp.compose;","module.exports = wp.data;"],"sourceRoot":""}