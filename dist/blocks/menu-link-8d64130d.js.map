{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"lodash\"","webpack:///external \"wp.i18n\"","webpack:///./src/menu-link/edit.js","webpack:///./src/menu-link/save.js","webpack:///./src/menu-link/variations.js","webpack:///./src/menu-link/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.url\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\""],"names":["module","exports","wp","element","lodash","i18n","getSuggestionsQuery","type","subtype","SubMenu","close","innerBlocksProps","useInnerBlocksProps","className","classnames","list","style","width","padding","zIndex","allowedBlocks","orientation","__experimentalCaptureToolbars","templateLock","position","onFocusOutside","onClose","edit","attributes","context","isSelected","setAttributes","clientId","mergeBlocks","onReplace","label","opensInNewTab","url","description","rel","title","subMenuEnabled","link","useSelect","select","getBlockHierarchyRootClientId","getClientIdsOfDescendants","getBlockRootClientId","getBlock","allowSubMenus","parentBlock","rootBlock","includes","name","allowSubMenu","hasDescendants","length","isDraggingBlocks","subMenuType","hasOwnProperty","rootBlockName","parentBlockName","useState","isLinkOpen","setIsLinkOpen","isSubMenuOpen","setIsSubMenuOpen","listItemRef","useRef","itemLabelPlaceholder","__","ref","useEffect","isURL","prependHTTP","test","current","focus","ownerDocument","selection","defaultView","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","selectLabelText","placeCaretAtHorizontalEdge","blockProps","useBlockProps","bindGlobal","shortcuts","rawShortcut","primary","icon","linkIcon","shortcut","displayShortcut","onClick","moreIcon","isActive","value","onChange","descriptionValue","help","titleValue","autoComplete","relValue","checked","identifier","labelValue","onMerge","aria-label","placeholder","keepPlaceholderOnFocus","withoutInteractiveFormatting","allowedFormats","isTertiary","isPressed","expandInlineIcon","showInitialSuggestions","noDirectEntry","noURLSuggestion","suggestionsQuery","normalizedTitle","normalizedURL","newTitle","newURL","newOpensInNewTab","id","encodeURI","replace","escape","save","Content","isDefault","pageIcon","categoryIcon","tagIcon","metadata","settings","variations","__experimentalLabel","registerBlockType","blockEditor","components","blocks","data"],"mappings":"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","file":"blocks/menu-link-8d64130d.js","sourcesContent":["module.exports = wp.element;","module.exports = lodash;","module.exports = wp.i18n;","/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escape, get, head, find } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport {\n    Button,\n    Flex,\n    FlexItem,\n    FlexBlock,\n    KeyboardShortcuts,\n    PanelBody,\n    Popover,\n    TextControl,\n    TextareaControl,\n    ToggleControl,\n    ToolbarButton,\n    ToolbarGroup,\n} from '@wordpress/components';\nimport { rawShortcut, displayShortcut } from '@wordpress/keycodes';\nimport { __, sprintf } from '@wordpress/i18n';\nimport {\n    BlockControls,\n    InspectorControls,\n    RichText,\n    __experimentalLinkControl as LinkControl,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { isURL, prependHTTP } from '@wordpress/url';\nimport { Fragment, useState, useEffect, useRef } from '@wordpress/element';\nimport { placeCaretAtHorizontalEdge } from '@wordpress/dom';\nimport {\n    Icon,\n    link as linkIcon,\n    formatIndent as moreIcon,\n    plusCircle as expandInlineIcon,\n} from '@wordpress/icons';\n\n/**\n * Given the Link block's type attribute, return the query params to give to\n * /wp/v2/search.\n *\n * @param {string} type Link block's type attribute.\n * @return {{ type?: string, subtype?: string }} Search query params.\n */\nconst getSuggestionsQuery = type => {\n    switch (type) {\n        case 'page':\n            return { type: 'post', subtype: 'page' };\n        case 'topic':\n            return { type: 'term', subtype: 'topic' };\n        case 'formats':\n            return { type: 'term', subtype: 'formats' };\n        case 'programs':\n            return { type: 'term', subtype: 'programs' };\n        default:\n            return {};\n    }\n};\n\nconst SubMenu = ({ type, close }) => {\n    const innerBlocksProps = useInnerBlocksProps(\n        {\n            className: classnames({\n                list: 'inline' === type,\n            }),\n            style:\n                'dropdown' === type\n                    ? { width: '200px', padding: '0 1em 1em 1em', zIndex: 2 }\n                    : null,\n        },\n        {\n            allowedBlocks: ['prc-block/menu-link'],\n            orientation: 'vertical',\n            __experimentalCaptureToolbars: 'dropdown' === type,\n            templateLock: false,\n        },\n    );\n\n    if ('inline' === type) {\n        return <div {...innerBlocksProps} />;\n    }\n\n    return (\n        <Popover\n            position=\"bottom center\"\n            onFocusOutside={() => null}\n            onClose={close}\n            style={{ zIndex: 1 }}\n        >\n            <div {...innerBlocksProps} />\n        </Popover>\n    );\n};\n\nconst edit = ({\n    attributes,\n    context,\n    isSelected,\n    setAttributes,\n    clientId,\n    mergeBlocks,\n    onReplace,\n}) => {\n    const {\n        label,\n        type,\n        opensInNewTab,\n        url,\n        description,\n        rel,\n        title,\n        subMenuEnabled,\n    } = attributes;\n\n    const link = {\n        url,\n        opensInNewTab,\n    };\n\n    const {\n        isDraggingBlocks,\n        subMenuType,\n        allowSubMenu,\n        parentBlockName,\n        rootBlockName,\n    } = useSelect(select => {\n        const {\n            getBlockHierarchyRootClientId,\n            getClientIdsOfDescendants,\n            getBlockRootClientId,\n            getBlock,\n        } = select('core/block-editor');\n        let allowSubMenus = true;\n        const parentBlock = getBlock(getBlockRootClientId(clientId));\n        const rootBlock = getBlock(getBlockHierarchyRootClientId(clientId));\n        if (\n            ['prc-block/menu-link', 'prc-block/taxonomy-tree-more'].includes(\n                parentBlock.name,\n            )\n        ) {\n            allowSubMenus = false;\n        }\n        return {\n            allowSubMenu: allowSubMenus,\n            hasDescendants: !!getClientIdsOfDescendants([clientId]).length,\n            isDraggingBlocks: select('core/block-editor').isDraggingBlocks(),\n            subMenuType: context.hasOwnProperty('prc-block/menu')\n                ? 'dropdown'\n                : 'inline',\n            rootBlockName: rootBlock.name,\n            parentBlockName: parentBlock.name,\n        };\n    }, []);\n\n    const [isLinkOpen, setIsLinkOpen] = useState(false);\n    const [isSubMenuOpen, setIsSubMenuOpen] = useState(false);\n    const listItemRef = useRef(null);\n    const itemLabelPlaceholder = __('Add link…');\n    const ref = useRef();\n\n    /**\n     * Focus the Link label text and select it.\n     */\n    const selectLabelText = () => {\n        ref.current.focus();\n        const { ownerDocument } = ref.current;\n        const { defaultView } = ownerDocument;\n        const selection = defaultView.getSelection();\n        const range = ownerDocument.createRange();\n        // Get the range of the current ref contents so we can add this range to the selection.\n        range.selectNodeContents(ref.current);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    };\n\n    // Show the LinkControl on mount if the URL is empty\n    // ( When adding a new menu item)\n    // This can't be done in the useState call because it conflicts\n    // with the autofocus behavior of the BlockListBlock component.\n    useEffect(() => {\n        if (!url) {\n            setIsLinkOpen(true);\n        }\n        setAttributes({\n            rootBlockName,\n            parentBlockName,\n        });\n    }, []);\n\n    /**\n     * The hook shouldn't be necessary but due to a focus loss happening\n     * when selecting a suggestion in the link popover, we force close on block unselection.\n     */\n    useEffect(() => {\n        if (!isSelected) {\n            setIsLinkOpen(false);\n        }\n    }, [isSelected]);\n\n    // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.\n    useEffect(() => {\n        if (isLinkOpen && url) {\n            // Does this look like a URL and have something TLD-ish?\n            if (isURL(prependHTTP(label)) && /^.+\\.[a-z]+/.test(label)) {\n                // Focus and select the label text.\n                selectLabelText();\n            } else {\n                // Focus it (but do not select).\n                placeCaretAtHorizontalEdge(ref.current, true);\n            }\n        }\n    }, [url]);\n\n    // If this is not allowed to have a sub menu then it is a child, set attributes for use server side accordingly.\n    useEffect(() => {}, [allowSubMenu]);\n\n    const blockProps = useBlockProps({\n        ref: listItemRef,\n        className: classnames('item', {\n            'is-editing':\n                isSelected &&\n                // Don't show the element as editing while dragging.\n                !isDraggingBlocks,\n            // Don't select the element while dragging.\n            'is-selected': isSelected && !isDraggingBlocks,\n            'has-link': !!url,\n        }),\n    });\n\n    return (\n        <Fragment>\n            <BlockControls>\n                <ToolbarGroup>\n                    <KeyboardShortcuts\n                        bindGlobal\n                        shortcuts={{\n                            [rawShortcut.primary('k')]: () =>\n                                setIsLinkOpen(true),\n                        }}\n                    />\n                    <ToolbarButton\n                        name=\"link\"\n                        icon={linkIcon}\n                        title={__('Link')}\n                        shortcut={displayShortcut.primary('k')}\n                        onClick={() => setIsLinkOpen(true)}\n                    />\n                    {true === allowSubMenu && (\n                        <ToolbarButton\n                            name=\"sub-menu\"\n                            icon={moreIcon}\n                            title={__('Sub Menu')}\n                            isActive={isSubMenuOpen}\n                            onClick={() => {\n                                if (false === subMenuEnabled) {\n                                    setAttributes({ subMenuEnabled: true });\n                                }\n                                setIsSubMenuOpen(!isSubMenuOpen);\n                            }}\n                        />\n                    )}\n                </ToolbarGroup>\n            </BlockControls>\n\n            <InspectorControls>\n                <PanelBody title={__('Link settings')}>\n                    <TextareaControl\n                        value={description || ''}\n                        onChange={descriptionValue => {\n                            setAttributes({ description: descriptionValue });\n                        }}\n                        label={__('Description')}\n                        help={__(\n                            'The description will be displayed in the menu if the current theme supports it.',\n                        )}\n                    />\n                    <TextControl\n                        value={title || ''}\n                        onChange={titleValue => {\n                            setAttributes({ title: titleValue });\n                        }}\n                        label={__('Link title')}\n                        autoComplete=\"off\"\n                    />\n                    <TextControl\n                        value={rel || ''}\n                        onChange={relValue => {\n                            setAttributes({ rel: relValue });\n                        }}\n                        label={__('Link rel')}\n                        autoComplete=\"off\"\n                    />\n                    {true === allowSubMenu && (\n                        <ToggleControl\n                            checked={subMenuEnabled}\n                            onChange={() => {\n                                setAttributes({\n                                    subMenuEnabled: !subMenuEnabled,\n                                });\n                            }}\n                            label={__('Enable Sub Menu')}\n                        />\n                    )}\n                </PanelBody>\n            </InspectorControls>\n\n            <div {...blockProps}>\n                <Flex>\n                    <FlexItem>\n                        <RichText\n                            ref={ref}\n                            identifier=\"label\"\n                            className={\n                                'is-style-text' === context['prc-block/menu'] &&\n                                true === allowSubMenu\n                                    ? 'ui basic button'\n                                    : ''\n                            }\n                            value={label}\n                            onChange={labelValue =>\n                                setAttributes({ label: labelValue })\n                            }\n                            onMerge={mergeBlocks}\n                            onReplace={onReplace}\n                            aria-label={__('Menu link text')}\n                            placeholder={itemLabelPlaceholder}\n                            keepPlaceholderOnFocus\n                            withoutInteractiveFormatting\n                            allowedFormats={['core/bold', 'core/italic']}\n                        />\n                    </FlexItem>\n                    <FlexBlock>\n                        {true === subMenuEnabled &&\n                            'inline' === subMenuType && (\n                                <Button\n                                    isTertiary\n                                    isPressed={isSubMenuOpen}\n                                    icon={expandInlineIcon}\n                                    onClick={() =>\n                                        setIsSubMenuOpen(!isSubMenuOpen)\n                                    }\n                                />\n                            )}\n                    </FlexBlock>\n                </Flex>\n\n                {isLinkOpen && (\n                    <Popover\n                        position=\"bottom center\"\n                        onClose={() => setIsLinkOpen(false)}\n                    >\n                        <LinkControl\n                            className=\"wp-block-navigation-link__inline-link-input\"\n                            value={link}\n                            showInitialSuggestions\n                            noDirectEntry={!!type}\n                            noURLSuggestion={!!type}\n                            suggestionsQuery={getSuggestionsQuery(type)}\n                            onChange={({\n                                title: newTitle = '',\n                                url: newURL = '',\n                                opensInNewTab: newOpensInNewTab,\n                                id,\n                            } = {}) =>\n                                setAttributes({\n                                    url: encodeURI(newURL),\n                                    label: (() => {\n                                        const normalizedTitle = newTitle.replace(\n                                            /http(s?):\\/\\//gi,\n                                            '',\n                                        );\n                                        const normalizedURL = newURL.replace(\n                                            /http(s?):\\/\\//gi,\n                                            '',\n                                        );\n                                        if (\n                                            '' !== newTitle &&\n                                            normalizedTitle !== normalizedURL &&\n                                            label !== newTitle\n                                        ) {\n                                            return escape(newTitle);\n                                        }\n                                        if (label) {\n                                            return label;\n                                        }\n                                        // If there's no label, add the URL.\n                                        return escape(normalizedURL);\n                                    })(),\n                                    opensInNewTab: newOpensInNewTab,\n                                    id,\n                                })\n                            }\n                        />\n                    </Popover>\n                )}\n                {true === subMenuEnabled && true === isSubMenuOpen && (\n                    <SubMenu\n                        type={subMenuType}\n                        close={() => setIsSubMenuOpen(!isSubMenuOpen)}\n                    />\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n    category as categoryIcon,\n    page as pageIcon,\n    postTitle as postIcon,\n    tag as tagIcon,\n} from '@wordpress/icons';\n\nexport default [\n    {\n        name: 'link',\n        isDefault: true,\n        title: __('Link'),\n        description: __('A link to a URL.'),\n        attributes: {},\n    },\n    {\n        name: 'page',\n        icon: pageIcon,\n        title: __('Page Link'),\n        description: __('A link to a page.'),\n        attributes: { type: 'page' },\n    },\n    {\n        name: 'topic',\n        icon: categoryIcon,\n        title: __('Topic Page Link'),\n        description: __('A link to a topic.'),\n        attributes: { type: 'topic' },\n    },\n    {\n        name: 'formats',\n        icon: tagIcon,\n        title: __('Format Link'),\n        description: __('A link to a format.'),\n        attributes: { type: 'formats' },\n    },\n    {\n        name: 'programs',\n        icon: tagIcon,\n        title: __('Program Link'),\n        description: __('A link to a program.'),\n        attributes: { type: 'programs' },\n    },\n];\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { mapMarker as linkIcon } from '@wordpress/icons';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\nimport variations from './variations';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Link'),\n    icon: linkIcon,\n    description: __('Add a page, link, or another item to your navigation.'),\n    variations,\n    __experimentalLabel: ({ label }) => label,\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.url;","module.exports = wp.blocks;","module.exports = wp.data;"],"sourceRoot":""}