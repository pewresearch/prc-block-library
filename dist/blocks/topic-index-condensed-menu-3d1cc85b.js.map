{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"wp.i18n\"","webpack:///external \"moment\"","webpack:///external \"React\"","webpack:///external \"wp.apiFetch\"","webpack:///./src/topic-index-condensed/menu/edit.js","webpack:///./src/topic-index-condensed/menu/save.js","webpack:///./src/topic-index-condensed/menu/index.js","webpack:///external \"wp.url\"","webpack:///external \"wp.blockEditor\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/block-inserter-button/index.js","webpack:///./src/_shared/components/caret-heading-link/index.js","webpack:///./src/_shared/components/link-toolbar-button/index.js","webpack:///external \"wp.components\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\""],"names":["module","exports","wp","element","i18n","moment","React","apiFetch","ALLOWED_BLOCKS","Edit","className","clientId","blockProps","useBlockProps","classnames","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","templateLock","renderAppender","label","blockName","save","Content","name","metadata","settings","title","__","description","edit","registerBlockType","url","blockEditor","getTerms","taxonomy","perPage","Promise","resolve","data","path","then","terms","index","length","slug","replace","toLowerCase","id","parent","BlockInserterButton","attributes","tooltipPosition","onClick","currentBlock","select","getBlock","console","log","innerBlocks","nextIndex","newBlock","createBlock","dispatch","insertBlock","CaretHeadingLink","heading","headingSize","setAttributes","onChange","p","style","paddingBottom","tagName","value","h","placeholder","formattingControls","keepPlaceholderOnFocus","Icon","size","marginLeft","LinkToolbarButton","query","type","subtype","useState","isLinkOpen","setIsLinkOpen","aria-expanded","aria-haspopup","icon","showTooltip","position","onClose","showInitialSuggestions","suggestionsQuery","components","ReactDOM","blocks"],"mappings":"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","file":"blocks/topic-index-condensed-menu-3d1cc85b.js","sourcesContent":["module.exports = wp.element;","module.exports = wp.i18n;","module.exports = moment;","module.exports = React;","module.exports = wp.apiFetch;","/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport {\n    useBlockProps,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n} from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\n\nimport { BlockInserterButton } from 'shared';\n\nconst ALLOWED_BLOCKS = ['prc-block/topic-index-condensed-menu-item'];\n\nconst Edit = ({ className, clientId }) => {\n    const blockProps = useBlockProps({\n        className: classnames(className, 'column five wide'),\n    });\n\n    const innerBlocksProps = useInnerBlocksProps(\n        {\n            className: 'ui vertical fluid secondary menu',\n        },\n        {\n            allowedBlocks: ALLOWED_BLOCKS,\n            orientation: 'vertical',\n            templateLock: false,\n            renderAppender: () => (\n                <BlockInserterButton\n                    label=\"Add New Menu Item\"\n                    blockName=\"prc-block/topic-index-condensed-menu-item\"\n                    clientId={clientId}\n                />\n            ),\n        },\n    );\n\n    return (\n        <div {...blockProps}>\n            <div {...innerBlocksProps} />\n        </div>\n    );\n};\n\nexport default Edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\n// import './style.scss';\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Menu'),\n    description: __(\n        'A sub block of Topic Index - Condensed View, this block controls the left sidebar menu.',\n    ),\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.url;","module.exports = wp.blockEditor;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { select, dispatch } from '@wordpress/data';\nimport { Button } from '@wordpress/components';\n\nimport { createBlock } from '@wordpress/blocks';\n\nconst BlockInserterButton = ({\n    label = '',\n    blockName,\n    clientId,\n    attributes = {},\n}) => {\n    const handleClick = () => {\n        const currentBlock = select('core/block-editor').getBlock(clientId);\n        console.log('debug info...', currentBlock.innerBlocks.length);\n        const nextIndex = currentBlock.innerBlocks.length - 1;\n        const newBlock = createBlock(blockName, attributes);\n        dispatch('core/block-editor').insertBlock(\n            newBlock,\n            nextIndex,\n            clientId,\n        );\n    };\n    return (\n        <Button\n            label={__(label)}\n            tooltipPosition=\"bottom\"\n            onClick={handleClick}\n            className=\"block-editor-button-block-appender\"\n        >\n            {__(label)}\n        </Button>\n    );\n};\n\nexport default BlockInserterButton;\n","/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport { Flex, FlexItem, FlexBlock, ToolbarGroup } from '@wordpress/components';\nimport { BlockControls, RichText } from '@wordpress/block-editor';\n\n/**\n * External dependencies\n */\nimport { Icon } from 'semantic-ui-react';\n\n/**\n * Internal dependencies\n */\nimport { LinkToolbarButton } from 'shared';\n\nconst CaretHeadingLink = ({\n    url,\n    heading,\n    headingSize = 'h2',\n    setAttributes,\n}) => {\n    return (\n        <Fragment>\n            <BlockControls>\n                <ToolbarGroup>\n                    <LinkToolbarButton\n                        url={url}\n                        onChange={p => {\n                            setAttributes({ url: p.url });\n                        }}\n                    />\n                </ToolbarGroup>\n            </BlockControls>\n            <Flex style={{ paddingBottom: '1em' }}>\n                <FlexItem>\n                    <RichText\n                        tagName={headingSize}\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder=\"Heading...\"\n                        formattingControls={[]}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                </FlexItem>\n                <FlexBlock>\n                    <Icon\n                        name=\"chevron right\"\n                        size=\"large\"\n                        style={{ marginLeft: '0.5em' }}\n                    />\n                </FlexBlock>\n            </Flex>\n        </Fragment>\n    );\n};\n\nexport default CaretHeadingLink;\n","import { __ } from '@wordpress/i18n';\nimport { __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport { Fragment, useEffect, useState } from '@wordpress/element';\nimport { ToolbarButton, Popover } from '@wordpress/components';\n\n/**\n * Link control in a toolbar button that defaults to searching for topic terms\n */\nconst LinkToolbarButton = ({\n    url,\n    onChange,\n    query = { type: 'term', subtype: 'topic' },\n}) => {\n    const [isLinkOpen, setIsLinkOpen] = useState(false);\n    return (\n        <Fragment>\n            <ToolbarButton\n                aria-expanded={isLinkOpen}\n                aria-haspopup=\"true\"\n                label={__('Set Link')}\n                icon=\"admin-links\"\n                onClick={() => setIsLinkOpen(!isLinkOpen)}\n                showTooltip\n            />\n            {true === isLinkOpen && (\n                <Popover\n                    position=\"bottom center\"\n                    onClose={() => setIsLinkOpen(false)}\n                >\n                    <LinkControl\n                        className=\"wp-block-navigation-link__inline-link-input\"\n                        value={{ url }}\n                        showInitialSuggestions\n                        suggestionsQuery={query}\n                        onChange={p => onChange(p)}\n                        settings={[]}\n                    />\n                </Popover>\n            )}\n        </Fragment>\n    );\n};\n\nexport default LinkToolbarButton;\n","module.exports = wp.components;","module.exports = ReactDOM;","module.exports = wp.blocks;","module.exports = wp.data;"],"sourceRoot":""}