{"version":3,"sources":["webpack:///external \"React\"","webpack:///external \"wp.element\"","webpack:///external \"wp.htmlEntities\"","webpack:///external \"wp.i18n\"","webpack:///./src/wp-query/taxQuery.js","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.compose\"","webpack:///external \"wp.components\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"moment\"","webpack:///external \"wp.data\"","webpack:///external \"wp.url\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\""],"names":["module","exports","React","wp","element","htmlEntities","i18n","TaxonomyField","index","label","taxonomy","value","options","taxQuery","setAttributes","isLink","icon","closeSmall","onClick","tmpData","data","splice","lable","__","style","margin","onChange","val","showInitialSuggestions","suggestionsQuery","type","subtype","id","title","url","terms","settings","TaxQuery","relation","useState","setOptions","useEffect","selectedTaxonomies","map","nextOptions","o","includes","disabled","d","toLowerCase","split","s","charAt","toUpperCase","substring","join","getLabel","length","marginTop","marginBottom","help","checked","isSecondary","isSmall","push","getTerms","perPage","Promise","resolve","apiFetch","path","then","slug","replace","name","parent","fetchPosts","withState","termsData","excludeData","includeData","setState","exclude","include","letter","isSelected","loadTerms","getTermsByLetter","state","JSON","parse","includeArr","term","term_id","stringify","stateInit","useDidMount","staticData","className","href","decodeEntities","b","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","indexOf","removeFromExclude","data-termid","data-term","height","fontSize","attributes","console","log","request","method","results","forEach","result","dateString","excerpt","date","timestamp","moment","format","link","image","Fields","wide","formatTermId","programTermId","postsPerPage","labelTaxonomy","disableImage","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","termIds","Object","keys","tmp","display","flexDirection","flexGrow","paddingRight","parseInt","alignItems","paddingBottom","min","max","required","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","isBusy","isPrimary","isColumnLayout","ALLOWED","edit","pinned","blockProps","useBlockProps","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","renderAppender","InnerBlocks","ButtonBlockAppender","posts","replaceInnerBlocks","useDispatch","blocks","innerBlocks","item","args","extra","postID","emphasis","isChartArt","imageSlot","imageSize","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","createBlock","initStoryBlock","toKeep","postId","filter","e","toCheck","f","allowedPerPage","toInsert","concat","save","Content","metadata","description","registerBlockType","blockEditor","compose","components","ReactDOM"],"mappings":"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","file":"blocks/wp-query-7de9b0c5.js","sourcesContent":["module.exports = React;","module.exports = wp.element;","module.exports = wp.htmlEntities;","module.exports = wp.i18n;","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch, select } from '@wordpress/data';\nimport { __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    SelectControl,\n    ToggleControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\nimport { closeSmall } from '@wordpress/icons';\n\nconst TaxonomyField = ({\n    index,\n    label,\n    taxonomy = false,\n    value,\n    options,\n    taxQuery,\n    setAttributes,\n}) => {\n    const onRemove = () => {\n        const tmpData = taxQuery;\n        tmpData.data.splice(index, 1);\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTaxonomyChange = val => {\n        const tmpData = taxQuery;\n        tmpData.data[index].taxonomy = val;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTermChange = val => {\n        const { id, title, url } = val;\n        const tmpData = taxQuery;\n        tmpData.data[index].terms = id;\n        tmpData.data[index].title = title;\n        tmpData.data[index].value = url;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    return (\n        <div>\n            <Flex>\n                <FlexBlock>\n                    <strong>{label}</strong>\n                </FlexBlock>\n                <FlexItem>\n                    <Button\n                        isLink\n                        icon={closeSmall}\n                        onClick={onRemove}\n                        lable={__(`Remove taxonomy argument`)}\n                    />\n                </FlexItem>\n            </Flex>\n            {false === taxonomy && (\n                <div style={{ margin: '16px' }}>\n                    <SelectControl\n                        value={taxonomy}\n                        options={options}\n                        onChange={onTaxonomyChange}\n                    />\n                </div>\n            )}\n            {false !== taxonomy && null === value && (\n                <LinkControl\n                    label={__(`Term`)}\n                    value={value}\n                    showInitialSuggestions\n                    suggestionsQuery={{ type: 'term', subtype: taxonomy }}\n                    onChange={onTermChange}\n                    settings={[]}\n                />\n            )}\n            <HorizontalRule />\n        </div>\n    );\n};\n\nconst TaxQuery = ({ taxQuery, setAttributes }) => {\n    const { relation, data } = taxQuery;\n    const [options, setOptions] = useState([\n        { label: 'Select a Taxonomy', value: false },\n        { label: 'Topics', value: 'topic' },\n        { label: 'Formats', value: 'formats' },\n        { label: 'Programs', value: 'programs' },\n    ]);\n\n    const toggleRelation = () => {\n        const tmpData = taxQuery;\n        if ('OR' === tmpData.relation) {\n            tmpData.relation = 'AND';\n        } else {\n            tmpData.relation = 'OR';\n        }\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n\n    const getLabel = val => {\n        const { taxonomy, title } = val;\n        let label =\n            false === taxonomy ? `Choose Taxonomy` : `Choose ${taxonomy} Term`;\n        if (null !== title && false !== taxonomy) {\n            label = `${taxonomy}: ${title}`;\n        }\n        return label\n            .toLowerCase()\n            .split(' ')\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n            .join(' ');\n    };\n\n    /**\n     * Disable any taxonomy options that are already selected.\n     */\n    useEffect(() => {\n        // Go gather up selected taxonomies from taxQuery.data,\n        const selectedTaxonomies = data.map(({ taxonomy }) => taxonomy);\n        const nextOptions = options.map(o => {\n            if (selectedTaxonomies.includes(o.value)) {\n                o.disabled = true;\n            } else {\n                o.disabled = false;\n            }\n            return o;\n        });\n        setOptions(nextOptions);\n    }, [taxQuery]);\n    // Dont offer to change relation unless if data has more than one\n\n    return (\n        <Fragment>\n            <div>\n                {data.map((d, index) => {\n                    const { taxonomy, value } = d;\n                    const label = getLabel(d);\n                    return (\n                        <TaxonomyField\n                            index={index}\n                            label={__(label)}\n                            taxonomy={taxonomy}\n                            value={value}\n                            options={options}\n                            taxQuery={taxQuery}\n                            setAttributes={setAttributes}\n                        />\n                    );\n                })}\n                {2 <= data.length && (\n                    <div style={{ marginTop: '1em', marginBottom: '1em' }}>\n                        <ToggleControl\n                            label=\"Query Relation (OR|AND)\"\n                            help={\n                                'AND' === relation\n                                    ? 'AND (restrictive: restricts content)'\n                                    : 'OR (expansive: expands content)'\n                            }\n                            checked={'AND' === relation}\n                            onChange={toggleRelation}\n                        />\n                    </div>\n                )}\n            </div>\n            <Button\n                isSecondary\n                isSmall\n                onClick={() => {\n                    const tmpData = taxQuery;\n                    tmpData.data.push({\n                        taxonomy: false,\n                        terms: null,\n                        value: null,\n                    });\n                    setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n                }}\n            >\n                Add Taxonomy\n            </Button>\n        </Fragment>\n    );\n};\n\nexport default TaxQuery;\n","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst structureTermsHierarchically = (terms) => {\n    return null;\n}\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage, termValue = 'name', sortByLabel = true ) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                \n                let value = termObj.name;\n                if ( 'termid' === termValue ) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if ( undefined !== termObj.parent && 0 !== termObj.parent ) {\n                    label = ' -- ' + label;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if ( false !== sortByLabel ) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = (taxonomy) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter( e => e.parent === 0 );\n            parentTerms.forEach( e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter( f => f.parent === e.id );\n                let children = [];\n                // Construct children array.\n                c.forEach( cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children\n                });\n            } );\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = attributes => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const date = moment(dateString).format(defaultFormat);\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        console.log('fetchPosts?', attributes);\n\n        const request = {\n            method: 'POST',\n            path: '/prc-api/v2/block/wp-query',\n            data: attributes,\n        };\n\n        apiFetch(request).then(results => {\n            console.log(results);\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                const d = {\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                };\n                data.push(d);\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n","/* eslint-disable radix */\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { closeSmall } from '@wordpress/icons';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport {\n    InspectorControls,\n    __experimentalLinkControl as LinkControl,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    RangeControl,\n    SelectControl,\n    ToggleControl,\n    TextControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\n\n/**\n * Internal Dependencies\n */\nimport TaxQuery from './taxQuery';\nimport { getTerms } from '../_shared';\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        formatTermId,\n        programTermId,\n        postsPerPage,\n        labelTaxonomy,\n        disableImage,\n        taxQuery,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                <h4 className=\"sans-serif\">Story Item Settings</h4>\n                <ToggleControl\n                    label=\"Disable Images\"\n                    checked={disableImage}\n                    onChange={() =>\n                        setAttributes({ disableImage: !disableImage })\n                    }\n                />\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Program\"\n                            value={programTermId}\n                            options={programOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    programTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Query Arguments</h4>\n                <RangeControl\n                    label={__('Number of posts')}\n                    value={postsPerPage}\n                    onChange={val => setAttributes({ postsPerPage: val })}\n                    min={3}\n                    max={10}\n                    required\n                />\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Taxonomy Query Arguments</h4>\n                <TaxQuery taxQuery={taxQuery} setAttributes={setAttributes} />\n            </div>\n\n            <HorizontalRule />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        fetchPosts(attributes).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","/**\n * WordPress Dependencies\n */\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n    InnerBlocks,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = (item, disableImage, labelTaxonomy) => {\n    const args = {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        imageSize: 'A3',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 2,\n        className: 'is-style-left',\n    };\n    if (true === disableImage) {\n        args.imageSlot = 'disabled';\n        args.className = 'is-style-disabled';\n        args.enableExcerpt = false;\n    }\n    if ('programs' === labelTaxonomy) {\n        args.enableProgramsTaxonomy = true;\n    }\n    return createBlock('prc-block/story-item', args);\n};\n\nconst edit = ({ attributes, setAttributes, className, clientId }) => {\n    const { pinned, postsPerPage, labelTaxonomy, disableImage } = attributes;\n\n    const blockProps = useBlockProps({ className });\n\n    const innerBlocksProps = useInnerBlocksProps({\n        allowedBlocks: ALLOWED,\n        orientation: 'vertical', // We should allow toggling this based on layout.\n        renderAppender: InnerBlocks.ButtonBlockAppender,\n    });\n\n    const [posts, setPosts] = useState(false);\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const { innerBlocks, hasInnerBlocks } = useSelect(\n        select => {\n            const blocks = select('core/block-editor').getBlocks(clientId);\n            return {\n                innerBlocks: blocks,\n                hasInnerBlocks: 0 < blocks.length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        if (false !== posts) {\n            let tmp = [];\n            posts.forEach(item => {\n                tmp.push(initStoryBlock(item, disableImage, labelTaxonomy));\n            });\n\n            const toKeep = [];\n            JSON.parse(pinned).forEach(postId => {\n                const toPush = innerBlocks.filter(e => {\n                    const toCheck = tmp.filter(\n                        f => f.attributes.postID === postId,\n                    );\n                    return (\n                        e.attributes.postID === postId && 0 >= toCheck.length\n                    );\n                });\n                toPush.forEach(b => toKeep.push(b));\n            });\n\n            const allowedPerPage = postsPerPage - toKeep.length;\n\n            tmp = tmp.filter((e, index) => {\n                return index <= allowedPerPage - 1;\n            });\n\n            const toInsert = toKeep.concat(tmp);\n\n            replaceInnerBlocks(clientId, toInsert);\n        }\n    }, [posts]);\n\n    return (\n        <div {...blockProps}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <div {...innerBlocksProps} />}\n        </div>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal Dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Query'),\n    description: __(\n        'Query posts by format, topic, region, and/or date. Posts are displayed as Story Items.',\n    ),\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blockEditor;","module.exports = wp.compose;","module.exports = wp.components;","module.exports = wp.apiFetch;","module.exports = moment;","module.exports = wp.data;","module.exports = wp.url;","module.exports = ReactDOM;","module.exports = wp.blocks;"],"sourceRoot":""}