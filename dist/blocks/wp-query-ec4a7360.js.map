{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"React\"","webpack:///external \"wp.i18n\"","webpack:///./node_modules/@wordpress/icons/build-module/library/close-small.js","webpack:///./src/wp-query/taxQuery.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/index.js","webpack:///external \"moment\"","webpack:///external \"wp.blockEditor\"","webpack:///./node_modules/@wordpress/primitives/build-module/svg/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.url\"","webpack:///external \"wp.compose\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.htmlEntities\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/collapsible-list/index.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js"],"names":["module","exports","wp","element","React","i18n","xmlns","viewBox","d","TaxonomyField","index","label","taxonomy","value","options","taxQuery","setAttributes","isLink","icon","closeSmall","onClick","tmpData","data","splice","lable","__","style","margin","onChange","val","showInitialSuggestions","suggestionsQuery","type","subtype","id","title","url","terms","settings","TaxQuery","relation","useState","setOptions","useEffect","selectedTaxonomies","map","nextOptions","o","includes","disabled","toLowerCase","split","s","charAt","toUpperCase","substring","join","getLabel","length","marginTop","marginBottom","help","checked","isSecondary","isSmall","push","fetchPosts","attributes","Promise","resolve","console","log","request","method","path","apiFetch","then","results","forEach","result","dateString","excerpt","date","timestamp","moment","format","link","image","Fields","wide","formatTermId","programTermId","postsPerPage","labelTaxonomy","disableImage","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","getTerms","termIds","Object","keys","tmp","termId","name","className","display","flexDirection","flexGrow","paddingRight","parseInt","alignItems","paddingBottom","min","max","required","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","isBusy","isPrimary","isColumnLayout","ALLOWED","edit","pinned","blockProps","useBlockProps","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","renderAppender","InnerBlocks","ButtonBlockAppender","posts","replaceInnerBlocks","useDispatch","blocks","innerBlocks","item","args","extra","postID","emphasis","isChartArt","imageSlot","imageSize","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","createBlock","initStoryBlock","toKeep","JSON","parse","postId","filter","e","toCheck","f","b","allowedPerPage","toInsert","concat","save","Content","metadata","description","registerBlockType","blockEditor","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","i","arguments","source","key","getOwnPropertyDescriptors","defineProperties","defineProperty","props","_ref","isPressed","appliedProps","excluded","objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","_objectWithoutProperties","undefined","role","focusable","compose","components","ReactDOM","htmlEntities","getTermsByLetter","letter","perPage","slug","replace","parent","CollapsibleList","heading","chevron","placeholder","children","Icon","tagName","h","formattingControls","keepPlaceholderOnFocus","size","withState","termsData","excludeData","includeData","setState","exclude","include","isSelected","loadTerms","state","includeArr","term","term_id","stringify","stateInit","useDidMount","staticData","href","decodeEntities","bool","termName","termSlug","excludeState","includeState","findIndex","x","removeFromExclude","data-termid","data-term","height","fontSize"],"mappings":"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","file":"blocks/wp-query-ec4a7360.js","sourcesContent":["module.exports = wp.element;","module.exports = React;","module.exports = wp.i18n;","import{createElement}from\"@wordpress/element\";/**\n * WordPress dependencies\n */import{SVG,Path}from'@wordpress/primitives';var closeSmall=createElement(SVG,{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 24 24\"},createElement(Path,{d:\"M13 11.9l3.3-3.4-1.1-1-3.2 3.3-3.2-3.3-1.1 1 3.3 3.4-3.5 3.6 1 1L12 13l3.5 3.5 1-1z\"}));export default closeSmall;","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch, select } from '@wordpress/data';\nimport { __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    SelectControl,\n    ToggleControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\nimport { closeSmall } from '@wordpress/icons';\n\nconst TaxonomyField = ({\n    index,\n    label,\n    taxonomy = false,\n    value,\n    options,\n    taxQuery,\n    setAttributes,\n}) => {\n    const onRemove = () => {\n        const tmpData = taxQuery;\n        tmpData.data.splice(index, 1);\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTaxonomyChange = val => {\n        const tmpData = taxQuery;\n        tmpData.data[index].taxonomy = val;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTermChange = val => {\n        const { id, title, url } = val;\n        const tmpData = taxQuery;\n        tmpData.data[index].terms = id;\n        tmpData.data[index].title = title;\n        tmpData.data[index].value = url;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    return (\n        <div>\n            <Flex>\n                <FlexBlock>\n                    <strong>{label}</strong>\n                </FlexBlock>\n                <FlexItem>\n                    <Button\n                        isLink\n                        icon={closeSmall}\n                        onClick={onRemove}\n                        lable={__(`Remove taxonomy argument`)}\n                    />\n                </FlexItem>\n            </Flex>\n            {false === taxonomy && (\n                <div style={{ margin: '16px' }}>\n                    <SelectControl\n                        value={taxonomy}\n                        options={options}\n                        onChange={onTaxonomyChange}\n                    />\n                </div>\n            )}\n            {false !== taxonomy && null === value && (\n                <LinkControl\n                    label={__(`Term`)}\n                    value={value}\n                    showInitialSuggestions\n                    suggestionsQuery={{ type: 'term', subtype: taxonomy }}\n                    onChange={onTermChange}\n                    settings={[]}\n                />\n            )}\n            <HorizontalRule />\n        </div>\n    );\n};\n\nconst TaxQuery = ({ taxQuery, setAttributes }) => {\n    const { relation, data } = taxQuery;\n    const [options, setOptions] = useState([\n        { label: 'Select a Taxonomy', value: false },\n        { label: 'Topics', value: 'topic' },\n        { label: 'Formats', value: 'formats' },\n        { label: 'Programs', value: 'programs' },\n    ]);\n\n    const toggleRelation = () => {\n        const tmpData = taxQuery;\n        if ('OR' === tmpData.relation) {\n            tmpData.relation = 'AND';\n        } else {\n            tmpData.relation = 'OR';\n        }\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n\n    const getLabel = val => {\n        const { taxonomy, title } = val;\n        let label =\n            false === taxonomy ? `Choose Taxonomy` : `Choose ${taxonomy} Term`;\n        if (null !== title && false !== taxonomy) {\n            label = `${taxonomy}: ${title}`;\n        }\n        return label\n            .toLowerCase()\n            .split(' ')\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n            .join(' ');\n    };\n\n    /**\n     * Disable any taxonomy options that are already selected.\n     */\n    useEffect(() => {\n        // Go gather up selected taxonomies from taxQuery.data,\n        const selectedTaxonomies = data.map(({ taxonomy }) => taxonomy);\n        const nextOptions = options.map(o => {\n            if (selectedTaxonomies.includes(o.value)) {\n                o.disabled = true;\n            } else {\n                o.disabled = false;\n            }\n            return o;\n        });\n        setOptions(nextOptions);\n    }, [taxQuery]);\n    // Dont offer to change relation unless if data has more than one\n\n    return (\n        <Fragment>\n            <div>\n                {data.map((d, index) => {\n                    const { taxonomy, value } = d;\n                    const label = getLabel(d);\n                    return (\n                        <TaxonomyField\n                            index={index}\n                            label={__(label)}\n                            taxonomy={taxonomy}\n                            value={value}\n                            options={options}\n                            taxQuery={taxQuery}\n                            setAttributes={setAttributes}\n                        />\n                    );\n                })}\n                {2 <= data.length && (\n                    <div style={{ marginTop: '1em', marginBottom: '1em' }}>\n                        <ToggleControl\n                            label=\"Query Relation (OR|AND)\"\n                            help={\n                                'AND' === relation\n                                    ? 'AND (restrictive: restricts content)'\n                                    : 'OR (expansive: expands content)'\n                            }\n                            checked={'AND' === relation}\n                            onChange={toggleRelation}\n                        />\n                    </div>\n                )}\n            </div>\n            <Button\n                isSecondary\n                isSmall\n                onClick={() => {\n                    const tmpData = taxQuery;\n                    tmpData.data.push({\n                        taxonomy: false,\n                        terms: null,\n                        value: null,\n                    });\n                    setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n                }}\n            >\n                Add Taxonomy\n            </Button>\n        </Fragment>\n    );\n};\n\nexport default TaxQuery;\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = attributes => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const date = moment(dateString).format(defaultFormat);\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        console.log('fetchPosts?', attributes);\n\n        const request = {\n            method: 'POST',\n            path: '/prc-api/v2/block/wp-query',\n            data: attributes,\n        };\n\n        apiFetch(request).then(results => {\n            console.log(results);\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                const d = {\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                };\n                data.push(d);\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","/* eslint-disable radix */\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { closeSmall } from '@wordpress/icons';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport {\n    InspectorControls,\n    __experimentalLinkControl as LinkControl,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    RangeControl,\n    SelectControl,\n    ToggleControl,\n    TextControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\n\n/**\n * Internal Dependencies\n */\nimport TaxQuery from './taxQuery';\nimport { getTerms } from '../_shared';\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        formatTermId,\n        programTermId,\n        postsPerPage,\n        labelTaxonomy,\n        disableImage,\n        taxQuery,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                <h4 className=\"sans-serif\">Story Item Settings</h4>\n                <ToggleControl\n                    label=\"Disable Images\"\n                    checked={disableImage}\n                    onChange={() =>\n                        setAttributes({ disableImage: !disableImage })\n                    }\n                />\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Program\"\n                            value={programTermId}\n                            options={programOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    programTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Query Arguments</h4>\n                <RangeControl\n                    label={__('Number of posts')}\n                    value={postsPerPage}\n                    onChange={val => setAttributes({ postsPerPage: val })}\n                    min={3}\n                    max={10}\n                    required\n                />\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Taxonomy Query Arguments</h4>\n                <TaxQuery taxQuery={taxQuery} setAttributes={setAttributes} />\n            </div>\n\n            <HorizontalRule />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        fetchPosts(attributes).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","/**\n * WordPress Dependencies\n */\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n    InnerBlocks,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = (item, disableImage, labelTaxonomy) => {\n    const args = {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        imageSize: 'A3',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 2,\n        className: 'is-style-left',\n    };\n    if (true === disableImage) {\n        args.imageSlot = 'disabled';\n        args.className = 'is-style-disabled';\n        args.enableExcerpt = false;\n    }\n    if ('programs' === labelTaxonomy) {\n        args.enableProgramsTaxonomy = true;\n    }\n    return createBlock('prc-block/story-item', args);\n};\n\nconst edit = ({ attributes, setAttributes, className, clientId }) => {\n    const { pinned, postsPerPage, labelTaxonomy, disableImage } = attributes;\n\n    const blockProps = useBlockProps({ className });\n\n    const innerBlocksProps = useInnerBlocksProps({\n        allowedBlocks: ALLOWED,\n        orientation: 'vertical', // We should allow toggling this based on layout.\n        renderAppender: InnerBlocks.ButtonBlockAppender,\n    });\n\n    const [posts, setPosts] = useState(false);\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const { innerBlocks, hasInnerBlocks } = useSelect(\n        select => {\n            const blocks = select('core/block-editor').getBlocks(clientId);\n            return {\n                innerBlocks: blocks,\n                hasInnerBlocks: 0 < blocks.length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        if (false !== posts) {\n            let tmp = [];\n            posts.forEach(item => {\n                tmp.push(initStoryBlock(item, disableImage, labelTaxonomy));\n            });\n\n            const toKeep = [];\n            JSON.parse(pinned).forEach(postId => {\n                const toPush = innerBlocks.filter(e => {\n                    const toCheck = tmp.filter(\n                        f => f.attributes.postID === postId,\n                    );\n                    return (\n                        e.attributes.postID === postId && 0 >= toCheck.length\n                    );\n                });\n                toPush.forEach(b => toKeep.push(b));\n            });\n\n            const allowedPerPage = postsPerPage - toKeep.length;\n\n            tmp = tmp.filter((e, index) => {\n                return index <= allowedPerPage - 1;\n            });\n\n            const toInsert = toKeep.concat(tmp);\n\n            replaceInnerBlocks(clientId, toInsert);\n        }\n    }, [posts]);\n\n    return (\n        <div {...blockProps}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <div {...innerBlocksProps} />}\n        </div>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal Dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Query'),\n    description: __(\n        'Query posts by format, topic, region, and/or date. Posts are displayed as Story Items.',\n    ),\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = moment;","module.exports = wp.blockEditor;","import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/esm/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}/**\n * External dependencies\n */import classnames from'classnames';/**\n * WordPress dependencies\n */import{createElement}from'@wordpress/element';/** @typedef {{isPressed?: boolean} & import('react').ComponentPropsWithoutRef<'svg'>} SVGProps */ /**\n * @param {import('react').ComponentPropsWithoutRef<'circle'>} props\n *\n * @return {JSX.Element} Circle component\n */export var Circle=function Circle(props){return createElement('circle',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'g'>} props\n *\n * @return {JSX.Element} G component\n */export var G=function G(props){return createElement('g',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'path'>} props\n *\n * @return {JSX.Element} Path component\n */export var Path=function Path(props){return createElement('path',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'polygon'>} props\n *\n * @return {JSX.Element} Polygon component\n */export var Polygon=function Polygon(props){return createElement('polygon',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'rect'>} props\n *\n * @return {JSX.Element} Rect component\n */export var Rect=function Rect(props){return createElement('rect',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'defs'>} props\n *\n * @return {JSX.Element} Defs component\n */export var Defs=function Defs(props){return createElement('defs',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'radialGradient'>} props\n *\n * @return {JSX.Element} RadialGradient component\n */export var RadialGradient=function RadialGradient(props){return createElement('radialGradient',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'linearGradient'>} props\n *\n * @return {JSX.Element} LinearGradient component\n */export var LinearGradient=function LinearGradient(props){return createElement('linearGradient',props);};/**\n * @param {import('react').ComponentPropsWithoutRef<'stop'>} props\n *\n * @return {JSX.Element} Stop component\n */export var Stop=function Stop(props){return createElement('stop',props);};/**\n *\n * @param {SVGProps} props isPressed indicates whether the SVG should appear as pressed.\n *                         Other props will be passed through to svg component.\n *\n * @return {JSX.Element} Stop component\n */export var SVG=function SVG(_ref){var className=_ref.className,isPressed=_ref.isPressed,props=_objectWithoutProperties(_ref,[\"className\",\"isPressed\"]);var appliedProps=_objectSpread(_objectSpread({},props),{},{className:classnames(className,{'is-pressed':isPressed})||undefined,role:'img','aria-hidden':true,focusable:false});// Disable reason: We need to have a way to render HTML tag for web.\n// eslint-disable-next-line react/forbid-elements\nreturn createElement(\"svg\",appliedProps);};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","module.exports = wp.apiFetch;","module.exports = wp.url;","module.exports = wp.compose;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = wp.data;","module.exports = ReactDOM;","module.exports = wp.htmlEntities;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","import './style.scss';\nimport { RichText } from '@wordpress/block-editor';\nimport { Icon } from 'semantic-ui-react';\n\nconst CollapsibleList = ({\n    heading,\n    chevron,\n    placeholder,\n    setAttributes,\n    children,\n}) => {\n    return (\n        <div className=\"prc-collapsible-list\">\n            <div className=\"title\">\n                <div>\n                    <Icon name=\"caret down\" />\n                </div>\n                {false !== setAttributes && (\n                    <RichText\n                        tagName=\"h2\"\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder={placeholder}\n                        formattingControls={['link']}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                )}\n                {false === setAttributes && (\n                    <RichText.Content\n                        tagName=\"h2\"\n                        value={heading}\n                        className=\"sans-serif\"\n                    />\n                )}\n                {true === chevron && (\n                    <div>\n                        <Icon name=\"chevron right\" size=\"large\" />\n                    </div>\n                )}\n            </div>\n            <div className=\"content\">{children}</div>\n        </div>\n    );\n};\n\nexport default CollapsibleList;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n"],"sourceRoot":""}