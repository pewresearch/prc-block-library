{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"lodash\"","webpack:///external \"wp.i18n\"","webpack:///./src/menu-link/edit.js","webpack:///./src/menu-link/save.js","webpack:///./src/menu-link/variations.js","webpack:///./src/menu-link/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.components\"","webpack:///external \"wp.url\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\""],"names":["module","exports","wp","element","lodash","i18n","getSuggestionsQuery","type","subtype","SubMenu","close","innerBlocksProps","useInnerBlocksProps","className","classnames","list","menu","allowedBlocks","orientation","__experimentalCaptureToolbars","templateLock","position","onFocusOutside","onClose","style","zIndex","width","height","edit","attributes","context","isSelected","setAttributes","clientId","mergeBlocks","onReplace","label","opensInNewTab","url","description","rel","title","subMenuEnabled","link","useSelect","select","getClientIdsOfDescendants","getBlockRootClientId","allowSubMenus","getBlock","name","allowSubMenu","hasDescendants","length","isDraggingBlocks","subMenuType","hasOwnProperty","useState","isLinkOpen","setIsLinkOpen","isSubMenuOpen","setIsSubMenuOpen","listItemRef","useRef","itemLabelPlaceholder","__","ref","useEffect","isURL","prependHTTP","test","current","focus","ownerDocument","selection","defaultView","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","selectLabelText","placeCaretAtHorizontalEdge","blockProps","useBlockProps","bindGlobal","shortcuts","rawShortcut","primary","icon","linkIcon","shortcut","displayShortcut","onClick","moreIcon","value","onChange","descriptionValue","help","titleValue","autoComplete","relValue","checked","identifier","labelValue","onMerge","aria-label","placeholder","keepPlaceholderOnFocus","withoutInteractiveFormatting","allowedFormats","showInitialSuggestions","noDirectEntry","noURLSuggestion","suggestionsQuery","normalizedTitle","normalizedURL","newTitle","newURL","newOpensInNewTab","id","encodeURI","replace","escape","save","Content","isDefault","pageIcon","categoryIcon","tagIcon","metadata","settings","variations","__experimentalLabel","registerBlockType","blockEditor","components","blocks","data"],"mappings":"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","file":"blocks/menu-link-fb7e8558.js","sourcesContent":["module.exports = wp.element;","module.exports = lodash;","module.exports = wp.i18n;","/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { escape, get, head, find } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport {\n    KeyboardShortcuts,\n    PanelBody,\n    Popover,\n    TextControl,\n    TextareaControl,\n    ToggleControl,\n    ToolbarButton,\n    ToolbarGroup,\n} from '@wordpress/components';\nimport { rawShortcut, displayShortcut } from '@wordpress/keycodes';\nimport { __, sprintf } from '@wordpress/i18n';\nimport {\n    BlockControls,\n    InspectorControls,\n    RichText,\n    __experimentalLinkControl as LinkControl,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { isURL, prependHTTP } from '@wordpress/url';\nimport { Fragment, useState, useEffect, useRef } from '@wordpress/element';\nimport { placeCaretAtHorizontalEdge } from '@wordpress/dom';\nimport { link as linkIcon, formatIndent as moreIcon } from '@wordpress/icons';\n\n/**\n * Given the Link block's type attribute, return the query params to give to\n * /wp/v2/search.\n *\n * @param {string} type Link block's type attribute.\n * @return {{ type?: string, subtype?: string }} Search query params.\n */\nconst getSuggestionsQuery = type => {\n    switch (type) {\n        case 'page':\n            return { type: 'post', subtype: 'page' };\n        case 'topic':\n            return { type: 'term', subtype: 'topic' };\n        case 'formats':\n            return { type: 'term', subtype: 'formats' };\n        case 'programs':\n            return { type: 'term', subtype: 'programs' };\n        default:\n            return {};\n    }\n};\n\nconst SubMenu = ({ type, close }) => {\n    const innerBlocksProps = useInnerBlocksProps(\n        {\n            className: classnames({\n                list: 'inline' === type,\n                menu: 'dropdown' === type,\n            }),\n        },\n        {\n            allowedBlocks: ['prc-block/menu-link'],\n            orientation: 'vertical',\n            __experimentalCaptureToolbars: true,\n            templateLock: false,\n        },\n    );\n\n    if ('inline' === type) {\n        return <div {...innerBlocksProps} />;\n    }\n\n    return (\n        <Popover\n            position=\"bottom center\"\n            onFocusOutside={() => null}\n            onClose={close}\n            style={{ zIndex: 1 }}\n        >\n            <div style={{ width: '300px', height: '300px', zIndex: 2 }}>\n                <div {...innerBlocksProps} />\n            </div>\n        </Popover>\n    );\n};\n\nconst edit = ({\n    attributes,\n    context,\n    isSelected,\n    setAttributes,\n    clientId,\n    mergeBlocks,\n    onReplace,\n}) => {\n    const {\n        label,\n        type,\n        opensInNewTab,\n        url,\n        description,\n        rel,\n        title,\n        subMenuEnabled,\n    } = attributes;\n\n    const link = {\n        url,\n        opensInNewTab,\n    };\n\n    const { isDraggingBlocks, subMenuType, allowSubMenu } = useSelect(\n        select => {\n            const {\n                getClientIdsOfDescendants,\n                getBlockRootClientId,\n                getBlock,\n            } = select('core/block-editor');\n            let allowSubMenus = true;\n            const parentBlock = getBlock(getBlockRootClientId(clientId));\n            if ('prc-block/menu-link' === parentBlock.name) {\n                allowSubMenus = false;\n            }\n            return {\n                allowSubMenu: allowSubMenus,\n                hasDescendants: !!getClientIdsOfDescendants([clientId]).length,\n                isDraggingBlocks: select(\n                    'core/block-editor',\n                ).isDraggingBlocks(),\n                subMenuType: context.hasOwnProperty('prc-block/menu')\n                    ? 'dropdown'\n                    : 'inline',\n            };\n        },\n        [],\n    );\n\n    const [isLinkOpen, setIsLinkOpen] = useState(false);\n    const [isSubMenuOpen, setIsSubMenuOpen] = useState(false);\n    const listItemRef = useRef(null);\n    const itemLabelPlaceholder = __('Add link…');\n    const ref = useRef();\n\n    /**\n     * Focus the Link label text and select it.\n     */\n    const selectLabelText = () => {\n        ref.current.focus();\n        const { ownerDocument } = ref.current;\n        const { defaultView } = ownerDocument;\n        const selection = defaultView.getSelection();\n        const range = ownerDocument.createRange();\n        // Get the range of the current ref contents so we can add this range to the selection.\n        range.selectNodeContents(ref.current);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    };\n\n    // Show the LinkControl on mount if the URL is empty\n    // ( When adding a new menu item)\n    // This can't be done in the useState call because it conflicts\n    // with the autofocus behavior of the BlockListBlock component.\n    useEffect(() => {\n        if (!url) {\n            setIsLinkOpen(true);\n        }\n    }, []);\n\n    /**\n     * The hook shouldn't be necessary but due to a focus loss happening\n     * when selecting a suggestion in the link popover, we force close on block unselection.\n     */\n    useEffect(() => {\n        if (!isSelected) {\n            setIsLinkOpen(false);\n        }\n    }, [isSelected]);\n\n    // If the LinkControl popover is open and the URL has changed, close the LinkControl and focus the label text.\n    useEffect(() => {\n        if (isLinkOpen && url) {\n            // Does this look like a URL and have something TLD-ish?\n            if (isURL(prependHTTP(label)) && /^.+\\.[a-z]+/.test(label)) {\n                // Focus and select the label text.\n                selectLabelText();\n            } else {\n                // Focus it (but do not select).\n                placeCaretAtHorizontalEdge(ref.current, true);\n            }\n        }\n    }, [url]);\n\n    const blockProps = useBlockProps({\n        ref: listItemRef,\n        className: classnames('item', {\n            'is-editing':\n                isSelected &&\n                // Don't show the element as editing while dragging.\n                !isDraggingBlocks,\n            // Don't select the element while dragging.\n            'is-selected': isSelected && !isDraggingBlocks,\n            'has-link': !!url,\n        }),\n    });\n\n    return (\n        <Fragment>\n            <BlockControls>\n                <ToolbarGroup>\n                    <KeyboardShortcuts\n                        bindGlobal\n                        shortcuts={{\n                            [rawShortcut.primary('k')]: () =>\n                                setIsLinkOpen(true),\n                        }}\n                    />\n                    <ToolbarButton\n                        name=\"link\"\n                        icon={linkIcon}\n                        title={__('Link')}\n                        shortcut={displayShortcut.primary('k')}\n                        onClick={() => setIsLinkOpen(true)}\n                    />\n                    {true === allowSubMenu && (\n                        <ToolbarButton\n                            name=\"sub-menu\"\n                            icon={moreIcon}\n                            title={__('Sub Menu')}\n                            onClick={() => {\n                                if (false === subMenuEnabled) {\n                                    setAttributes({ subMenuEnabled: true });\n                                }\n                                setIsSubMenuOpen(!isSubMenuOpen);\n                            }}\n                        />\n                    )}\n                </ToolbarGroup>\n            </BlockControls>\n\n            <InspectorControls>\n                <PanelBody title={__('Link settings')}>\n                    <TextareaControl\n                        value={description || ''}\n                        onChange={descriptionValue => {\n                            setAttributes({ description: descriptionValue });\n                        }}\n                        label={__('Description')}\n                        help={__(\n                            'The description will be displayed in the menu if the current theme supports it.',\n                        )}\n                    />\n                    <TextControl\n                        value={title || ''}\n                        onChange={titleValue => {\n                            setAttributes({ title: titleValue });\n                        }}\n                        label={__('Link title')}\n                        autoComplete=\"off\"\n                    />\n                    <TextControl\n                        value={rel || ''}\n                        onChange={relValue => {\n                            setAttributes({ rel: relValue });\n                        }}\n                        label={__('Link rel')}\n                        autoComplete=\"off\"\n                    />\n                    {true === allowSubMenu && (\n                        <ToggleControl\n                            checked={subMenuEnabled}\n                            onChange={() => {\n                                setAttributes({\n                                    subMenuEnabled: !subMenuEnabled,\n                                });\n                            }}\n                            label={__('Enable Sub Menu')}\n                        />\n                    )}\n                </PanelBody>\n            </InspectorControls>\n\n            <div {...blockProps}>\n                <RichText\n                    ref={ref}\n                    identifier=\"label\"\n                    className={\n                        'is-style-text' === context['prc-block/menu']\n                            ? 'ui basic button'\n                            : ''\n                    }\n                    value={label}\n                    onChange={labelValue =>\n                        setAttributes({ label: labelValue })\n                    }\n                    onMerge={mergeBlocks}\n                    onReplace={onReplace}\n                    aria-label={__('Menu link text')}\n                    placeholder={itemLabelPlaceholder}\n                    keepPlaceholderOnFocus\n                    withoutInteractiveFormatting\n                    allowedFormats={['core/bold', 'core/italic']}\n                />\n                {isLinkOpen && (\n                    <Popover\n                        position=\"bottom center\"\n                        onClose={() => setIsLinkOpen(false)}\n                    >\n                        <LinkControl\n                            className=\"wp-block-navigation-link__inline-link-input\"\n                            value={link}\n                            showInitialSuggestions\n                            noDirectEntry={!!type}\n                            noURLSuggestion={!!type}\n                            suggestionsQuery={getSuggestionsQuery(type)}\n                            onChange={({\n                                title: newTitle = '',\n                                url: newURL = '',\n                                opensInNewTab: newOpensInNewTab,\n                                id,\n                            } = {}) =>\n                                setAttributes({\n                                    url: encodeURI(newURL),\n                                    label: (() => {\n                                        const normalizedTitle = newTitle.replace(\n                                            /http(s?):\\/\\//gi,\n                                            '',\n                                        );\n                                        const normalizedURL = newURL.replace(\n                                            /http(s?):\\/\\//gi,\n                                            '',\n                                        );\n                                        if (\n                                            '' !== newTitle &&\n                                            normalizedTitle !== normalizedURL &&\n                                            label !== newTitle\n                                        ) {\n                                            return escape(newTitle);\n                                        }\n                                        if (label) {\n                                            return label;\n                                        }\n                                        // If there's no label, add the URL.\n                                        return escape(normalizedURL);\n                                    })(),\n                                    opensInNewTab: newOpensInNewTab,\n                                    id,\n                                })\n                            }\n                        />\n                    </Popover>\n                )}\n                {true === subMenuEnabled && true === isSubMenuOpen && (\n                    <SubMenu\n                        type={subMenuType}\n                        close={() => setIsSubMenuOpen(!isSubMenuOpen)}\n                    />\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n    category as categoryIcon,\n    page as pageIcon,\n    postTitle as postIcon,\n    tag as tagIcon,\n} from '@wordpress/icons';\n\nexport default [\n    {\n        name: 'link',\n        isDefault: true,\n        title: __('Link'),\n        description: __('A link to a URL.'),\n        attributes: {},\n    },\n    {\n        name: 'page',\n        icon: pageIcon,\n        title: __('Page Link'),\n        description: __('A link to a page.'),\n        attributes: { type: 'page' },\n    },\n    {\n        name: 'topic',\n        icon: categoryIcon,\n        title: __('Topic Page Link'),\n        description: __('A link to a topic.'),\n        attributes: { type: 'topic' },\n    },\n    {\n        name: 'formats',\n        icon: tagIcon,\n        title: __('Format Link'),\n        description: __('A link to a format.'),\n        attributes: { type: 'formats' },\n    },\n    {\n        name: 'programs',\n        icon: tagIcon,\n        title: __('Program Link'),\n        description: __('A link to a program.'),\n        attributes: { type: 'programs' },\n    },\n];\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { mapMarker as linkIcon } from '@wordpress/icons';\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\nimport variations from './variations';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Link'),\n    icon: linkIcon,\n    description: __('Add a page, link, or another item to your navigation.'),\n    variations,\n    __experimentalLabel: ({ label }) => label,\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blockEditor;","module.exports = wp.components;","module.exports = wp.url;","module.exports = wp.blocks;","module.exports = wp.data;"],"sourceRoot":""}