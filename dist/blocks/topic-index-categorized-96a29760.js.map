{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"wp.i18n\"","webpack:///external \"React\"","webpack:///external \"moment\"","webpack:///external \"wp.apiFetch\"","webpack:///./src/topic-index-categorized/edit.js","webpack:///./src/topic-index-categorized/save.js","webpack:///./src/topic-index-categorized/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.url\"","webpack:///external \"wp.components\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/block-inserter-button/index.js","webpack:///external \"ReactDOM\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\""],"names":["module","exports","wp","element","i18n","React","moment","apiFetch","ALLOWED_BLOCKS","edit","attributes","className","setAttributes","clientId","heading","blockProps","useBlockProps","classnames","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","templateLock","renderAppender","e","label","blockName","tagName","value","onChange","h","placeholder","formattingControls","keepPlaceholderOnFocus","Icon","name","size","style","marginLeft","save","Content","metadata","settings","title","__","description","category","keywords","registerBlockType","blockEditor","url","components","getTerms","taxonomy","perPage","Promise","resolve","data","path","then","terms","index","length","slug","replace","toLowerCase","id","parent","BlockInserterButton","tooltipPosition","onClick","currentBlock","select","getBlock","console","log","innerBlocks","nextIndex","newBlock","createBlock","dispatch","insertBlock","ReactDOM","blocks"],"mappings":";;;;;;;;;;;;;;;;;sHAAAA,EAAOC,QAAUC,GAAGC,S,gBCApBH,EAAOC,QAAUC,GAAGE,M,8MCApBJ,EAAOC,QAAUI,O,iBCAjBL,EAAOC,QAAUK,Q,iBCAjBN,EAAOC,QAAUC,GAAGK,U,4KC4BdC,EAAiB,CAAC,2BAoDTC,EAlDF,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAC1CC,EAAYJ,EAAZI,QAEFC,EAAaC,wBAAc,CAC7BL,UAAWM,IAAWN,KAGpBO,EAAmBC,4CACrB,GACA,CACIC,cAAeZ,EACfa,YAAa,WACbC,cAAc,EACdC,eAAgB,SAAAC,GAAC,OACb,oBAAC,IAAD,CACIC,MAAM,oBACNC,UAAU,0BACVb,SAAUA,OAM1B,OACI,0BAASE,EACL,oBAAC,OAAD,KACI,oBAAC,WAAD,KACI,oBAAC,WAAD,CACIY,QAAQ,KACRC,MAAOd,EACPe,SAAU,SAAAC,GAAC,OAAIlB,EAAc,CAAEE,QAASgB,KACxCC,YAAY,aACZC,mBAAoB,CAAC,QACrBC,wBAAsB,EACtBtB,UAAU,gBAGlB,oBAAC,YAAD,KACI,oBAACuB,EAAA,EAAD,CACIC,KAAK,gBACLC,KAAK,QACLC,MAAO,CAAEC,WAAY,aAIjC,0BAASpB,KClENqB,EAJF,WACT,OAAO,oBAAC,cAAYC,QAAb,O,6kBCQHL,EAASM,EAATN,KAEFO,EAAW,CACbC,MAAOC,aAAG,2BACVC,YACI,gEACJC,SAAU,SACVC,SAAU,CAACH,aAAG,eAAgBA,aAAG,eAAgBA,aAAG,UACpDnC,OACA8B,QAGJS,4BAAkBb,EAAD,OAAYM,GAAaC,K,gBC1B1C1C,EAAOC,QAAUC,GAAG+C,a,iBCApBjD,EAAOC,QAAUC,GAAGgD,K,gBCApBlD,EAAOC,QAAUC,GAAGiD,Y,+HCadC,EAAW,SAACC,GAA4B,IAAlBC,EAAiB,uDAAP,GAClC,OAAO,IAAIC,SAAQ,SAAAC,GACf,IAAMC,EAAO,GACblD,IAAS,CACLmD,KAAK,UAAD,OAAYL,EAAZ,qBAAiCC,KACtCK,MAAK,SAAAC,GACJ,IAAK,IAAIC,EAAQ,EAAGA,EAAQD,EAAME,OAAQD,IAAS,CAC/C,IAAME,EAAOH,EAAMC,GAAOE,KAAKC,QAAlB,UACNX,EAASY,cADH,KAET,IAEJR,EAAKG,EAAMC,GAAOK,IAAM,CACpBA,GAAIN,EAAMC,GAAOK,GACjB/B,KAAMyB,EAAMC,GAAO1B,KACnBgC,OAAQP,EAAMC,GAAOM,OACrBJ,QAGRP,EAAQC,U,mCCOLW,EA7Ba,SAAC,GAKtB,IAAD,IAJF3C,aAIE,MAJM,GAIN,EAHFC,EAGE,EAHFA,UACAb,EAEE,EAFFA,SAEE,IADFH,kBACE,MADW,GACX,EAYF,OACI,oBAAC,SAAD,CACIe,MAAOmB,aAAGnB,GACV4C,gBAAgB,SAChBC,QAfY,WAChB,IAAMC,EAAeC,iBAAO,qBAAqBC,SAAS5D,GAC1D6D,QAAQC,IAAI,gBAAiBJ,EAAaK,YAAYd,QACtD,IAAMe,EAAYN,EAAaK,YAAYd,OAAS,EAC9CgB,EAAWC,sBAAYrD,EAAWhB,GACxCsE,mBAAS,qBAAqBC,YAC1BH,EACAD,EACAhE,IAQAF,UAAU,sCAETiC,aAAGnB,K,2DCjChBzB,EAAOC,QAAUiF,U,gBCAjBlF,EAAOC,QAAUC,GAAGiF,Q,gBCApBnF,EAAOC,QAAUC,GAAGuD,O","file":"blocks/topic-index-categorized-96a29760.js","sourcesContent":["module.exports = wp.element;","module.exports = wp.i18n;","module.exports = React;","module.exports = moment;","module.exports = wp.apiFetch;","/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport { Flex, FlexItem, FlexBlock } from '@wordpress/components';\nimport {\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n    RichText,\n} from '@wordpress/block-editor';\n\n/**\n * External dependencies\n */\nimport { Icon } from 'semantic-ui-react';\n\n/**\n * Internal dependencies\n */\n\nimport { BlockInserterButton } from 'shared';\n\nconst ALLOWED_BLOCKS = ['prc-block/taxonomy-tree'];\n\nconst edit = ({ attributes, className, setAttributes, clientId }) => {\n    const { heading } = attributes;\n\n    const blockProps = useBlockProps({\n        className: classnames(className),\n    });\n\n    const innerBlocksProps = useInnerBlocksProps(\n        {},\n        {\n            allowedBlocks: ALLOWED_BLOCKS,\n            orientation: 'vertical',\n            templateLock: false,\n            renderAppender: e => (\n                <BlockInserterButton\n                    label=\"Add New Tree List\"\n                    blockName=\"prc-block/taxonomy-tree\"\n                    clientId={clientId}\n                />\n            ),\n        },\n    );\n\n    return (\n        <div {...blockProps}>\n            <Flex>\n                <FlexItem>\n                    <RichText\n                        tagName=\"h2\"\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder=\"Heading...\"\n                        formattingControls={['link']}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                </FlexItem>\n                <FlexBlock>\n                    <Icon\n                        name=\"chevron right\"\n                        size=\"large\"\n                        style={{ marginLeft: '0.5em' }}\n                    />\n                </FlexBlock>\n            </Flex>\n            <div {...innerBlocksProps} />\n        </div>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Topic Index Categorized'),\n    description:\n        'A collapsible list that allows taxonomy trees to be inserted.',\n    category: 'layout',\n    keywords: [__('Topic Index'), __('Categorized'), __('Topic')],\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blockEditor;","module.exports = wp.url;","module.exports = wp.components;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { select, dispatch } from '@wordpress/data';\nimport { Button } from '@wordpress/components';\n\nimport { createBlock } from '@wordpress/blocks';\n\nconst BlockInserterButton = ({\n    label = '',\n    blockName,\n    clientId,\n    attributes = {},\n}) => {\n    const handleClick = () => {\n        const currentBlock = select('core/block-editor').getBlock(clientId);\n        console.log('debug info...', currentBlock.innerBlocks.length);\n        const nextIndex = currentBlock.innerBlocks.length - 1;\n        const newBlock = createBlock(blockName, attributes);\n        dispatch('core/block-editor').insertBlock(\n            newBlock,\n            nextIndex,\n            clientId,\n        );\n    };\n    return (\n        <Button\n            label={__(label)}\n            tooltipPosition=\"bottom\"\n            onClick={handleClick}\n            className=\"block-editor-button-block-appender\"\n        >\n            {__(label)}\n        </Button>\n    );\n};\n\nexport default BlockInserterButton;\n","module.exports = ReactDOM;","module.exports = wp.blocks;","module.exports = wp.data;"],"sourceRoot":""}