{"version":3,"sources":["webpack:///./src/grid/controller/utils.js","webpack:///./src/grid/controller/Controls.jsx","webpack:///./src/grid/controller/edit.js","webpack:///./src/grid/controller/save.js","webpack:///./src/grid/controller/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack:///./node_modules/@wpackio/entrypoint/lib/index.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js","webpack:///./node_modules/classnames/index.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///external [\"wp\",\"components\"]","webpack:///./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack:///external [\"wp\",\"i18n\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external \"lodash\"","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///external [\"wp\",\"data\"]"],"names":["toWidthPrecision","value","unitlessValue","parseFloat","Number","isFinite","toFixed","undefined","getEffectiveColumnWidth","block","totalBlockCount","attributes","width","getTotalColumnsWidth","blocks","length","reduce","sum","getColumnWidths","accumulator","Object","assign","clientId","getRedistributedColumnWidths","availableWidth","totalWidth","mapValues","getMappedColumnWidths","widths","map","merge","Controls","setAttributes","colors","verticalAlignment","backgroundColor","textColor","dividerColor","setBackgroundColor","setTextColor","setDividerColor","useDispatch","blockEditorStore","updateBlockAttributes","replaceInnerBlocks","useSelect","select","count","getBlockCount","innerBlockClientIds","getBlockOrder","getBlocks","updateColumns","previousColumns","newColumns","innerBlocks","hasExplicitWidths","every","blockWidth","endsWith","isAddingColumn","newColumnWidth","Array","from","createBlock","slice","onChange","newAlignment","forEach","innerBlockClientId","label","__","min","max","Math","status","isDismissible","__experimentalHasMultipleOrigins","__experimentalIsRenderedInSidebar","title","disableCustomColors","colorSettings","color","ALLOWED_BLOCKS","DEFAULT_TEMPLATE","gridLayout","index","desktopSpan","tabletSpan","mobileSpan","withColors","className","blockProps","useBlockProps","classnames","class","getColorClassName","slug","style","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","template","templateLock","renderAppender","save","Content","name","metadata","settings","edit","registerBlockType","_arrayLikeToArray","arr","len","i","arr2","path","replace","window","concat","_typeof","obj","module","exports","Symbol","iterator","constructor","prototype","__esModule","hasOwn","hasOwnProperty","classNames","classes","arguments","arg","argType","push","isArray","inner","apply","toString","key","call","join","default","__webpack_amd_options__","_unsupportedIterableToArray","o","minLen","n","test","_toConsumableArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError","_iterableToArray","iter","_defineProperty","defineProperty","enumerable","configurable","writable"],"mappings":"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","file":"blocks/grid-controller-49f897c7.js","sourcesContent":["/**\n * External dependencies\n */\nimport { merge, mapValues } from 'lodash';\n\n/**\n * Returns a column width attribute value rounded to standard precision.\n * Returns `undefined` if the value is not a valid finite number.\n *\n * @param {?number} value Raw value.\n *\n * @return {number} Value rounded to standard precision.\n */\nexport const toWidthPrecision = ( value ) => {\n\tconst unitlessValue = parseFloat( value );\n\treturn Number.isFinite( unitlessValue )\n\t\t? parseFloat( unitlessValue.toFixed( 2 ) )\n\t\t: undefined;\n};\n/**\n * Returns an effective width for a given block. An effective width is equal to\n * its attribute value if set, or a computed value assuming equal distribution.\n *\n * @param {WPBlock} block           Block object.\n * @param {number}  totalBlockCount Total number of blocks in Columns.\n *\n * @return {number} Effective column width.\n */\nexport function getEffectiveColumnWidth( block, totalBlockCount ) {\n\tconst { width = 100 / totalBlockCount } = block.attributes;\n\treturn toWidthPrecision( width );\n}\n\n/**\n * Returns the total width occupied by the given set of column blocks.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {number} Total width occupied by blocks.\n */\nexport function getTotalColumnsWidth(\n\tblocks,\n\ttotalBlockCount = blocks.length\n) {\n\treturn blocks.reduce(\n\t\t( sum, block ) =>\n\t\t\tsum + getEffectiveColumnWidth( block, totalBlockCount ),\n\t\t0\n\t);\n}\n\n/**\n * Returns an object of `clientId` → `width` of effective column widths.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Column widths.\n */\nexport function getColumnWidths( blocks, totalBlockCount = blocks.length ) {\n\treturn blocks.reduce( ( accumulator, block ) => {\n\t\tconst width = getEffectiveColumnWidth( block, totalBlockCount );\n\t\treturn Object.assign( accumulator, { [ block.clientId ]: width } );\n\t}, {} );\n}\n\n/**\n * Returns an object of `clientId` → `width` of column widths as redistributed\n * proportional to their current widths, constrained or expanded to fit within\n * the given available width.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {number}    availableWidth  Maximum width to fit within.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Redistributed column widths.\n */\nexport function getRedistributedColumnWidths(\n\tblocks,\n\tavailableWidth,\n\ttotalBlockCount = blocks.length\n) {\n\tconst totalWidth = getTotalColumnsWidth( blocks, totalBlockCount );\n\n\treturn mapValues( getColumnWidths( blocks, totalBlockCount ), ( width ) => {\n\t\tconst newWidth = ( availableWidth * width ) / totalWidth;\n\t\treturn toWidthPrecision( newWidth );\n\t} );\n}\n\n/**\n * Returns true if column blocks within the provided set are assigned with\n * explicit widths, or false otherwise.\n *\n * @param {WPBlock[]} blocks Block objects.\n *\n * @return {boolean} Whether columns have explicit widths.\n */\nexport function hasExplicitPercentColumnWidths( blocks ) {\n\treturn blocks.every( ( block ) => {\n\t\tconst blockWidth = block.attributes.width;\n\t\treturn Number.isFinite(\n\t\t\tblockWidth?.endsWith?.( '%' )\n\t\t\t\t? parseFloat( blockWidth )\n\t\t\t\t: blockWidth\n\t\t);\n\t} );\n}\n\n/**\n * Returns a copy of the given set of blocks with new widths assigned from the\n * provided object of redistributed column widths.\n *\n * @param {WPBlock[]}             blocks Block objects.\n * @param {Object<string,number>} widths Redistributed column widths.\n *\n * @return {WPBlock[]} blocks Mapped block objects.\n */\nexport function getMappedColumnWidths( blocks, widths ) {\n\treturn blocks.map( ( block ) =>\n\t\tmerge( {}, block, {\n\t\t\tattributes: {\n\t\t\t\twidth: `${ widths[ block.clientId ] }%`,\n\t\t\t},\n\t\t} )\n\t);\n}\n\n/**\n * Returns an array with columns widths values, parsed or no depends on `withParsing` flag.\n *\n * @param {WPBlock[]} blocks      Block objects.\n * @param {?boolean}  withParsing Whether value has to be parsed.\n *\n * @return {Array<number,string>} Column widths.\n */\nexport function getWidths( blocks, withParsing = true ) {\n\treturn blocks.map( ( innerColumn ) => {\n\t\tconst innerColumnWidth =\n\t\t\tinnerColumn.attributes.width || 100 / blocks.length;\n\n\t\treturn withParsing ? parseFloat( innerColumnWidth ) : innerColumnWidth;\n\t} );\n}\n\n/**\n * Returns a column width with unit.\n *\n * @param {string} width Column width.\n * @param {string} unit  Column width unit.\n *\n * @return {string} Column width with unit.\n */\nexport function getWidthWithUnit( width, unit ) {\n\twidth = 0 > parseFloat( width ) ? '0' : width;\n\n\tif ( isPercentageUnit( unit ) ) {\n\t\twidth = Math.min( width, 100 );\n\t}\n\n\treturn `${ width }${ unit }`;\n}\n\n/**\n * Returns a boolean whether passed unit is percentage\n *\n * @param {string} unit Column width unit.\n *\n * @return {boolean} \tWhether unit is '%'.\n */\nexport function isPercentageUnit( unit ) {\n\treturn unit === '%';\n}\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n\tNotice,\n\tPanelBody,\n\tRangeControl,\n\tToggleControl,\n} from '@wordpress/components';\n\nimport {\n\tInspectorControls,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\tPanelColorSettings,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { createBlock } from '@wordpress/blocks';\nimport { Fragment } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport {\n\thasExplicitPercentColumnWidths,\n\tgetMappedColumnWidths,\n\tgetRedistributedColumnWidths,\n\ttoWidthPrecision,\n} from './utils';\n\nexport default function Controls({\n\tattributes,\n\tsetAttributes,\n\tclientId,\n\tcolors,\n}) {\n\tconst { verticalAlignment } = attributes;\n\n\tconst {\n\t\tbackgroundColor,\n\t\ttextColor,\n\t\tdividerColor,\n\t\tsetBackgroundColor,\n\t\tsetTextColor,\n\t\tsetDividerColor,\n\t} = colors;\n\n\tconst { updateBlockAttributes, replaceInnerBlocks } =\n\t\tuseDispatch(blockEditorStore);\n\n\tconst { count, innerBlockClientIds, getBlocks } = useSelect(\n\t\t(select) => ({\n\t\t\tcount: select(blockEditorStore).getBlockCount(clientId),\n\t\t\tinnerBlockClientIds: select(blockEditorStore).getBlockOrder(clientId),\n\t\t\tgetBlocks: select(blockEditorStore).getBlocks,\n\t\t}),\n\t\t[clientId],\n\t);\n\n\t/**\n\t * Update all child Column blocks with a new vertical alignment setting\n\t * based on whatever alignment is passed in. This allows change to parent\n\t * to overide anything set on a individual column basis.\n\t *\n\t * @param {string} verticalAlignment the vertical alignment setting\n\t */\n\tconst updateAlignment = (newAlignment) => {\n\t\t// Update own alignment.\n\t\tsetAttributes({ verticalAlignment: newAlignment });\n\n\t\t// Update all child Column Blocks to match.\n\t\tinnerBlockClientIds.forEach((innerBlockClientId) => {\n\t\t\tupdateBlockAttributes(innerBlockClientId, {\n\t\t\t\tverticalAlignment: newAlignment,\n\t\t\t});\n\t\t});\n\t};\n\n\t/**\n\t * Updates the column count, including necessary revisions to child Column\n\t * blocks to grant required or redistribute available space.\n\t *\n\t * @param {number} previousColumns Previous column count.\n\t * @param {number} newColumns      New column count.\n\t */\n\tconst updateColumns = (previousColumns, newColumns) => {\n\t\tlet innerBlocks = getBlocks(clientId);\n\t\tconst hasExplicitWidths = hasExplicitPercentColumnWidths(innerBlocks);\n\t\t// Redistribute available width for existing inner blocks.\n\t\tconst isAddingColumn = newColumns > previousColumns;\n\t\tif (isAddingColumn && hasExplicitWidths) {\n\t\t\t// If adding a new column, assign width to the new column equal to\n\t\t\t// as if it were `1 / columns` of the total available space.\n\t\t\tconst newColumnWidth = toWidthPrecision(100 / newColumns);\n\t\t\t// Redistribute in consideration of pending block insertion as\n\t\t\t// constraining the available working width.\n\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\tinnerBlocks,\n\t\t\t\t100 - newColumnWidth,\n\t\t\t);\n\t\t\tinnerBlocks = [\n\t\t\t\t...getMappedColumnWidths(innerBlocks, widths),\n\t\t\t\t...Array.from({\n\t\t\t\t\tlength: newColumns - previousColumns,\n\t\t\t\t}).map(() =>\n\t\t\t\t\tcreateBlock('prc-block/grid-column', {\n\t\t\t\t\t\twidth: `${newColumnWidth}%`,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t];\n\t\t} else if (isAddingColumn) {\n\t\t\tinnerBlocks = [\n\t\t\t\t...innerBlocks,\n\t\t\t\t...Array.from({\n\t\t\t\t\tlength: newColumns - previousColumns,\n\t\t\t\t}).map(() => createBlock('prc-block/grid-column')),\n\t\t\t];\n\t\t} else {\n\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\tinnerBlocks = innerBlocks.slice(0, -(previousColumns - newColumns));\n\t\t\tif (hasExplicitWidths) {\n\t\t\t\t// Redistribute as if block is already removed.\n\t\t\t\tconst widths = getRedistributedColumnWidths(innerBlocks, 100);\n\t\t\t\tinnerBlocks = getMappedColumnWidths(innerBlocks, widths);\n\t\t\t}\n\t\t}\n\t\treplaceInnerBlocks(clientId, innerBlocks);\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={updateAlignment}\n\t\t\t\t\tvalue={verticalAlignment}\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={__('Columns')}\n\t\t\t\t\t\tvalue={count}\n\t\t\t\t\t\tonChange={(value) => updateColumns(count, value)}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={Math.max(6, count)}\n\t\t\t\t\t/>\n\t\t\t\t\t{6 < count && (\n\t\t\t\t\t\t<Notice status=\"warning\" isDismissible={false}>\n\t\t\t\t\t\t\t{__(\n\t\t\t\t\t\t\t\t'This column count exceeds the recommended amount and may cause visual breakage.',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Notice>\n\t\t\t\t\t)}\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelColorSettings\n\t\t\t\t\t__experimentalHasMultipleOrigins\n\t\t\t\t\t__experimentalIsRenderedInSidebar\n\t\t\t\t\ttitle={__('Color')}\n\t\t\t\t\tdisableCustomColors\n\t\t\t\t\tcolorSettings={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue: textColor.color,\n\t\t\t\t\t\t\tonChange: setTextColor,\n\t\t\t\t\t\t\tlabel: __('Text'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue: backgroundColor.color,\n\t\t\t\t\t\t\tonChange: setBackgroundColor,\n\t\t\t\t\t\t\tlabel: __('Background'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue: dividerColor.color,\n\t\t\t\t\t\t\tonChange: setDividerColor,\n\t\t\t\t\t\t\tlabel: __('Gutter Divider'),\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t</InspectorControls>\n\t\t</Fragment>\n\t);\n}\n","/**\n * External Dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress Dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport {\n\tuseInnerBlocksProps,\n\tuseBlockProps,\n\twithColors,\n\tgetColorClassName,\n} from '@wordpress/block-editor';\n\n/**\n * Internal Dependencies\n */\nimport Controls from './Controls';\n\nconst ALLOWED_BLOCKS = ['prc-block/grid-column'];\n\nconst DEFAULT_TEMPLATE = [\n\t[\n\t\t'prc-block/grid-column',\n\t\t{\n\t\t\tgridLayout: {\n\t\t\t\tindex: 1,\n\t\t\t\tdesktopSpan: 3,\n\t\t\t\ttabletSpan: 2,\n\t\t\t\tmobileSpan: 4,\n\t\t\t},\n\t\t},\n\t],\n\t[\n\t\t'prc-block/grid-column',\n\t\t{\n\t\t\tgridLayout: {\n\t\t\t\tindex: 2,\n\t\t\t\tdesktopSpan: 6,\n\t\t\t\ttabletSpan: 4,\n\t\t\t\tmobileSpan: 4,\n\t\t\t},\n\t\t},\n\t],\n\t[\n\t\t'prc-block/grid-column',\n\t\t{\n\t\t\tgridLayout: {\n\t\t\t\tindex: 3,\n\t\t\t\tdesktopSpan: 3,\n\t\t\t\ttabletSpan: 2,\n\t\t\t\tmobileSpan: 4,\n\t\t\t},\n\t\t},\n\t],\n];\n\nconst edit = ({\n\tattributes,\n\tsetAttributes,\n\tclassName,\n\ttextColor,\n\tsetTextColor,\n\tbackgroundColor,\n\tsetBackgroundColor,\n\tdividerColor,\n\tsetDividerColor,\n}) => {\n\tconst { verticalAlignment } = attributes;\n\n\tconst blockProps = useBlockProps({\n\t\tclassName: classnames( className, {\n\t\t\t'has-text-color': !! textColor.color || !! textColor?.class,\n\t\t\t[ getColorClassName( 'color', textColor?.slug ) ]:\n\t\t\t\t!! textColor?.slug,\n\t\t\t'has-background': !! backgroundColor.color || backgroundColor.class,\n\t\t\t[ getColorClassName( 'background-color', backgroundColor?.slug ) ]:\n\t\t\t\t!! backgroundColor?.slug,\n\t\t\t'has-divider': !! dividerColor.color || dividerColor.class,\n\t\t\t[ getColorClassName( 'divider-color', dividerColor?.slug ) ]:\n\t\t\t\t!! dividerColor?.slug,\n\t\t\t[`are-vertically-aligned-${verticalAlignment}`]: verticalAlignment,\n\t\t} ),\n\t\tstyle: {\n\t\t\tcolor: ! textColor?.slug && textColor?.color,\n\t\t\tbackgroundColor: ! backgroundColor?.slug && backgroundColor?.color,\n\t\t},\n\t});\n\n\tconst innerBlocksProps = useInnerBlocksProps(blockProps, {\n\t\tallowedBlocks: ALLOWED_BLOCKS,\n\t\torientation: 'horizontal',\n\t\ttemplate: DEFAULT_TEMPLATE,\n\t\ttemplateLock: false,\n\t\trenderAppender: false,\n\t});\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Controls\n\t\t\t\t{...{\n\t\t\t\t\tattributes,\n\t\t\t\t\tsetAttributes,\n\t\t\t\t\tcolors: {\n\t\t\t\t\t\ttextColor,\n\t\t\t\t\t\tsetTextColor,\n\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\tsetBackgroundColor,\n\t\t\t\t\t\tdividerColor,\n\t\t\t\t\t\tsetDividerColor,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div {...innerBlocksProps} />\n\t\t</Fragment>\n\t);\n};\n\nexport default withColors(\n\t{ textColor: 'color' },\n\t{ backgroundColor: 'color' },\n\t{ dividerColor: 'color' },\n)(edit);\n","/**\n * WordPress Dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => <InnerBlocks.Content />;\n\nexport default save;\n","/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\nimport './style.scss';\n\nconst { name } = metadata;\n\nconst settings = {\n\tedit,\n\tsave,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","/* eslint-disable camelcase */ /* eslint-disable babel/camelcase */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/* global __webpack_public_path__ */ // eslint-disable-next-line spaced-comment\n///<reference types=\"webpack-env\" />\n// We expect __webpack_public_path__ to be present, thanks to webpack\n// We are not using DOM in the typescript library, so let's just hack our way\n// through window\n// tslint:disable-next-line:no-any\n// We would override __webpack_public_path__ only if __WPACKIO__ webpack plugin is set\nif(__WPACKIO__){var path=(__WPACKIO__.appName+__WPACKIO__.outputPath).replace(/[^a-zA-Z0-9_-]/g,'');// eslint-disable-next-line no-global-assign\n__webpack_public_path__=window[\"__wpackIo\".concat(path)];}","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof=require(\"@babel/runtime/helpers/typeof\");/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/ /* global define */(function(){'use strict';var hasOwn={}.hasOwnProperty;function classNames(){var classes=[];for(var i=0;i<arguments.length;i++){var arg=arguments[i];if(!arg)continue;var argType=_typeof(arg);if(argType==='string'||argType==='number'){classes.push(arg);}else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);if(inner){classes.push(inner);}}}else if(argType==='object'){if(arg.toString===Object.prototype.toString){for(var key in arg){if(hasOwn.call(arg,key)&&arg[key]){classes.push(key);}}}else{classes.push(arg.toString());}}}return classes.join(' ');}if(typeof module!=='undefined'&&module.exports){classNames.default=classNames;module.exports=classNames;}else if(typeof define==='function'&&_typeof(define.amd)==='object'&&define.amd){// register as 'classnames', consistent with npm package name\ndefine('classnames',[],function(){return classNames;});}else{window.classNames=classNames;}})();","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","(function() { module.exports = window[\"wp\"][\"components\"]; }());","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","(function() { module.exports = window[\"wp\"][\"i18n\"]; }());","(function() { module.exports = window[\"wp\"][\"element\"]; }());","(function() { module.exports = window[\"lodash\"]; }());","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","(function() { module.exports = window[\"wp\"][\"blockEditor\"]; }());","(function() { module.exports = window[\"wp\"][\"blocks\"]; }());","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","(function() { module.exports = window[\"wp\"][\"data\"]; }());"],"sourceRoot":""}