{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"React\"","webpack:///external \"wp.i18n\"","webpack:///./src/taxonomy-tree/edit.js","webpack:///./src/taxonomy-tree/save.js","webpack:///./src/taxonomy-tree/index.js","webpack:///external \"moment\"","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"wp.url\"","webpack:///external \"wp.compose\"","webpack:///external \"wp.components\"","webpack:///external \"wp.blocks\"","webpack:///external \"wp.data\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.htmlEntities\"","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/_shared/components/collapsible-list/index.js","webpack:///./src/_shared/components/taxonomy-select-list/index.js"],"names":["module","exports","wp","element","React","i18n","ALLOWED_BLOCKS","edit","attributes","className","setAttributes","heading","blockProps","useBlockProps","classnames","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","templateLock","placeholder","chevron","save","Content","name","metadata","settings","title","__","description","category","icon","keywords","registerBlockType","moment","blockEditor","apiFetch","url","compose","components","blocks","data","ReactDOM","htmlEntities","getTermsByLetter","taxonomy","letter","Promise","resolve","path","then","terms","getTerms","perPage","index","length","slug","replace","toLowerCase","id","parent","CollapsibleList","children","Icon","tagName","value","onChange","h","formattingControls","keepPlaceholderOnFocus","size","withState","termsData","excludeData","includeData","setState","exclude","include","isSelected","loadTerms","state","JSON","parse","includeArr","map","term","push","term_id","stringify","stateInit","useDidMount","staticData","href","checked","includes","label","decodeEntities","b","bool","termId","termName","termSlug","excludeState","includeState","findIndex","x","splice","indexOf","removeFromExclude","data-termid","data-term","style","height","marginTop","fontSize","margin"],"mappings":"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","file":"blocks/taxonomy-tree-94117afe.js","sourcesContent":["module.exports = wp.element;","module.exports = React;","module.exports = wp.i18n;","/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport {\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { CollapsibleList } from 'shared';\n\nconst ALLOWED_BLOCKS = ['prc-block/menu-link'];\n\nconst edit = ({ attributes, className, setAttributes }) => {\n    const { heading } = attributes;\n\n    const blockProps = useBlockProps({\n        className: classnames(className),\n    });\n\n    const innerBlocksProps = useInnerBlocksProps(\n        {\n            className: classnames('ui relaxed tree list'),\n        },\n        {\n            allowedBlocks: ALLOWED_BLOCKS,\n            orientation: 'vertical',\n            templateLock: false,\n        },\n    );\n\n    return (\n        <div {...blockProps}>\n            <CollapsibleList\n                heading={heading}\n                placeholder=\"Politics\"\n                chevron\n                setAttributes={setAttributes}\n            >\n                <div {...innerBlocksProps} />\n            </CollapsibleList>\n        </div>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\nimport './style.scss';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Tree List'),\n    description: 'A tree list that can be expanded.',\n    category: 'layout',\n    icon: 'networking',\n    keywords: [__('Taxonomy Tree'), __('Taxonomies'), __('Tree')],\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = moment;","module.exports = wp.blockEditor;","module.exports = wp.apiFetch;","module.exports = wp.url;","module.exports = wp.compose;","module.exports = wp.components;","module.exports = wp.blocks;","module.exports = wp.data;","module.exports = ReactDOM;","module.exports = wp.htmlEntities;","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst structureTermsHierarchically = (terms) => {\n    return null;\n}\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (taxonomy, perPage, termValue = 'name', sortByLabel = true ) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n                \n                let value = termObj.name;\n                if ( 'termid' === termValue ) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if ( undefined !== termObj.parent && 0 !== termObj.parent ) {\n                    label = ' -- ' + label;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if ( false !== sortByLabel ) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = (taxonomy) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter( e => e.parent === 0 );\n            parentTerms.forEach( e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter( f => f.parent === e.id );\n                let children = [];\n                // Construct children array.\n                c.forEach( cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children\n                });\n            } );\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","import './style.scss';\nimport { RichText } from '@wordpress/block-editor';\nimport { Icon } from 'semantic-ui-react';\n\nconst CollapsibleList = ({\n    heading,\n    chevron,\n    placeholder,\n    setAttributes,\n    children,\n}) => {\n    return (\n        <div className=\"prc-collapsible-list\">\n            <div className=\"title\">\n                <div>\n                    <Icon name=\"caret down\" />\n                </div>\n                {false !== setAttributes && (\n                    <RichText\n                        tagName=\"h2\"\n                        value={heading}\n                        onChange={h => setAttributes({ heading: h })}\n                        placeholder={placeholder}\n                        formattingControls={['link']}\n                        keepPlaceholderOnFocus\n                        className=\"sans-serif\"\n                    />\n                )}\n                {false === setAttributes && (\n                    <RichText.Content\n                        tagName=\"h2\"\n                        value={heading}\n                        className=\"sans-serif\"\n                    />\n                )}\n                {true === chevron && (\n                    <div>\n                        <Icon name=\"chevron right\" size=\"large\" />\n                    </div>\n                )}\n            </div>\n            <div className=\"content\">{children}</div>\n        </div>\n    );\n};\n\nexport default CollapsibleList;\n","import { getTermsByLetter } from 'shared';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { CheckboxControl } from '@wordpress/components';\nimport { withState } from '@wordpress/compose';\nimport { useDidMount } from '@daniakash/lifecycle-hooks';\nimport { Fragment } from '@wordpress/element';\n\nconst TaxonomySelectList = withState({\n    termsData: [],\n    excludeData: [],\n    includeData: [],\n})(\n    ({\n        termsData,\n        excludeData,\n        includeData,\n        setState,\n        exclude,\n        include,\n        letter,\n        taxonomy,\n        setAttributes,\n        isSelected,\n    }) => {\n        const stateInit = terms => {\n            const state = {};\n\n            // Initialize exclude data from exclude prop\n            if (0 !== terms.length && 0 !== exclude.length) {\n                state.excludeData = JSON.parse(exclude);\n            }\n\n            // Initialize include data from scratch OR the include data from the include prop\n            if (0 !== terms.length && 0 === include.length) {\n                const includeArr = [];\n                terms.map(term => {\n                    includeArr.push({\n                        id: term.term_id,\n                        name: term.name,\n                        slug: term.slug,\n                    });\n                });\n                // We need to take this array and object and json stringify it, we will also need a function to convert back to an array of objects.\n                setAttributes({ include: JSON.stringify(includeArr) });\n                state.includeData = includeArr;\n            } else if (0 !== terms.length && 0 !== include.length) {\n                state.includeData = JSON.parse(include);\n            }\n\n            setState(state);\n        };\n\n        const staticInit = () => {\n            if (0 !== include.length && false === setAttributes) {\n                return JSON.parse(include);\n            }\n            return false;\n        };\n\n        const loadTerms = () => {\n            getTermsByLetter(taxonomy, 100, letter).then(terms => {\n                setState({ termsData: terms });\n                stateInit(terms);\n            });\n        };\n\n        // NO HOOKS ON SAVE\n        if (false !== setAttributes) {\n            useDidMount(() => {\n                if (0 === termsData.length) {\n                    loadTerms();\n                }\n            });\n        }\n\n        const processChange = (bool, termId, termName, termSlug) => {\n            const excludeState = excludeData;\n            const includeState = includeData;\n\n            const removeFromInclude = () => {\n                const index = includeState.findIndex(x => x.id === termId);\n                if (-1 !== index) includeState.splice(index, 1);\n            };\n\n            const removeFromExclude = () => {\n                const index = excludeState.indexOf(termId);\n                if (-1 !== index) excludeState.splice(index, 1);\n            };\n\n            if (true === bool) {\n                // Add term to exclude array\n                excludeState.push(termId);\n                // Remove term from includ earray\n                removeFromInclude();\n            } else {\n                // Add term to include array\n                includeState.push({\n                    id: termId,\n                    name: termName,\n                    slug: termSlug,\n                });\n                // Remove term from exclude array\n                removeFromExclude();\n            }\n\n            // Convert excludes array to comma sepparated string for storing in attributes.\n            setAttributes({\n                exclude: JSON.stringify(excludeState),\n                include: JSON.stringify(includeState),\n            });\n        };\n\n        const staticData = staticInit();\n        return (\n            <div className=\"ui link list\">\n                {false !== staticData && (\n                    <Fragment>\n                        {staticData.map(term => {\n                            return (\n                                <a\n                                    className=\"item\"\n                                    href={`/${taxonomy.toLowerCase()}/${\n                                        term.slug\n                                    }`}\n                                >\n                                    {term.name}\n                                </a>\n                            );\n                        })}\n                    </Fragment>\n                )}\n                {false !== setAttributes && (\n                    <Fragment>\n                        {termsData.map(term => {\n                            const checked = exclude.includes(term.term_id);\n\n                            const onChange = b => {\n                                processChange(\n                                    b,\n                                    term.term_id,\n                                    term.name,\n                                    term.slug,\n                                );\n                            };\n\n                            return (\n                                <div className=\"item\">\n                                    <CheckboxControl\n                                        label={decodeEntities(term.name)}\n                                        checked={checked}\n                                        onChange={onChange}\n                                        data-termid={term.term_id}\n                                        data-term={term.name}\n                                    />\n                                    <div\n                                        style={{\n                                            height: '15px',\n                                            marginTop: '-5px',\n                                        }}\n                                    >\n                                        {true === isSelected && (\n                                            <pre\n                                                style={{\n                                                    fontSize: '11px',\n                                                    margin: 0,\n                                                }}\n                                            >\n                                                ({term.slug})\n                                            </pre>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </Fragment>\n                )}\n            </div>\n        );\n    },\n);\n\nexport default TaxonomySelectList;\n"],"sourceRoot":""}