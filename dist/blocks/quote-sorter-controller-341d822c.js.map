{"version":3,"sources":["webpack:///./node_modules/@wpackio/entrypoint/lib/index.js","webpack:///external [\"wp\",\"i18n\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"apiFetch\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///external \"regeneratorRuntime\"","webpack:///external [\"wp\",\"blocks\"]","webpack:///./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/quote-sorter/controller/data/dataFormatter.ts","webpack:///./src/quote-sorter/controller/Dropzone.js","webpack:///./src/quote-sorter/controller/Controls.js","webpack:///./src/quote-sorter/controller/edit.js","webpack:///./src/quote-sorter/controller/save.js","webpack:///./src/quote-sorter/controller/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"names":["path","replace","window","concat","module","exports","regeneratorRuntime","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","arrayToJson","arr","stripDowncase","string","toLowerCase","categories","slice","categoriesFormatted","map","category","data","quotes","typologies","references","attributionPosition","includes","indexOf","splice","i","row","quote","attribution","returnAttribution","props","index","j","length","name","k","push","Dropzone","attributes","setAttributes","uploadStatus","sorterId","submitQuotes","fn","str","a","setTimeout","apiFetch","method","quoteData","hash","res","console","log","JSON","stringify","catch","e","self","this","args","arguments","apply","err","undefined","label","__","isColumnLayout","align","justify","style","display","flexDirection","alignItems","justifyContent","icon","disabled","onFilesDrop","c","filesList","reader","FileReader","onload","dataJson","rows","split","csvToArray","result","dataJsonString","forEach","file","readAsText","onDropCSV","onDrop","Controls","title","ALLOWED_BLOCKS","TEMPLATE","edit","blockProps","useBlockProps","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","template","save","Content","metadata","settings","registerBlockType","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable"],"mappings":"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","file":"blocks/quote-sorter-controller-341d822c.js","sourcesContent":["/* eslint-disable camelcase */ /* eslint-disable babel/camelcase */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n/* global __webpack_public_path__ */ // eslint-disable-next-line spaced-comment\n///<reference types=\"webpack-env\" />\n// We expect __webpack_public_path__ to be present, thanks to webpack\n// We are not using DOM in the typescript library, so let's just hack our way\n// through window\n// tslint:disable-next-line:no-any\n// We would override __webpack_public_path__ only if __WPACKIO__ webpack plugin is set\nif(__WPACKIO__){var path=(__WPACKIO__.appName+__WPACKIO__.outputPath).replace(/[^a-zA-Z0-9_-]/g,'');// eslint-disable-next-line no-global-assign\n__webpack_public_path__=window[\"__wpackIo\".concat(path)];}","(function() { module.exports = window[\"wp\"][\"i18n\"]; }());","(function() { module.exports = window[\"wp\"][\"components\"]; }());","(function() { module.exports = window[\"wp\"][\"apiFetch\"]; }());","(function() { module.exports = window[\"wp\"][\"element\"]; }());","(function() { module.exports = window[\"wp\"][\"blockEditor\"]; }());","module.exports = regeneratorRuntime;","(function() { module.exports = window[\"wp\"][\"blocks\"]; }());","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export function arrayToJson(arr: string | any[]) {\n\tconst stripDowncase = (string: string) => {\n\t\t// only return if value is indeed a string\n\t\tif (typeof string === 'string') {\n\t\t\treturn string.replace(/\\W/g, '').replace(/\\s/g, '').toLowerCase();\n\t\t}\n\t};\n\tconst categories = arr[0].slice(1);\n\tconst categoriesFormatted = categories.map((category) =>\n\t\tstripDowncase(category),\n\t);\n\tfunction returnAttribution(row: any[]) {\n\t\tif (attributionPosition) {\n\t\t\tconst attribution = row[attributionPosition + 1];\n\t\t\trow.splice(attributionPosition + 1, 1);\n\t\t\treturn attribution;\n\t\t}\n\t\treturn null;\n\t}\n\tconst data = arr.slice(1);\n\tconst quotes = {};\n\tconst typologies = {};\n\tconst references = {};\n\tconst attributionPosition = categoriesFormatted.includes('attribution')\n\t\t? categoriesFormatted.indexOf('attribution')\n\t\t: null;\n\tcategoriesFormatted.splice(attributionPosition, 1);\n\t// loop through data\n\tfor (let i = 0; i < data.length; i += 1) {\n\t\tconst row = data[i];\n\t\tconst quote = row[0];\n\t\tconst attribution = returnAttribution(row);\n\t\tconst props = row.slice(1);\n\t\t// create quotes object\n\t\tquotes[i] = {\n\t\t\tquote,\n\t\t\tattribution,\n\t\t\tprops: categoriesFormatted.map(\n\t\t\t\t(category: string, index: string | number) =>\n\t\t\t\t\t`${category}_${stripDowncase(props[index])}`,\n\t\t\t),\n\t\t};\n\n\t\t// generate typologies\n\t\tfor (let j = 0; j < props.length; j += 1) {\n\t\t\tconst key = `${categoriesFormatted[j]}_${stripDowncase(props[j])}`;\n\t\t\tif (!typologies[key]) {\n\t\t\t\ttypologies[key] = {\n\t\t\t\t\tname: props[j],\n\t\t\t\t\tcategory: categories[j],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// map quote ids to typologies\n\t\tfor (let k = 0; k < categoriesFormatted.length; k += 1) {\n\t\t\tconst key = `${categoriesFormatted[k]}_${stripDowncase(props[k])}`;\n\t\t\tif (!references[key]) {\n\t\t\t\treferences[key] = [i];\n\t\t\t} else {\n\t\t\t\treferences[key].push(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tquotes,\n\t\ttypologies,\n\t\treferences,\n\t};\n}\n","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n\tPlaceholder as WPComPlaceholder,\n\tSpinner,\n\tDropZoneProvider,\n\tDropZone,\n\tIcon,\n\tFlex,\n\tFlexItem,\n} from '@wordpress/components';\n\nimport apiFetch from '@wordpress/api-fetch';\n/**\n * Internal Dependencies\n */\nimport { arrayToJson } from './data/dataFormatter.ts';\n\nexport default function Dropzone({ attributes, setAttributes }) {\n\tconst { uploadStatus, sorterId } = attributes;\n\tconst csvToArray = (str) => {\n\t\tconst arr = [];\n\t\tconst rows = str.split('\\n');\n\t\tfor (let i = 0; i < rows.length; i++) {\n\t\t\tconst row = rows[i].split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\t\t\tfor (let j = 0; j < row.length; j++) {\n\t\t\t\trow[j] = row[j]\n\t\t\t\t\t.replace(/\"/g, '')\n\t\t\t\t\t.replace('\\r', '')\n\t\t\t\t\t.replace(/^\\s+|\\s+$/gm, '');\n\t\t\t}\n\t\t\tarr.push(row);\n\t\t}\n\t\treturn arr;\n\t};\n\n\tconst submitQuotes = async (str) => {\n\t\t// add hash to data\n\t\tsetTimeout(() => {\n\t\t\tapiFetch({\n\t\t\t\tpath: `/prc-api/v2/block/quote-sorter/submit/`,\n\t\t\t\tmethod: 'POST',\n\t\t\t\tdata: { quoteData: str, hash: sorterId || '' },\n\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tconsole.log({ res });\n\t\t\t\t\tconst { typologies } = res.data;\n\t\t\t\t\tsetAttributes({\n\t\t\t\t\t\tuploadStatus: 'processed',\n\t\t\t\t\t\tsorterId: res.hash,\n\t\t\t\t\t\ttypologies: JSON.stringify(typologies),\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.log('Error!');\n\t\t\t\t\tconsole.log({ e });\n\t\t\t\t});\n\t\t}, 2000);\n\t};\n\tconst onDropCSV = (filesList) => {\n\t\tsetAttributes({\n\t\t\tuploadStatus: 'processing',\n\t\t});\n\t\tconst reader = new FileReader();\n\t\t// Define how data is parsed and handled.\n\t\treader.onload = () => {\n\t\t\tconst dataArr = csvToArray(reader.result);\n\t\t\tconst dataJson = arrayToJson(dataArr);\n\t\t\tconst dataJsonString = JSON.stringify(dataJson);\n\t\t\tsubmitQuotes(dataJsonString);\n\t\t};\n\n\t\tfilesList.forEach((file) => reader.readAsText(file));\n\t};\n\treturn (\n\t\t<WPComPlaceholder\n\t\t\tlabel={__(\n\t\t\t\t'Drop a CSV of quotes in the space below. This may take a while if your file is very large. Make sure your CSV has Quote and Attribtution columns.',\n\t\t\t)}\n\t\t\tisColumnLayout\n\t\t>\n\t\t\t<DropZoneProvider>\n\t\t\t\t<Flex align=\"center\" justify=\"center\">\n\t\t\t\t\t{'processed' === uploadStatus && (\n\t\t\t\t\t\t<FlexItem\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\t<Icon icon=\"database-view\" />\n\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\tData has been uploaded to database. Reference ID:{' '}\n\t\t\t\t\t\t\t\t<strong>{sorterId}</strong>\n\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t)}\n\t\t\t\t\t{'unprocessed' === uploadStatus && <Icon icon=\"database-add\" />}\n\t\t\t\t\t{'processing' === uploadStatus && <Spinner />}\n\t\t\t\t</Flex>\n\t\t\t\t<DropZone\n\t\t\t\t\tdisabled={'processed' !== uploadStatus}\n\t\t\t\t\tonFilesDrop={(c) => {\n\t\t\t\t\t\tonDropCSV(c);\n\t\t\t\t\t}}\n\t\t\t\t\tonDrop={(c) => {\n\t\t\t\t\t\tconsole.log('onDrop', c);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</DropZoneProvider>\n\t\t</WPComPlaceholder>\n\t);\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport {\n\tInspectorControls,\n\tInspectorAdvancedControls,\n} from '@wordpress/block-editor';\nimport { PanelBody } from '@wordpress/components';\n/**\n * Internal Dependencies\n */\nimport Dropzone from './Dropzone';\n\nfunction Controls({ attributes, setAttributes }) {\n\treturn (\n\t\t<Fragment>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={__('Upload Data')}>\n\t\t\t\t\t<Dropzone attributes={attributes} setAttributes={setAttributes} />\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<InspectorAdvancedControls />\n\t\t</Fragment>\n\t);\n}\n\nexport default Controls;\n","/**\n * WordPress Dependencies\n */\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\nimport { Fragment } from '@wordpress/element';\n/**\n * Internal Dependencies\n */\nimport Controls from './Controls';\n\nconst ALLOWED_BLOCKS = [\n\t'prc-block/quote-sorter-dropdown',\n\t'prc-block/quote-sorter-search-bar',\n\t'prc-block/quote-sorter-quote-template',\n\t'prc-block/quote-sorter-quote-text',\n\t'prc-block/quote-sorter-quote-attribution',\n\t'prc-block/quote-sorter-dynamic-text',\n\t'prc-block/grid',\n\t'core/group',\n];\nconst TEMPLATE = [\n\t['prc-block/quote-sorter-search-bar'],\n\t['prc-block/quote-sorter-quote-template'],\n];\n\nconst edit = ({ attributes, setAttributes }) => {\n\tconst blockProps = useBlockProps();\n\tconst innerBlocksProps = useInnerBlocksProps(blockProps, {\n\t\tallowedBlocks: ALLOWED_BLOCKS,\n\t\torientation: 'vertical',\n\t\ttemplate: TEMPLATE,\n\t});\n\treturn (\n\t\t<Fragment>\n\t\t\t<div {...innerBlocksProps} />\n\t\t\t<Controls attributes={attributes} setAttributes={setAttributes} />\n\t\t</Fragment>\n\t);\n};\n\nexport default edit;\n","/**\n * WordPress Dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nfunction save() {\n\treturn <InnerBlocks.Content />;\n}\nexport default save;\n","/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n\tedit,\n\tsave,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"sourceRoot":""}