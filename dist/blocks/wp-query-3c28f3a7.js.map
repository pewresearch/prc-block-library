{"version":3,"sources":["webpack:///external \"wp.element\"","webpack:///external \"React\"","webpack:///external \"wp.i18n\"","webpack:///./src/wp-query/taxQuery.js","webpack:///./src/_shared/helpers/get-terms/index.js","webpack:///./src/wp-query/fetch.js","webpack:///./src/wp-query/controls.js","webpack:///./src/wp-query/edit.js","webpack:///./src/wp-query/save.js","webpack:///./src/wp-query/index.js","webpack:///external \"wp.blockEditor\"","webpack:///external \"wp.apiFetch\"","webpack:///external \"moment\"","webpack:///external \"wp.components\"","webpack:///external \"wp.url\"","webpack:///external \"wp.blocks\"","webpack:///external \"ReactDOM\"","webpack:///external \"wp.data\""],"names":["module","exports","wp","element","React","i18n","TaxonomyField","index","label","taxonomy","value","options","taxQuery","setAttributes","isLink","icon","closeSmall","onClick","tmpData","data","splice","lable","__","style","margin","onChange","val","showInitialSuggestions","suggestionsQuery","type","subtype","id","title","url","terms","settings","TaxQuery","relation","useState","setOptions","useEffect","selectedTaxonomies","map","nextOptions","o","includes","disabled","d","toLowerCase","split","s","charAt","toUpperCase","substring","join","getLabel","length","marginTop","marginBottom","help","checked","isSecondary","isSmall","push","getTerms","perPage","Promise","resolve","apiFetch","path","then","slug","replace","name","parent","fetchPosts","attributes","console","log","request","method","results","forEach","result","dateString","excerpt","date","timestamp","moment","format","link","image","Fields","wide","formatTermId","programTermId","postsPerPage","labelTaxonomy","disableImage","formatOptions","setFormatOptions","programOptions","setProgramOptions","initTerms","initData","termIds","Object","keys","tmp","termId","className","display","flexDirection","flexGrow","paddingRight","parseInt","alignItems","paddingBottom","min","max","required","Controls","setPosts","clientId","busy","toggleBusy","hasInnerBlocks","useSelect","select","getBlocks","clickHandler","setTimeout","isBusy","isPrimary","isColumnLayout","ALLOWED","edit","pinned","blockProps","useBlockProps","innerBlocksProps","useInnerBlocksProps","allowedBlocks","orientation","renderAppender","InnerBlocks","ButtonBlockAppender","posts","replaceInnerBlocks","useDispatch","blocks","innerBlocks","item","args","extra","postID","emphasis","isChartArt","imageSlot","imageSize","horizontal","stacked","enableHeader","enableExcerpt","enableExtra","enableProgramsTaxonomy","headerSize","createBlock","initStoryBlock","toKeep","JSON","parse","postId","filter","e","toCheck","f","b","allowedPerPage","toInsert","concat","save","Content","metadata","description","registerBlockType","blockEditor","components","ReactDOM"],"mappings":"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","file":"blocks/wp-query-3c28f3a7.js","sourcesContent":["module.exports = wp.element;","module.exports = React;","module.exports = wp.i18n;","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch, select } from '@wordpress/data';\nimport { __experimentalLinkControl as LinkControl } from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    SelectControl,\n    ToggleControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\nimport { closeSmall } from '@wordpress/icons';\n\nconst TaxonomyField = ({\n    index,\n    label,\n    taxonomy = false,\n    value,\n    options,\n    taxQuery,\n    setAttributes,\n}) => {\n    const onRemove = () => {\n        const tmpData = taxQuery;\n        tmpData.data.splice(index, 1);\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTaxonomyChange = val => {\n        const tmpData = taxQuery;\n        tmpData.data[index].taxonomy = val;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    const onTermChange = val => {\n        const { id, title, url } = val;\n        const tmpData = taxQuery;\n        tmpData.data[index].terms = id;\n        tmpData.data[index].title = title;\n        tmpData.data[index].value = url;\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n    return (\n        <div>\n            <Flex>\n                <FlexBlock>\n                    <strong>{label}</strong>\n                </FlexBlock>\n                <FlexItem>\n                    <Button\n                        isLink\n                        icon={closeSmall}\n                        onClick={onRemove}\n                        lable={__(`Remove taxonomy argument`)}\n                    />\n                </FlexItem>\n            </Flex>\n            {false === taxonomy && (\n                <div style={{ margin: '16px' }}>\n                    <SelectControl\n                        value={taxonomy}\n                        options={options}\n                        onChange={onTaxonomyChange}\n                    />\n                </div>\n            )}\n            {false !== taxonomy && null === value && (\n                <LinkControl\n                    label={__(`Term`)}\n                    value={value}\n                    showInitialSuggestions\n                    suggestionsQuery={{ type: 'term', subtype: taxonomy }}\n                    onChange={onTermChange}\n                    settings={[]}\n                />\n            )}\n            <HorizontalRule />\n        </div>\n    );\n};\n\nconst TaxQuery = ({ taxQuery, setAttributes }) => {\n    const { relation, data } = taxQuery;\n    const [options, setOptions] = useState([\n        { label: 'Select a Taxonomy', value: false },\n        { label: 'Topics', value: 'topic' },\n        { label: 'Formats', value: 'formats' },\n        { label: 'Programs', value: 'programs' },\n    ]);\n\n    const toggleRelation = () => {\n        const tmpData = taxQuery;\n        if ('OR' === tmpData.relation) {\n            tmpData.relation = 'AND';\n        } else {\n            tmpData.relation = 'OR';\n        }\n        setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n    };\n\n    const getLabel = val => {\n        const { taxonomy, title } = val;\n        let label =\n            false === taxonomy ? `Choose Taxonomy` : `Choose ${taxonomy} Term`;\n        if (null !== title && false !== taxonomy) {\n            label = `${taxonomy}: ${title}`;\n        }\n        return label\n            .toLowerCase()\n            .split(' ')\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n            .join(' ');\n    };\n\n    /**\n     * Disable any taxonomy options that are already selected.\n     */\n    useEffect(() => {\n        // Go gather up selected taxonomies from taxQuery.data,\n        const selectedTaxonomies = data.map(({ taxonomy }) => taxonomy);\n        const nextOptions = options.map(o => {\n            if (selectedTaxonomies.includes(o.value)) {\n                o.disabled = true;\n            } else {\n                o.disabled = false;\n            }\n            return o;\n        });\n        setOptions(nextOptions);\n    }, [taxQuery]);\n    // Dont offer to change relation unless if data has more than one\n\n    return (\n        <Fragment>\n            <div>\n                {data.map((d, index) => {\n                    const { taxonomy, value } = d;\n                    const label = getLabel(d);\n                    return (\n                        <TaxonomyField\n                            index={index}\n                            label={__(label)}\n                            taxonomy={taxonomy}\n                            value={value}\n                            options={options}\n                            taxQuery={taxQuery}\n                            setAttributes={setAttributes}\n                        />\n                    );\n                })}\n                {2 <= data.length && (\n                    <div style={{ marginTop: '1em', marginBottom: '1em' }}>\n                        <ToggleControl\n                            label=\"Query Relation (OR|AND)\"\n                            help={\n                                'AND' === relation\n                                    ? 'AND (restrictive: restricts content)'\n                                    : 'OR (expansive: expands content)'\n                            }\n                            checked={'AND' === relation}\n                            onChange={toggleRelation}\n                        />\n                    </div>\n                )}\n            </div>\n            <Button\n                isSecondary\n                isSmall\n                onClick={() => {\n                    const tmpData = taxQuery;\n                    tmpData.data.push({\n                        taxonomy: false,\n                        terms: null,\n                        value: null,\n                    });\n                    setAttributes({ taxQuery: { ...taxQuery, ...tmpData } });\n                }}\n            >\n                Add Taxonomy\n            </Button>\n        </Fragment>\n    );\n};\n\nexport default TaxQuery;\n","// @TODO: convert froomo wp api to apifetch https://www.npmjs.com/package/@wordpress/api-fetch\nimport apiFetch from '@wordpress/api-fetch';\n\nconst getTermsByLetter = (taxonomy, letter) => {\n    return new Promise(resolve => {\n        apiFetch({\n            path: `/prc-api/v2/blocks/helpers/get-taxonomy-by-letter/?taxonomy=${taxonomy}&letter=${letter}`,\n        }).then(terms => {\n            resolve(terms);\n        });\n    });\n};\n\nconst getTerms = (taxonomy, perPage = 25) => {\n    return new Promise(resolve => {\n        const data = {};\n        apiFetch({\n            path: `/wp/v2/${taxonomy}?per_page=${perPage}`,\n        }).then(terms => {\n            for (let index = 0; index < terms.length; index++) {\n                const slug = terms[index].slug.replace(\n                    `${taxonomy.toLowerCase()}_`,\n                    '',\n                );\n                data[terms[index].id] = {\n                    id: terms[index].id,\n                    name: terms[index].name,\n                    parent: terms[index].parent,\n                    slug,\n                };\n            }\n            resolve(data);\n        });\n    });\n};\n\nconst getTermsAsOptions = (\n    taxonomy,\n    perPage,\n    termValue = 'name',\n    sortByLabel = true,\n) => {\n    return new Promise(resolve => {\n        getTerms(taxonomy, perPage).then(data => {\n            const labelOptions = [];\n\n            Object.keys(data).forEach(key => {\n                const termObj = data[key];\n\n                let value = termObj.name;\n                if ('termid' === termValue) {\n                    value = termObj.id;\n                }\n\n                let label = termObj.name;\n                if (undefined !== termObj.parent && 0 !== termObj.parent) {\n                    label = ` -- ${label}`;\n                }\n\n                labelOptions.push({\n                    value,\n                    label,\n                });\n            });\n\n            if (false !== sortByLabel) {\n                labelOptions.sort((a, b) => (a.label > b.label ? 1 : -1));\n            }\n\n            resolve(labelOptions);\n        });\n    });\n};\n\nconst getTermsAsTree = taxonomy => {\n    return new Promise(resolve => {\n        getTerms(taxonomy).then(data => {\n            const treeData = [];\n            // Convert data from object of objects to array of objects.\n            const convertedData = Object.keys(data).map(i => data[i]);\n            // Filter out the parent terms first\n            const parentTerms = convertedData.filter(e => 0 === e.parent);\n            parentTerms.forEach(e => {\n                // Get children by filtering for terms with parent matching this id in loop.\n                const c = convertedData.filter(f => f.parent === e.id);\n                const children = [];\n                // Construct children array.\n                c.forEach(cT => {\n                    children.push({\n                        name: cT.name,\n                        id: cT.id,\n                    });\n                });\n                // Finally, push the fully structured parent -> child relationship to the tree data.\n                treeData.push({\n                    name: e.name,\n                    id: e.id,\n                    children,\n                });\n            });\n\n            resolve(treeData);\n        });\n    });\n};\n\nexport default getTerms;\nexport { getTerms, getTermsByLetter, getTermsAsOptions, getTermsAsTree };\n","import * as moment from 'moment';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst fetchPosts = attributes => {\n    const formatDate = dateString => {\n        const defaultFormat = 'MMM D, YYYY';\n        const date = moment(dateString).format(defaultFormat);\n        return date;\n    };\n\n    return new Promise(resolve => {\n        const data = [];\n        console.log('fetchPosts?', attributes);\n\n        const request = {\n            method: 'POST',\n            path: '/prc-api/v2/block/wp-query',\n            data: attributes,\n        };\n\n        apiFetch(request).then(results => {\n            console.log(results);\n            // eslint-disable-next-line no-plusplus\n            results.forEach(result => {\n                const d = {\n                    id: result.id,\n                    title: result.title,\n                    excerpt: result.excerpt,\n                    date: formatDate(result.timestamp),\n                    link: result.link,\n                    label: result.label,\n                    image: result.image,\n                };\n                data.push(d);\n            });\n            resolve(data);\n        });\n    });\n};\n\nexport default fetchPosts;\n","/* eslint-disable radix */\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { closeSmall } from '@wordpress/icons';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport {\n    InspectorControls,\n    __experimentalLinkControl as LinkControl,\n} from '@wordpress/block-editor';\nimport {\n    Button,\n    HorizontalRule,\n    PanelBody,\n    Placeholder,\n    RangeControl,\n    SelectControl,\n    ToggleControl,\n    TextControl,\n    Flex,\n    FlexItem,\n    FlexBlock,\n} from '@wordpress/components';\n\n/**\n * Internal Dependencies\n */\nimport TaxQuery from './taxQuery';\nimport { getTerms } from '../_shared';\nimport fetchPosts from './fetch';\n\nconst Fields = ({\n    attributes,\n    setAttributes,\n    wide = false,\n    disabled = false,\n}) => {\n    const {\n        formatTermId,\n        programTermId,\n        postsPerPage,\n        labelTaxonomy,\n        disableImage,\n        taxQuery,\n    } = attributes;\n\n    const [formatOptions, setFormatOptions] = useState([]);\n    const [programOptions, setProgramOptions] = useState([]);\n\n    const initTerms = (taxonomy, initData) => {\n        console.log('initTerms', attributes);\n        getTerms(taxonomy).then(data => {\n            const termIds = Object.keys(data);\n            const tmp = [{ value: 'any', label: 'Any' }];\n            termIds.forEach(termId => {\n                tmp.push({\n                    value: termId,\n                    label: data[termId].name,\n                });\n            });\n            initData(tmp);\n        });\n    };\n\n    useEffect(() => {\n        if (0 === formatOptions.length) {\n            initTerms('Formats', setFormatOptions);\n        }\n        if (0 === programOptions.length) {\n            initTerms('Programs', setProgramOptions);\n        }\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                <h4 className=\"sans-serif\">Story Item Settings</h4>\n                <ToggleControl\n                    label=\"Disable Images\"\n                    checked={disableImage}\n                    onChange={() =>\n                        setAttributes({ disableImage: !disableImage })\n                    }\n                />\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Format\"\n                            value={formatTermId}\n                            options={formatOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    formatTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'formats' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'formats' === labelTaxonomy\n                                            ? 'programs'\n                                            : 'formats',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n                <div\n                    style={\n                        true === wide\n                            ? {\n                                  display: 'flex',\n                                  flexDirection: 'row',\n                              }\n                            : {}\n                    }\n                >\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      flexGrow: '1',\n                                      paddingRight: '1em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <SelectControl\n                            label=\"Program\"\n                            value={programTermId}\n                            options={programOptions}\n                            onChange={termId => {\n                                setAttributes({\n                                    programTermId: parseInt(termId),\n                                });\n                            }}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <div\n                        style={\n                            true === wide\n                                ? {\n                                      display: 'flex',\n                                      alignItems: 'flex-end',\n                                      paddingBottom: '0.2em',\n                                  }\n                                : {}\n                        }\n                    >\n                        <ToggleControl\n                            label=\"Use as Label\"\n                            checked={'programs' === labelTaxonomy}\n                            onChange={() =>\n                                setAttributes({\n                                    labelTaxonomy:\n                                        'programs' === labelTaxonomy\n                                            ? 'formats'\n                                            : 'programs',\n                                })\n                            }\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Query Arguments</h4>\n                <RangeControl\n                    label={__('Number of posts')}\n                    value={postsPerPage}\n                    onChange={val => setAttributes({ postsPerPage: val })}\n                    min={3}\n                    max={10}\n                    required\n                />\n            </div>\n\n            <HorizontalRule />\n\n            <div>\n                <h4 className=\"sans-serif\">Taxonomy Query Arguments</h4>\n                <TaxQuery taxQuery={taxQuery} setAttributes={setAttributes} />\n            </div>\n\n            <HorizontalRule />\n        </Fragment>\n    );\n};\n\nconst Controls = ({ attributes, setAttributes, setPosts, clientId }) => {\n    const [busy, toggleBusy] = useState(false);\n    const { hasInnerBlocks } = useSelect(\n        select => {\n            return {\n                hasInnerBlocks:\n                    0 < select('core/block-editor').getBlocks(clientId).length,\n            };\n        },\n        [clientId],\n    );\n\n    const clickHandler = () => {\n        toggleBusy(true);\n        fetchPosts(attributes).then(data => {\n            setTimeout(() => {\n                toggleBusy(false);\n                setPosts(data);\n            }, 3600);\n        });\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title={__('Query Arguments')}>\n                    <Fields\n                        attributes={attributes}\n                        setAttributes={setAttributes}\n                        disabled={busy}\n                    />\n                    <Button\n                        isBusy={busy}\n                        isPrimary\n                        onClick={() => clickHandler()}\n                    >\n                        Update\n                    </Button>\n                </PanelBody>\n            </InspectorControls>\n            {false === hasInnerBlocks && (\n                <Placeholder label=\"Configure Query Args\" isColumnLayout>\n                    <div>\n                        <Fields\n                            attributes={attributes}\n                            setAttributes={setAttributes}\n                            disabled={busy}\n                            wide\n                        />\n                        <Button\n                            isBusy={busy}\n                            isPrimary\n                            onClick={() => clickHandler()}\n                        >\n                            Query Posts\n                        </Button>\n                    </div>\n                </Placeholder>\n            )}\n        </Fragment>\n    );\n};\n\nexport default Controls;\n","/**\n * WordPress Dependencies\n */\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n    InnerBlocks,\n    __experimentalUseInnerBlocksProps as useInnerBlocksProps,\n    useBlockProps,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\nimport Controls from './controls';\n\nconst ALLOWED = ['prc-block/story-item'];\n\nconst initStoryBlock = (item, disableImage, labelTaxonomy) => {\n    const args = {\n        title: item.title,\n        image: item.image,\n        excerpt: item.excerpt,\n        link: item.link,\n        label: item.label,\n        date: item.date,\n        extra: '',\n        // Post Meta Data:\n        postID: item.id,\n        // Item Options\n        emphasis: false,\n        // Image Position:\n        isChartArt: false,\n        imageSlot: 'left',\n        imageSize: 'A3',\n        horizontal: true,\n        stacked: false,\n        // Misc Toggles:\n        enableHeader: true,\n        enableExcerpt: true,\n        enableExtra: false,\n        enableProgramsTaxonomy: false,\n        headerSize: 2,\n        className: 'is-style-left',\n    };\n    if (true === disableImage) {\n        args.imageSlot = 'disabled';\n        args.className = 'is-style-disabled';\n        args.enableExcerpt = false;\n    }\n    if ('programs' === labelTaxonomy) {\n        args.enableProgramsTaxonomy = true;\n    }\n    return createBlock('prc-block/story-item', args);\n};\n\nconst edit = ({ attributes, setAttributes, className, clientId }) => {\n    const { pinned, postsPerPage, labelTaxonomy, disableImage } = attributes;\n\n    const blockProps = useBlockProps({ className });\n\n    const innerBlocksProps = useInnerBlocksProps({\n        allowedBlocks: ALLOWED,\n        orientation: 'vertical', // We should allow toggling this based on layout.\n        renderAppender: InnerBlocks.ButtonBlockAppender,\n    });\n\n    const [posts, setPosts] = useState(false);\n\n    const { replaceInnerBlocks } = useDispatch('core/block-editor');\n\n    const { innerBlocks, hasInnerBlocks } = useSelect(\n        select => {\n            const blocks = select('core/block-editor').getBlocks(clientId);\n            return {\n                innerBlocks: blocks,\n                hasInnerBlocks: 0 < blocks.length,\n            };\n        },\n        [clientId],\n    );\n\n    // Go create story item blocks from posts fetched\n    useEffect(() => {\n        if (false !== posts) {\n            let tmp = [];\n            posts.forEach(item => {\n                tmp.push(initStoryBlock(item, disableImage, labelTaxonomy));\n            });\n\n            const toKeep = [];\n            JSON.parse(pinned).forEach(postId => {\n                const toPush = innerBlocks.filter(e => {\n                    const toCheck = tmp.filter(\n                        f => f.attributes.postID === postId,\n                    );\n                    return (\n                        e.attributes.postID === postId && 0 >= toCheck.length\n                    );\n                });\n                toPush.forEach(b => toKeep.push(b));\n            });\n\n            const allowedPerPage = postsPerPage - toKeep.length;\n\n            tmp = tmp.filter((e, index) => {\n                return index <= allowedPerPage - 1;\n            });\n\n            const toInsert = toKeep.concat(tmp);\n\n            replaceInnerBlocks(clientId, toInsert);\n        }\n    }, [posts]);\n\n    return (\n        <div {...blockProps}>\n            <Controls\n                attributes={attributes}\n                setAttributes={setAttributes}\n                setPosts={setPosts}\n                clientId={clientId}\n            />\n            {true === hasInnerBlocks && <div {...innerBlocksProps} />}\n        </div>\n    );\n};\n\nexport default edit;\n","/**\n * WordPress dependencies\n */\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nconst save = () => {\n    return <InnerBlocks.Content />;\n};\n\nexport default save;\n","/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal Dependencies\n */\nimport metadata from './block.json';\nimport edit from './edit';\nimport save from './save';\n\nconst { name } = metadata;\n\nconst settings = {\n    title: __('Query'),\n    description: __(\n        'Query posts by format, topic, region, and/or date. Posts are displayed as Story Items.',\n    ),\n    edit,\n    save,\n};\n\nregisterBlockType(name, { ...metadata, ...settings });\n","module.exports = wp.blockEditor;","module.exports = wp.apiFetch;","module.exports = moment;","module.exports = wp.components;","module.exports = wp.url;","module.exports = wp.blocks;","module.exports = ReactDOM;","module.exports = wp.data;"],"sourceRoot":""}