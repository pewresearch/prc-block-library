{"version":3,"sources":["webpack:///external [\"wp\",\"compose\"]","webpack:///external [\"wp\",\"hooks\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"blockEditor\"]","webpack:///./src/table/index.js"],"names":["module","exports","window","convertToRow","d","tag","map","content","convertJSONToAttributes","console","log","row","cells","TableBlockEdit","props","attributes","setAttributes","useState","toggleDropped","title","isPrimary","onFilesDrop","c","filesList","reader","FileReader","onload","csv","parse","result","err","data","headerData","shift","bodyData","body","head","forEach","file","readAsBinaryString","onDrop","TableBlockFilter","createHigherOrderComponent","BlockEdit","name","shortcuts","label","isCollapsed","controls","targetLevel","icon","isActive","onClick","addFilter"],"mappings":";;;;;;;;;;;;;;;;;wHAAcA,EAAOC,QAAUC,OAAW,GAAW,S,kBCAvCF,EAAOC,QAAUC,OAAW,GAAS,O,gBCArCF,EAAOC,QAAUC,OAAW,GAAW,S,gBCAvCF,EAAOC,QAAUC,OAAW,GAAc,Y,gBCA1CF,EAAOC,QAAUC,OAAW,GAAe,a,yJC2BnDC,EAAe,SAACC,GAAmB,IAAhBC,EAAe,uDAAT,KAC3B,OAAOD,EAAEE,KAAI,SAACC,GACV,MAAO,CACHA,UACAF,WAKNG,EAA0B,SAACJ,GAAmB,IAAhBC,EAAe,uDAAT,KAEtC,OADAI,QAAQC,IAAI,0BAA2BL,EAAKD,GACxC,OAASC,EACFF,EAAaC,EAAGC,GAEpBD,EAAEE,KAAI,SAACK,GACV,MAAO,CAAEC,MAAOT,EAAaQ,EAAKN,QAIpCQ,EAAiB,SAACC,GACkBA,EAA9BC,WAAR,IAAoBC,EAAkBF,EAAlBE,cACpB,EAAoCC,oBAAS,GAA7C,mBAAmBC,GAAnB,WAqBA,OACI,oBAAC,WAAD,KACI,oBAAC,oBAAD,KACI,oBAAC,YAAD,CAAWC,MAAM,cACb,oBAAC,WAAD,KACI,oBAAC,mBAAD,KACI,oBAAC,SAAD,CAAQC,WAAS,GAAjB,cACA,oBAAC,WAAD,CACIC,YAAa,SAACC,GA3BxB,IAACC,EACTC,EA2BsBf,QAAQC,IAAI,cAAeY,GA5BxCC,EA6BuBD,GA5BhCE,EAAS,IAAIC,YAEZC,OAAS,WACZC,IAAIC,MAAMJ,EAAOK,QAAQ,SAACC,EAAKC,GAC3BtB,QAAQC,IAAI,sBAAuBqB,EAAMjB,EAAMC,YAE/C,IAAMiB,EAAaxB,EAAwBuB,EAAKE,QAAS,MAEnDC,EAAW1B,EAAwBuB,GACzCf,EAAc,CAAEmB,KAAMD,IACtBlB,EAAc,CAAEoB,KAAM,CAAC,CAAExB,MAAOoB,MAChCvB,QAAQC,IAAI,aAAcwB,EAAUF,OAI5CT,EAAUc,SAAQ,SAACC,GAAD,OAAUd,EAAOe,mBAAmBD,MAc1BpB,GAAc,IAElBsB,OAAQ,SAAClB,GACLb,QAAQC,IAAI,SAAUY,GACtBJ,GAAc,YAW5CuB,EAAmBC,sCAA2B,SAACC,GACjD,OAAO,SAAC7B,GAEJ,MAAI,eADaA,EAAT8B,KAEG,oBAACD,EAAc7B,GAGtB,oBAAC,WAAD,KACI,oBAAC,oBAAD,CACI+B,UAAY,CACR,MAAS,kBAAMpC,QAAQC,IAAI,gBAAiBI,MAGhD,oBAAC6B,EAAc7B,GACf,oBAAC,gBAAD,KACI,oBAAC,UAAD,CACIgC,MAAO,uBAEP,oBAAC,eAAD,CACIC,aAAa,EACbC,SAAU,CAAC,GAAG1C,KAAI,SAAA2C,GACd,MAAO,CACHC,KAAM,iBACN/B,MAAO,eACPgC,UAAU,EACVC,QAJG,WAKC3C,QAAQC,IAAI,WAAYI,aAQpD,oBAACD,EAAmBC,OAIjC,wBAEHuC,oBAAU,mBAAoB,kBAAmBZ,EAAkB,K","file":"blocks/table-3652b0d7.js","sourcesContent":["(function() { module.exports = window[\"wp\"][\"compose\"]; }());","(function() { module.exports = window[\"wp\"][\"hooks\"]; }());","(function() { module.exports = window[\"wp\"][\"element\"]; }());","(function() { module.exports = window[\"wp\"][\"components\"]; }());","(function() { module.exports = window[\"wp\"][\"blockEditor\"]; }());","// Init additional panel body inspector tools area for core/table block.\n\n// Dropzone for CSV file\n// Convert to table json data\n/**\n * WordPress Dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { Fragment, useState, useEffect } from '@wordpress/element';\nimport { InspectorControls, BlockControls } from '@wordpress/block-editor';\nimport {\n    Button,\n    DropZoneProvider,\n    DropZone,\n    KeyboardShortcuts,\n    PanelBody,\n    PanelRow,\n    Toolbar,\n    ToolbarGroup\n} from '@wordpress/components';\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * External Dependencies\n */\nimport csv from 'csv';\n\nconst convertToRow = (d, tag = 'td') => {\n    return d.map((content) => {\n        return {\n            content,\n            tag,\n        };\n    });\n};\n\nconst convertJSONToAttributes = (d, tag = 'td') => {\n    console.log('convertJSONToAttributes', tag, d);\n    if ('th' === tag) {\n        return convertToRow(d, tag);\n    }\n    return d.map((row) => {\n        return { cells: convertToRow(row, tag) };\n    });\n};\n\nconst TableBlockEdit = (props) => {\n    const { attributes, setAttributes } = props;\n    const [hasDropped, toggleDropped] = useState(false);\n\n    const onDropCSV = (filesList) => {\n        const reader = new FileReader();\n        // Define how data is parsed and handled.\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n                console.log('onDropCSV Result...', data, props.attributes);\n\n                const headerData = convertJSONToAttributes(data.shift(), 'th');\n\n                const bodyData = convertJSONToAttributes(data);\n                setAttributes({ body: bodyData });\n                setAttributes({ head: [{ cells: headerData }] });\n                console.log('...data...', bodyData, headerData);\n            });\n        };\n\n        filesList.forEach((file) => reader.readAsBinaryString(file));\n    };\n\n    return (\n        <Fragment>\n            <InspectorControls>\n                <PanelBody title=\"CSV Import\">\n                    <PanelRow>\n                        <DropZoneProvider>\n                            <Button isPrimary>Upload CSV</Button>\n                            <DropZone\n                                onFilesDrop={(c) => {\n                                    console.log('onFilesDrop', c);\n                                    onDropCSV(c);\n                                    toggleDropped(true);\n                                }}\n                                onDrop={(c) => {\n                                    console.log('onDrop', c);\n                                    toggleDropped(true);\n                                }}\n                            />\n                        </DropZoneProvider>\n                    </PanelRow>\n                </PanelBody>\n            </InspectorControls>\n        </Fragment>\n    );\n};\n\nconst TableBlockFilter = createHigherOrderComponent((BlockEdit) => {\n    return (props) => {\n        const { name } = props;\n        if ('core/table' !== name) {\n            return <BlockEdit {...props} />;\n        }\n        return (\n            <Fragment>\n                <KeyboardShortcuts\n                    shortcuts={ {\n                        'enter': () => console.log(\"enter pressed\", props),\n                    } }\n                >\n                    <BlockEdit {...props} />\n                    <BlockControls>\n                        <Toolbar\n                            label={'Test Block Controls'}\n                        >\n                            <ToolbarGroup\n                                isCollapsed={false}\n                                controls={[1].map(targetLevel => {\n                                    return {\n                                        icon: 'admin-settings',\n                                        title: 'Test Control',\n                                        isActive: false,\n                                        onClick() {\n                                            console.log(\"clicked!\", props);\n                                        },\n                                    };\n                                })}\n                            />\n                        </Toolbar>\n                    </BlockControls>\n                </KeyboardShortcuts>\n                <TableBlockEdit {...props} />\n            </Fragment>\n        );\n    };\n}, 'withInspectorControl');\n\naddFilter('editor.BlockEdit', 'prc-block/table', TableBlockFilter, 21);\n"],"sourceRoot":""}